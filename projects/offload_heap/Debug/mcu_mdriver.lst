
Debug/mcu_mdriver.elf:     file format elf32-littlearm
Debug/mcu_mdriver.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08002b1d

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00005b50 memsz 0x00005b50 flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x08005b50 align 2**16
         filesz 0x000000c8 memsz 0x00000d1c flags rw-
    LOAD off    0x00000d1c vaddr 0x20000d1c paddr 0x08005c18 align 2**16
         filesz 0x00000000 memsz 0x00000604 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  08004d88  08004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b40  08005b40  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08005b40  08005b40  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b40  08005b40  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005b48  08005b48  00015b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08005b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c54  200000c8  08005c18  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d1c  08005c18  00020d1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db8d  00000000  00000000  000200f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c1b  00000000  00000000  0003dc83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000b90  00000000  00000000  0004489e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  00045430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000300  00000000  00000000  00046038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac0d  00000000  00000000  00046338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000349c  00000000  00000000  00050f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000003c  00000000  00000000  000543e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001918  00000000  00000000  00054420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00004362  00000000  00000000  00055d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 0000069b  00000000  00000000  0005a09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000ac  00000000  00000000  0005a735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .stab         000000cc  00000000  00000000  0005a7e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .stabstr      000001b9  00000000  00000000  0005a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001c0 l    d  .text	00000000 .text
08004d88 l    d  .rodata	00000000 .rodata
08005b40 l    d  .ARM.extab	00000000 .ARM.extab
08005b40 l    d  .ARM	00000000 .ARM
08005b40 l    d  .preinit_array	00000000 .preinit_array
08005b40 l    d  .init_array	00000000 .init_array
08005b48 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
200000c8 l    d  .bss	00000000 .bss
20000d1c l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 startup_stm32l4s5xx.o
f1e0f85f l       *ABS*	00000000 BootRAM
08002b34 l       .text	00000000 LoopCopyDataInit
08002b2e l       .text	00000000 CopyDataInit
08002b46 l       .text	00000000 LoopFillZerobss
08002b42 l       .text	00000000 FillZerobss
08002b52 l       .text	00000000 LoopForever
08002b6c l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 crtstuff.c
08004d70 l     O .text	00000000 __EH_FRAME_BEGIN__
08000a5c l     F .text	00000000 __do_global_dtors_aux
200000c8 l     O .bss	00000000 completed.1
08005b48 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000a80 l     F .text	00000000 frame_dummy
200000cc l     O .bss	00000000 object.0
08005b40 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mcu_mdriver.c
200000e8 l     O .bss	00000004 errors
20000000 l     O .data	0000005c tracestr
08000a9c l     F .text	00000020 stack_test
08000abc l     F .text	0000001a heap_test
200000ec l     O .bss	00000004 test_mem_use
08000f0c l     F .text	0000046c read_trace
080013ac l     F .text	00000210 eval_mm_valid
080015bc l     F .text	000001e4 eval_mm_util
08001378 l     F .text	00000032 free_trace
080017a0 l     F .text	00000268 printresults
08000d20 l     F .text	00000170 add_range
08001a70 l     F .text	00000048 malloc_error
08001a34 l     F .text	0000003c unix_error
080052a8 l     O .rodata	0000000a __func__.0
08000e90 l     F .text	0000004a remove_range
08000eda l     F .text	00000032 clear_ranges
08001a08 l     F .text	0000002c app_error
00000000 l    df *ABS*	00000000 mcu_mlib.c
200004f0 l     O .bss	00000004 mem_start_brk
200004f4 l     O .bss	00000004 mem_brk
00000000 l    df *ABS*	00000000 mcu_mm.c
08001bcc l     F .text	0000003c extend_heap
00000000 l    df *ABS*	00000000 mcu_timer.c
08001e08 l     F .text	00000034 __NVIC_EnableIRQ
08001e3c l     F .text	00000050 __NVIC_SetPriority
200004f8 l     O .bss	00000004 t2_time
00000000 l    df *ABS*	00000000 mcu.c
200004fc l     O .bss	00000800 output_str
00000000 l    df *ABS*	00000000 mcu_request.c
08002018 l     F .text	00000018 send
08002030 l     F .text	00000018 receive
00000000 l    df *ABS*	00000000 uart.c
08002130 l     F .text	00000064 uart_pin_setup
08002194 l     F .text	000000a4 uart_enable
00000000 l    df *ABS*	00000000 uart_dma.c
20000d00 l     O .bss	00000004 receiving
20000d04 l     O .bss	00000004 transmitting
00000000 l    df *ABS*	00000000 mcu_syscalls.c
00000000 l    df *ABS*	00000000 mcu_mpu.c
00000000 l    df *ABS*	00000000 mcu_init.c
080026f0 l     F .text	00000050 __NVIC_SetPriority
00000000 l    df *ABS*	00000000 system_stm32l4xx.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
08002c50 l     F .text	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-vfprintf.c
08002d78 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080038c4 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfscanf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 nano-vfscanf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strtol.c
08004a18 l     F .text	00000104 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 strtoul.c
08004b20 l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 read.c
00000000 l    df *ABS*	00000000 sbrk.c
20000d18 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 write.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000068 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08005b4c l       .fini_array	00000000 __fini_array_end
08005b48 l       .fini_array	00000000 __fini_array_start
08005b44 l       .init_array	00000000 __init_array_end
08005b40 l       .preinit_array	00000000 __preinit_array_end
08005b40 l       .init_array	00000000 __init_array_start
08005b40 l       .preinit_array	00000000 __preinit_array_start
08002b6c  w    F .text	00000002 RTC_Alarm_IRQHandler
08004cc0 g     F .text	00000010 _malloc_usable_size_r
08002b6c  w    F .text	00000002 EXTI2_IRQHandler
0800465c g     F .text	000000b4 _scanf_chars
08002b6c  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08002b6c  w    F .text	00000002 TIM8_CC_IRQHandler
08004ca0 g     F .text	00000020 _isatty_r
08004cf0 g     F .text	00000010 _getpid
08003ab4 g     F .text	00000024 _lseek_r
08002b6c  w    F .text	00000002 DebugMon_Handler
08002540 g     F .text	0000000c sys_free
0800058c g     F .text	0000005a .hidden __floatdidf
080049f0 g     F .text	00000024 _kill_r
08002b6c  w    F .text	00000002 TIM1_CC_IRQHandler
08002b6c  w    F .text	00000002 TSC_IRQHandler
0800313e g     F .text	00000024 __sseek
08003974 g     F .text	00000070 __sinit
08002048 g     F .text	0000000e mem_req_setup
0800356c g     F .text	000000a4 __swbuf_r
08002740 g     F .text	00000048 HardFault_Handler
08003918 g     F .text	0000002c __sfmoreglue
08003be4 g     F .text	0000000c __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
20000cfc g     O .bss	00000004 output_offset
08002238 g     F .text	0000003c uart_baud_gen
08003554 g     F .text	00000014 strerror
08002b6c  w    F .text	00000002 SysTick_Handler
08003ba4 g     F .text	00000034 memmove
08002b6c  w    F .text	00000002 TAMP_STAMP_IRQHandler
08005b50 g       *ABS*	00000000 _sidata
08002b6c  w    F .text	00000002 PendSV_Handler
08002b6c  w    F .text	00000002 NMI_Handler
08005b40 g       .ARM	00000000 __exidx_end
08001d50 g     F .text	0000008c mm_realloc
08002b6c  w    F .text	00000002 EXTI3_IRQHandler
080020ec g     F .text	00000044 uart_receive
08002bac g     F .text	0000000c __errno
0800209c g     F .text	00000050 uart_send
08002b6c  w    F .text	00000002 LPTIM2_IRQHandler
08002b6c  w    F .text	00000002 DFSDM1_FLT1_IRQHandler
08004c7c g     F .text	00000024 _fstat_r
20000d14 g     O .bss	00000004 errno
08004710 g     F .text	000001e8 _scanf_i
08003102 g     F .text	00000004 __seofread
08004d88 g       .text	00000000 _etext
200000c8 g       .bss	00000000 _sbss
08002b6c  w    F .text	00000002 GFXMMU_IRQHandler
08002b6c  w    F .text	00000002 I2C3_ER_IRQHandler
08002b6c  w    F .text	00000002 DFSDM1_FLT2_IRQHandler
08001fd8 g     F .text	0000000c loop
08001f30 g     F .text	0000000c get_time
08002c24 g     F .text	0000001c memcpy
200000e4 g     O .bss	00000004 verbose
08001c68 g     F .text	000000b8 mm_malloc
0800390c g     F .text	0000000c _cleanup_r
08003d9c g     F .text	000001fc _svfprintf_r
08000514 g     F .text	00000022 .hidden __floatsidf
08002b6c  w    F .text	00000002 EXTI0_IRQHandler
08002b6c  w    F .text	00000002 I2C2_EV_IRQHandler
08002b6c  w    F .text	00000002 CAN1_RX0_IRQHandler
08002b6c  w    F .text	00000002 FPU_IRQHandler
08003188 g     F .text	000003cc _strerror_r
20000060 g     O .data	00000004 SystemCoreClock
08002b6c  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0800498e g     F .text	00000050 _raise_r
08004ce0 g     F .text	00000010 _fstat
08002b70 g     F .text	0000003c __assert_func
08002b6c  w    F .text	00000002 UsageFault_Handler
08002b6c  w    F .text	00000002 LTDC_ER_IRQHandler
08004012 g     F .text	0000003a __ssrefill_r
08004a14 g     F .text	00000004 _getpid_r
200000c8 g       .bss	00000000 __bss_start__
080004f4 g     F .text	0000001e .hidden __aeabi_ui2d
20000000 g       .data	00000000 _sdata
08002b6c  w    F .text	00000002 SPI1_IRQHandler
08002b6c  w    F .text	00000002 OCTOSPI1_IRQHandler
08000270 g     F .text	00000000 .hidden __aeabi_drsub
08003028 g     F .text	00000020 _sbrk_r
08002078 g     F .text	00000022 req_receive
08002b6c  w    F .text	00000002 TIM6_DAC_IRQHandler
080048f8 g     F .text	00000024 _read_r
200000f0 g     O .bss	00000400 msg
08002b6c  w    F .text	00000002 DCMI_IRQHandler
08000538 g     F .text	00000042 .hidden __extendsfdf2
0800404c g     F .text	000002f0 __ssvfscanf_r
08002b6c  w    F .text	00000002 TIM8_UP_IRQHandler
0800083c g     F .text	000001d0 .hidden __aeabi_ddiv
0800027c g     F .text	00000276 .hidden __adddf3
08005b40 g       .ARM	00000000 __exidx_start
080005e8 g     F .text	00000254 .hidden __aeabi_dmul
08004d00 g     F .text	00000010 _isatty
20000d12 g     O .bss	00000001 __lock___sinit_recursive_mutex
080052f0 g     O .rodata	00000004 _global_impure_ptr
08003c88 g     F .text	0000005e _realloc_r
08002bdc g     F .text	00000048 __libc_init_array
08002b6c  w    F .text	00000002 OCTOSPI2_IRQHandler
08002b6c  w    F .text	00000002 DMA2_Channel2_IRQHandler
08002b6c  w    F .text	00000002 DMA1_Channel4_IRQHandler
08002b6c  w    F .text	00000002 SAI2_IRQHandler
08003710 g     F .text	0000000e abort
080004f4 g     F .text	0000001e .hidden __floatunsidf
08002b6c  w    F .text	00000002 ADC1_IRQHandler
08004d40 g     F .text	0000001c _sbrk
08002b6c  w    F .text	00000002 DFSDM1_FLT3_IRQHandler
08004d70 g     F .text	00000000 _init
08002344 g     F .text	000001e8 SVC_Handler_Main
08001ddc g     F .text	0000002c mm_finish
08002b6c  w    F .text	00000002 USART3_IRQHandler
08001fe4 g     F .text	00000034 var_print
20000d1c g       .bss	00000000 _ebss
08002b6c  w    F .text	00000002 DMA1_Channel7_IRQHandler
08002b1c  w    F .text	00000038 Reset_Handler
08002b6c  w    F .text	00000002 CAN1_RX1_IRQHandler
08000a0c g     F .text	0000004e .hidden __fixdfsi
08001b0c g     F .text	00000090 mem_sbrk
08001ab8 g     F .text	00000054 mem_init
08002056 g     F .text	00000022 req_send
08002b6c  w    F .text	00000002 UART5_IRQHandler
20000d10 g     O .bss	00000001 __lock___malloc_recursive_mutex
08001f3c g     F .text	0000009c timer_init
080027e8 g     F .text	00000040 led_on
08002bb8 g     F .text	00000024 fprintf
08002b6c  w    F .text	00000002 TIM4_IRQHandler
0800027c g     F .text	00000276 .hidden __aeabi_dadd
0800316a g     F .text	0000001e strcat
08002b6c  w    F .text	00000002 DMA2_Channel1_IRQHandler
0800057c g     F .text	0000006a .hidden __aeabi_ul2d
0800599c g     O .rodata	00000020 __sf_fake_stderr
20000d20 g       ._user_heap_stack	00000000 end
080027c8 g     F .text	00000020 memfault_init
08002b6c  w    F .text	00000002 I2C1_EV_IRQHandler
08003ab2 g     F .text	00000002 __retarget_lock_release_recursive
08003ce6 g     F .text	000000b4 __ssputs_r
08002b6c  w    F .text	00000002 DMAMUX1_OVR_IRQHandler
08002b6c  w    F .text	00000002 DMA1_Channel6_IRQHandler
08002da6 g     F .text	00000024 __sfputs_r
08002274 g     F .text	00000012 uart_init
08002b6c  w    F .text	00000002 UART4_IRQHandler
08002b6c  w    F .text	00000002 DMA2_Channel4_IRQHandler
08003944 g     F .text	0000000c __sfp_lock_acquire
080001d0 g     F .text	00000000 memchr
20000d1c g       .bss	00000000 __bss_end__
08001ba8 g     F .text	0000000c mem_heap_hi
08003bf0 g     F .text	00000098 _free_r
08001ecc g     F .text	00000064 TIM3_IRQHandler
08002b6c  w    F .text	00000002 RCC_IRQHandler
2000005c g     O .data	00000004 sp_reset
00000200 g       *ABS*	00000000 _Min_Heap_Size
080022b4 g     F .text	0000003c DMA1_Channel1_IRQHandler
08003f98 g     F .text	0000007a _sungetc_r
08000278 g     F .text	0000027a .hidden __aeabi_dsub
08002b6c g       .text	00000002 Default_Handler
08002b6c  w    F .text	00000002 DMA2_Channel7_IRQHandler
0800252c g     F .text	00000006 sys_mm_init
08003568 g     F .text	00000004 _user_strerror
0800057c g     F .text	0000006a .hidden __floatundidf
08004d20 g     F .text	00000010 _lseek
08002b6c  w    F .text	00000002 EXTI15_10_IRQHandler
08002948 g     F .text	000001d4 set_sysclk_to_120
08004c04 g     F .text	00000004 _strtoul_r
08002b6c  w    F .text	00000002 TIM7_IRQHandler
08002b6c  w    F .text	00000002 SDMMC1_IRQHandler
08003720 g     F .text	00000020 _close_r
08000514 g     F .text	00000022 .hidden __aeabi_i2d
08002b6c  w    F .text	00000002 TIM5_IRQHandler
08002562 g     F .text	00000008 sys_get_time
08002b6c  w    F .text	00000002 I2C3_EV_IRQHandler
0800254c g     F .text	00000010 sys_realloc
08003088 g     F .text	00000058 sscanf
08003634 g     F .text	000000dc __swsetup_r
08002b6c  w    F .text	00000002 EXTI9_5_IRQHandler
0800083c g     F .text	000001d0 .hidden __divdf3
080039e4 g     F .text	0000008c __sfp
08002b6c  w    F .text	00000002 RTC_WKUP_IRQHandler
08003968 g     F .text	0000000c __sinit_lock_release
08002b6c  w    F .text	00000002 LTDC_IRQHandler
080005e8 g     F .text	00000254 .hidden __muldf3
080030e0 g     F .text	00000022 __sread
080022f0 g     F .text	0000003c uart_dma_init
08001c08 g     F .text	00000060 mm_init
08003bd8 g     F .text	0000000c __malloc_lock
08002b6c  w    F .text	00000002 PVD_PVM_IRQHandler
0800384c g     F .text	00000078 _fflush_r
08001bb4 g     F .text	00000018 mem_heapsize
08001d20 g     F .text	00000030 mm_free
08002b6c  w    F .text	00000002 SPI2_IRQHandler
080059bc g     O .rodata	00000020 __sf_fake_stdin
08003ab0 g     F .text	00000002 __retarget_lock_acquire_recursive
08002c40 g     F .text	00000010 memset
08002788 g     F .text	00000040 MemManage_Handler
08000ad8 g     F .text	00000248 main
08003aae g     F .text	00000002 __retarget_lock_init_recursive
08002b6c  w    F .text	00000002 CAN1_TX_IRQHandler
0800232c g     F .text	00000016 SVC_Handler
08003162 g     F .text	00000008 __sclose
08002b6c  w    F .text	00000002 DMA2_Channel5_IRQHandler
080028e0 g     F .text	0000001c mcu_init
08002532 g     F .text	0000000e sys_malloc
08004b1c g     F .text	00000004 _strtol_r
08002c90 g     F .text	000000e8 _malloc_r
0800058c g     F .text	0000005a .hidden __aeabi_l2d
08004c08 g     F .text	00000074 __submore
08002b6c  w    F .text	00000002 DMA1_Channel5_IRQHandler
08002b6c  w    F .text	00000002 EXTI4_IRQHandler
08003088 g     F .text	00000058 siscanf
080028fc g     F .text	0000004c SystemInit
08002b6c  w    F .text	00000002 RNG_IRQHandler
08004d7c g     F .text	00000000 _fini
08002b6c  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08003048 g     F .text	00000040 sprintf
08003610 g     F .text	00000024 _write_r
08002828 g     F .text	00000040 led_off
08002b6c  w    F .text	00000002 DMA1_Channel3_IRQHandler
08002b6c  w    F .text	00000002 COMP_IRQHandler
0800433c g     F .text	000000da _printf_common
20000064 g     O .data	00000004 _impure_ptr
08003740 g     F .text	0000010c __sflush_r
08002b6c  w    F .text	00000002 HASH_CRS_IRQHandler
08003d9c g     F .text	000001fc _svfiprintf_r
08002b6c  w    F .text	00000002 WWDG_IRQHandler
0800256c g     F .text	000000cc proc_update
08002b6c  w    F .text	00000002 I2C4_EV_IRQHandler
08002b6c  w    F .text	00000002 LPUART1_IRQHandler
08002b6c  w    F .text	00000002 DMA2_Channel6_IRQHandler
08001e8c g     F .text	00000040 TIM2_IRQHandler
08002868 g     F .text	00000078 led_init
08002638 g     F .text	000000b8 mpu_init
0800404c g     F .text	000002f0 __ssvfiscanf_r
08002b6c  w    F .text	00000002 DMA2D_IRQHandler
08003ad8 g     F .text	0000004c __swhatbuf_r
200a0000 g       .isr_vector	00000000 _estack
08002b6c  w    F .text	00000002 EXTI1_IRQHandler
08004d5c g     F .text	00000010 _write
200000c8 g       .data	00000000 _edata
08002b6c  w    F .text	00000002 AES_IRQHandler
08001b9c g     F .text	0000000c mem_heap_lo
08002b6c  w    F .text	00000002 USART2_IRQHandler
08003106 g     F .text	00000038 __swrite
08002b6c  w    F .text	00000002 DFSDM1_FLT0_IRQHandler
08002bb8 g     F .text	00000024 fiprintf
08002dcc g     F .text	0000025c _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
08003a70 g     F .text	0000003e _fwalk_reent
08000a0c g     F .text	0000004e .hidden __aeabi_d2iz
08004d10 g     F .text	00000010 _kill
0800255c g     F .text	00000006 sys_mm_finish
08002b6c  w    F .text	00000002 I2C2_ER_IRQHandler
08002288 g     F .text	0000002c DMA1_Channel2_IRQHandler
08003950 g     F .text	0000000c __sfp_lock_release
080059dc g     O .rodata	00000020 __sf_fake_stdout
08003048 g     F .text	00000040 siprintf
0800491c g     F .text	00000072 __sccl
08002b6c  w    F .text	00000002 TIM8_BRK_IRQHandler
08005a39 g     O .rodata	00000101 _ctype_
08004d30 g     F .text	00000010 _read
08002b6c  w    F .text	00000002 CAN1_SCE_IRQHandler
08002b6c  w    F .text	00000002 FLASH_IRQHandler
08004d6c g     F .text	00000002 _exit
08002b6c  w    F .text	00000002 BusFault_Handler
08002b6c  w    F .text	00000002 USART1_IRQHandler
08003b24 g     F .text	00000080 __smakebuf_r
080001c0 g     F .text	00000010 strlen
08002b6c  w    F .text	00000002 OTG_FS_IRQHandler
08004418 g     F .text	00000244 _printf_i
08002b6c  w    F .text	00000002 SPI3_IRQHandler
20000d0c g     O .bss	00000004 __malloc_sbrk_start
08002b6c  w    F .text	00000002 I2C1_ER_IRQHandler
08002b6c  w    F .text	00000002 FMC_IRQHandler
08000538 g     F .text	00000042 .hidden __aeabi_f2d
20000d08 g     O .bss	00000004 __malloc_free_list
08002b6c  w    F .text	00000002 LPTIM1_IRQHandler
08000278 g     F .text	0000027a .hidden __subdf3
08002dcc g     F .text	0000025c _vfprintf_r
08002b6c  w    F .text	00000002 I2C4_ER_IRQHandler
08002b6c  w    F .text	00000002 SAI1_IRQHandler
20000d11 g     O .bss	00000001 __lock___sfp_recursive_mutex
08004cd0 g     F .text	00000010 _close
080049e0 g     F .text	00000010 raise
0800395c g     F .text	0000000c __sinit_lock_acquire
08002b6c  w    F .text	00000002 DMA2_Channel3_IRQHandler
08002b6c  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

080001c0 <strlen>:
 80001c0:	4603      	mov	r3, r0
 80001c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001c6:	2a00      	cmp	r2, #0
 80001c8:	d1fb      	bne.n	80001c2 <strlen+0x2>
 80001ca:	1a18      	subs	r0, r3, r0
 80001cc:	3801      	subs	r0, #1
 80001ce:	4770      	bx	lr

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__do_global_dtors_aux>:
 8000a5c:	b510      	push	{r4, lr}
 8000a5e:	4c05      	ldr	r4, [pc, #20]	; (8000a74 <__do_global_dtors_aux+0x18>)
 8000a60:	7823      	ldrb	r3, [r4, #0]
 8000a62:	b933      	cbnz	r3, 8000a72 <__do_global_dtors_aux+0x16>
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__do_global_dtors_aux+0x1c>)
 8000a66:	b113      	cbz	r3, 8000a6e <__do_global_dtors_aux+0x12>
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <__do_global_dtors_aux+0x20>)
 8000a6a:	f3af 8000 	nop.w
 8000a6e:	2301      	movs	r3, #1
 8000a70:	7023      	strb	r3, [r4, #0]
 8000a72:	bd10      	pop	{r4, pc}
 8000a74:	200000c8 	.word	0x200000c8
 8000a78:	00000000 	.word	0x00000000
 8000a7c:	08004d70 	.word	0x08004d70

08000a80 <frame_dummy>:
 8000a80:	b508      	push	{r3, lr}
 8000a82:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <frame_dummy+0x10>)
 8000a84:	b11b      	cbz	r3, 8000a8e <frame_dummy+0xe>
 8000a86:	4903      	ldr	r1, [pc, #12]	; (8000a94 <frame_dummy+0x14>)
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <frame_dummy+0x18>)
 8000a8a:	f3af 8000 	nop.w
 8000a8e:	bd08      	pop	{r3, pc}
 8000a90:	00000000 	.word	0x00000000
 8000a94:	200000cc 	.word	0x200000cc
 8000a98:	08004d70 	.word	0x08004d70

08000a9c <stack_test>:

// Test file string
static char tracestr[] = TESTSTRING;

// Test for stack overflow
static void stack_test(void) {
 8000a9c:	b500      	push	{lr}
 8000a9e:	b0a1      	sub	sp, #132	; 0x84
	char buffer_array[KB/8] = {0};
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	ab01      	add	r3, sp, #4
 8000aa6:	227c      	movs	r2, #124	; 0x7c
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 f8c8 	bl	8002c40 <memset>
	stack_test();
 8000ab0:	f7ff fff4 	bl	8000a9c <stack_test>
}
 8000ab4:	bf00      	nop
 8000ab6:	b021      	add	sp, #132	; 0x84
 8000ab8:	f85d fb04 	ldr.w	pc, [sp], #4

08000abc <heap_test>:

// Test for stack overflow
static void heap_test(void) {
 8000abc:	b508      	push	{r3, lr}
	while(1) {
		if(!sys_malloc(10*KB)){
 8000abe:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8000ac2:	f001 fd36 	bl	8002532 <sys_malloc>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1f8      	bne.n	8000abe <heap_test+0x2>
			sys_mm_finish();
 8000acc:	f001 fd46 	bl	800255c <sys_mm_finish>
			loop();
 8000ad0:	f001 fa82 	bl	8001fd8 <loop>
		if(!sys_malloc(10*KB)){
 8000ad4:	e7f3      	b.n	8000abe <heap_test+0x2>
	...

08000ad8 <main>:

/**************
 * Main routine
 **************/
int main(void)
{
 8000ad8:	b500      	push	{lr}
 8000ada:	b0a3      	sub	sp, #140	; 0x8c
    int i=0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	9320      	str	r3, [sp, #128]	; 0x80
    int num_tracefiles = 0;    /* the number of traces in that array */
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	931f      	str	r3, [sp, #124]	; 0x7c
    trace_t *trace = NULL;     /* stores a single trace file in memory */
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	931e      	str	r3, [sp, #120]	; 0x78
    range_t *ranges = NULL;    /* keeps track of block extents for one trace */
 8000ae8:	2300      	movs	r3, #0
 8000aea:	9308      	str	r3, [sp, #32]
    //speed_t speed_params;      /* input parameters to the xx_speed routines */ 
	
	// Test start and end time
	size_t start_time, end_time;

    int autograder = 0;  /* If set, emit summary info for autograder (-g) */
 8000aec:	2300      	movs	r3, #0
 8000aee:	931d      	str	r3, [sp, #116]	; 0x74
	int p1_int;
	int p2_int;
	int perfindex_int;

    /* Initialize the simulated memory system in memlib.c */
	sys_mm_init();
 8000af0:	f001 fd1c 	bl	800252c <sys_mm_init>
	start_time = sys_get_time();
 8000af4:	f001 fd35 	bl	8002562 <sys_get_time>
 8000af8:	901c      	str	r0, [sp, #112]	; 0x70

    /* Evaluate student's mm malloc package using the K-best scheme */
	trace = read_trace();
 8000afa:	f000 fa07 	bl	8000f0c <read_trace>
 8000afe:	901e      	str	r0, [sp, #120]	; 0x78
	mm_stats.ops = trace->num_ops;
 8000b00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fd05 	bl	8000514 <__aeabi_i2d>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	e9cd 2300 	strd	r2, r3, [sp]
	if (verbose > 1) {
 8000b12:	4b75      	ldr	r3, [pc, #468]	; (8000ce8 <main+0x210>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	dd06      	ble.n	8000b28 <main+0x50>
	    sprintf(msg, "Checking sys_malloc for correctness, ");
 8000b1a:	4974      	ldr	r1, [pc, #464]	; (8000cec <main+0x214>)
 8000b1c:	4874      	ldr	r0, [pc, #464]	; (8000cf0 <main+0x218>)
 8000b1e:	f002 fa93 	bl	8003048 <siprintf>
		var_print(msg);
 8000b22:	4873      	ldr	r0, [pc, #460]	; (8000cf0 <main+0x218>)
 8000b24:	f001 fa5e 	bl	8001fe4 <var_print>
	}
	mm_stats.valid = eval_mm_valid(trace, i, &ranges);
 8000b28:	ab08      	add	r3, sp, #32
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8000b2e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000b30:	f000 fc3c 	bl	80013ac <eval_mm_valid>
 8000b34:	4603      	mov	r3, r0
 8000b36:	9302      	str	r3, [sp, #8]
	if (mm_stats.valid) {
 8000b38:	9b02      	ldr	r3, [sp, #8]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d035      	beq.n	8000baa <main+0xd2>
	    if (verbose > 1) {
 8000b3e:	4b6a      	ldr	r3, [pc, #424]	; (8000ce8 <main+0x210>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	dd06      	ble.n	8000b54 <main+0x7c>
			sprintf(msg, "efficiency, ");
 8000b46:	496b      	ldr	r1, [pc, #428]	; (8000cf4 <main+0x21c>)
 8000b48:	4869      	ldr	r0, [pc, #420]	; (8000cf0 <main+0x218>)
 8000b4a:	f002 fa7d 	bl	8003048 <siprintf>
			var_print(msg);
 8000b4e:	4868      	ldr	r0, [pc, #416]	; (8000cf0 <main+0x218>)
 8000b50:	f001 fa48 	bl	8001fe4 <var_print>
		}
	    mm_stats.util = eval_mm_util(trace, i, &ranges);
 8000b54:	ab08      	add	r3, sp, #32
 8000b56:	461a      	mov	r2, r3
 8000b58:	9920      	ldr	r1, [sp, #128]	; 0x80
 8000b5a:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000b5c:	f000 fd2e 	bl	80015bc <eval_mm_util>
 8000b60:	4602      	mov	r2, r0
 8000b62:	460b      	mov	r3, r1
 8000b64:	e9cd 2306 	strd	r2, r3, [sp, #24]
	    if (verbose > 1) {
 8000b68:	4b5f      	ldr	r3, [pc, #380]	; (8000ce8 <main+0x210>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	dd06      	ble.n	8000b7e <main+0xa6>
			sprintf(msg, "and performance.\n");
 8000b70:	4961      	ldr	r1, [pc, #388]	; (8000cf8 <main+0x220>)
 8000b72:	485f      	ldr	r0, [pc, #380]	; (8000cf0 <main+0x218>)
 8000b74:	f002 fa68 	bl	8003048 <siprintf>
			var_print(msg);
 8000b78:	485d      	ldr	r0, [pc, #372]	; (8000cf0 <main+0x218>)
 8000b7a:	f001 fa33 	bl	8001fe4 <var_print>
		}
		end_time = sys_get_time();
 8000b7e:	f001 fcf0 	bl	8002562 <sys_get_time>
 8000b82:	901b      	str	r0, [sp, #108]	; 0x6c
		mm_stats.secs = (end_time-start_time)/1000.0f;
 8000b84:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000b86:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	ee07 3a90 	vmov	s15, r3
 8000b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b92:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8000cfc <main+0x224>
 8000b96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b9a:	ee16 0a90 	vmov	r0, s13
 8000b9e:	f7ff fccb 	bl	8000538 <__aeabi_f2d>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	e9cd 2304 	strd	r2, r3, [sp, #16]
	}
	free_trace(trace);
 8000baa:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000bac:	f000 fbe4 	bl	8001378 <free_trace>

    /* Display the mm results in a compact table */
    if (verbose) {
 8000bb0:	4b4d      	ldr	r3, [pc, #308]	; (8000ce8 <main+0x210>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d012      	beq.n	8000bde <main+0x106>
		sprintf(msg, "\nResults for mm malloc:\n");
 8000bb8:	4951      	ldr	r1, [pc, #324]	; (8000d00 <main+0x228>)
 8000bba:	484d      	ldr	r0, [pc, #308]	; (8000cf0 <main+0x218>)
 8000bbc:	f002 fa44 	bl	8003048 <siprintf>
		var_print(msg);
 8000bc0:	484b      	ldr	r0, [pc, #300]	; (8000cf0 <main+0x218>)
 8000bc2:	f001 fa0f 	bl	8001fe4 <var_print>
		printresults(num_tracefiles, &mm_stats);
 8000bc6:	466b      	mov	r3, sp
 8000bc8:	4619      	mov	r1, r3
 8000bca:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8000bcc:	f000 fde8 	bl	80017a0 <printresults>
		sprintf(msg, "\n");
 8000bd0:	494c      	ldr	r1, [pc, #304]	; (8000d04 <main+0x22c>)
 8000bd2:	4847      	ldr	r0, [pc, #284]	; (8000cf0 <main+0x218>)
 8000bd4:	f002 fa38 	bl	8003048 <siprintf>
		var_print(msg);
 8000bd8:	4845      	ldr	r0, [pc, #276]	; (8000cf0 <main+0x218>)
 8000bda:	f001 fa03 	bl	8001fe4 <var_print>
    }

    /* 
     * Accumulate the aggregate statistics for the student's mm package 
     */
    secs = 0;
 8000bde:	f04f 0200 	mov.w	r2, #0
 8000be2:	f04f 0300 	mov.w	r3, #0
 8000be6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    ops = 0;
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	f04f 0300 	mov.w	r3, #0
 8000bf2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    util = 0;
 8000bf6:	f04f 0200 	mov.w	r2, #0
 8000bfa:	f04f 0300 	mov.w	r3, #0
 8000bfe:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    numcorrect = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	9321      	str	r3, [sp, #132]	; 0x84
	secs = mm_stats.secs;
 8000c06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000c0a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	ops = mm_stats.ops;
 8000c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000c12:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	util = mm_stats.util;
 8000c16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000c1a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	if (mm_stats.valid)
 8000c1e:	9b02      	ldr	r3, [sp, #8]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d002      	beq.n	8000c2a <main+0x152>
	    numcorrect++;
 8000c24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8000c26:	3301      	adds	r3, #1
 8000c28:	9321      	str	r3, [sp, #132]	; 0x84
    avg_mm_util = util;
 8000c2a:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8000c2e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48

    /* 
     * Compute and print the performance index 
     */
    if (errors == 0) {
 8000c32:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <main+0x230>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d130      	bne.n	8000c9c <main+0x1c4>
	avg_mm_throughput = ops/secs;
 8000c3a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8000c3e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8000c42:	f7ff fdfb 	bl	800083c <__aeabi_ddiv>
 8000c46:	4602      	mov	r2, r0
 8000c48:	460b      	mov	r3, r1
 8000c4a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40

	p1 = avg_mm_util;
 8000c4e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8000c52:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	p2 = avg_mm_throughput;
 8000c56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8000c5a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30

	p1_int = p1*100;
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <main+0x234>)
 8000c64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8000c68:	f7ff fcbe 	bl	80005e8 <__aeabi_dmul>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	4610      	mov	r0, r2
 8000c72:	4619      	mov	r1, r3
 8000c74:	f7ff feca 	bl	8000a0c <__aeabi_d2iz>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	930b      	str	r3, [sp, #44]	; 0x2c
	p2_int = (int)p2;
 8000c7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000c80:	f7ff fec4 	bl	8000a0c <__aeabi_d2iz>
 8000c84:	4603      	mov	r3, r0
 8000c86:	930a      	str	r3, [sp, #40]	; 0x28

	sprintf(msg, "Utilization: %d%%. Throughput: %d\n",
 8000c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000c8c:	4920      	ldr	r1, [pc, #128]	; (8000d10 <main+0x238>)
 8000c8e:	4818      	ldr	r0, [pc, #96]	; (8000cf0 <main+0x218>)
 8000c90:	f002 f9da 	bl	8003048 <siprintf>
	       p1_int, 
	       p2_int);
	
	var_print(msg);
 8000c94:	4816      	ldr	r0, [pc, #88]	; (8000cf0 <main+0x218>)
 8000c96:	f001 f9a5 	bl	8001fe4 <var_print>
 8000c9a:	e009      	b.n	8000cb0 <main+0x1d8>
    }
    else { /* There were errors */
	sprintf(msg, "Terminated with %d errors\n", errors);
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <main+0x230>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	491c      	ldr	r1, [pc, #112]	; (8000d14 <main+0x23c>)
 8000ca4:	4812      	ldr	r0, [pc, #72]	; (8000cf0 <main+0x218>)
 8000ca6:	f002 f9cf 	bl	8003048 <siprintf>
	var_print(msg);
 8000caa:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <main+0x218>)
 8000cac:	f001 f99a 	bl	8001fe4 <var_print>
    }

    if (autograder) {
 8000cb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00f      	beq.n	8000cd6 <main+0x1fe>
	sprintf(msg, "correct:%d\n", numcorrect);
 8000cb6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8000cb8:	4917      	ldr	r1, [pc, #92]	; (8000d18 <main+0x240>)
 8000cba:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <main+0x218>)
 8000cbc:	f002 f9c4 	bl	8003048 <siprintf>
	var_print(msg);
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <main+0x218>)
 8000cc2:	f001 f98f 	bl	8001fe4 <var_print>
	sprintf(msg, "perfidx:%d\n", perfindex_int);
 8000cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cc8:	4914      	ldr	r1, [pc, #80]	; (8000d1c <main+0x244>)
 8000cca:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <main+0x218>)
 8000ccc:	f002 f9bc 	bl	8003048 <siprintf>
	var_print(msg);
 8000cd0:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <main+0x218>)
 8000cd2:	f001 f987 	bl	8001fe4 <var_print>
    }

	sys_mm_finish();
 8000cd6:	f001 fc41 	bl	800255c <sys_mm_finish>

	loop();
 8000cda:	f001 f97d 	bl	8001fd8 <loop>
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	b023      	add	sp, #140	; 0x8c
 8000ce4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ce8:	200000e4 	.word	0x200000e4
 8000cec:	08004d88 	.word	0x08004d88
 8000cf0:	200000f0 	.word	0x200000f0
 8000cf4:	08004db0 	.word	0x08004db0
 8000cf8:	08004dc0 	.word	0x08004dc0
 8000cfc:	447a0000 	.word	0x447a0000
 8000d00:	08004dd4 	.word	0x08004dd4
 8000d04:	08004df0 	.word	0x08004df0
 8000d08:	200000e8 	.word	0x200000e8
 8000d0c:	40590000 	.word	0x40590000
 8000d10:	08004df4 	.word	0x08004df4
 8000d14:	08004e18 	.word	0x08004e18
 8000d18:	08004e34 	.word	0x08004e34
 8000d1c:	08004e40 	.word	0x08004e40

08000d20 <add_range>:
 *     size bytes at addr lo. After checking the block for correctness,
 *     we create a range struct for this block and add it to the range list. 
 */
static int add_range(range_t **ranges, char *lo, int size, 
		     int tracenum, int opnum)
{
 8000d20:	b510      	push	{r4, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	9005      	str	r0, [sp, #20]
 8000d26:	9104      	str	r1, [sp, #16]
 8000d28:	9203      	str	r2, [sp, #12]
 8000d2a:	9302      	str	r3, [sp, #8]
    char *hi = lo + size - 1;
 8000d2c:	9b03      	ldr	r3, [sp, #12]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	9a04      	ldr	r2, [sp, #16]
 8000d32:	4413      	add	r3, r2
 8000d34:	9306      	str	r3, [sp, #24]
    range_t *p;

    assert(size > 0);
 8000d36:	9b03      	ldr	r3, [sp, #12]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	dc06      	bgt.n	8000d4a <add_range+0x2a>
 8000d3c:	4b4b      	ldr	r3, [pc, #300]	; (8000e6c <add_range+0x14c>)
 8000d3e:	4a4c      	ldr	r2, [pc, #304]	; (8000e70 <add_range+0x150>)
 8000d40:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8000d44:	484b      	ldr	r0, [pc, #300]	; (8000e74 <add_range+0x154>)
 8000d46:	f001 ff13 	bl	8002b70 <__assert_func>

    /* Payload addresses must be ALIGNMENT-byte aligned */
    if (!IS_ALIGNED(lo)) {
 8000d4a:	9b04      	ldr	r3, [sp, #16]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d00c      	beq.n	8000d6e <add_range+0x4e>
	sprintf(msg, "Payload address (%p) not aligned to %d bytes", 
 8000d54:	2304      	movs	r3, #4
 8000d56:	9a04      	ldr	r2, [sp, #16]
 8000d58:	4947      	ldr	r1, [pc, #284]	; (8000e78 <add_range+0x158>)
 8000d5a:	4848      	ldr	r0, [pc, #288]	; (8000e7c <add_range+0x15c>)
 8000d5c:	f002 f974 	bl	8003048 <siprintf>
		lo, ALIGNMENT);
        malloc_error(tracenum, opnum, msg);
 8000d60:	4a46      	ldr	r2, [pc, #280]	; (8000e7c <add_range+0x15c>)
 8000d62:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000d64:	9802      	ldr	r0, [sp, #8]
 8000d66:	f000 fe83 	bl	8001a70 <malloc_error>
        return 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e07b      	b.n	8000e66 <add_range+0x146>
    }

    /* The payload must lie within the extent of the heap */
    if ((lo < (char *)mem_heap_lo()) || (lo > (char *)mem_heap_hi()) || 
 8000d6e:	f000 ff15 	bl	8001b9c <mem_heap_lo>
 8000d72:	4602      	mov	r2, r0
 8000d74:	9b04      	ldr	r3, [sp, #16]
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d311      	bcc.n	8000d9e <add_range+0x7e>
 8000d7a:	f000 ff15 	bl	8001ba8 <mem_heap_hi>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	9b04      	ldr	r3, [sp, #16]
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d80b      	bhi.n	8000d9e <add_range+0x7e>
	(hi < (char *)mem_heap_lo()) || (hi > (char *)mem_heap_hi())) {
 8000d86:	f000 ff09 	bl	8001b9c <mem_heap_lo>
 8000d8a:	4602      	mov	r2, r0
    if ((lo < (char *)mem_heap_lo()) || (lo > (char *)mem_heap_hi()) || 
 8000d8c:	9b06      	ldr	r3, [sp, #24]
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d305      	bcc.n	8000d9e <add_range+0x7e>
	(hi < (char *)mem_heap_lo()) || (hi > (char *)mem_heap_hi())) {
 8000d92:	f000 ff09 	bl	8001ba8 <mem_heap_hi>
 8000d96:	4602      	mov	r2, r0
 8000d98:	9b06      	ldr	r3, [sp, #24]
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d914      	bls.n	8000dc8 <add_range+0xa8>
	sprintf(msg, "Payload (%p:%p) lies outside heap (%p:%p)",
 8000d9e:	f000 fefd 	bl	8001b9c <mem_heap_lo>
 8000da2:	4604      	mov	r4, r0
 8000da4:	f000 ff00 	bl	8001ba8 <mem_heap_hi>
 8000da8:	4603      	mov	r3, r0
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	9400      	str	r4, [sp, #0]
 8000dae:	9b06      	ldr	r3, [sp, #24]
 8000db0:	9a04      	ldr	r2, [sp, #16]
 8000db2:	4933      	ldr	r1, [pc, #204]	; (8000e80 <add_range+0x160>)
 8000db4:	4831      	ldr	r0, [pc, #196]	; (8000e7c <add_range+0x15c>)
 8000db6:	f002 f947 	bl	8003048 <siprintf>
		lo, hi, mem_heap_lo(), mem_heap_hi());
	malloc_error(tracenum, opnum, msg);
 8000dba:	4a30      	ldr	r2, [pc, #192]	; (8000e7c <add_range+0x15c>)
 8000dbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000dbe:	9802      	ldr	r0, [sp, #8]
 8000dc0:	f000 fe56 	bl	8001a70 <malloc_error>
        return 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e04e      	b.n	8000e66 <add_range+0x146>
    }

    /* The payload must not overlap any other payloads */
    for (p = *ranges;  p != NULL;  p = p->next) {
 8000dc8:	9b05      	ldr	r3, [sp, #20]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	9307      	str	r3, [sp, #28]
 8000dce:	e029      	b.n	8000e24 <add_range+0x104>
        if ((lo >= p->lo && lo <= p-> hi) ||
 8000dd0:	9b07      	ldr	r3, [sp, #28]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	9a04      	ldr	r2, [sp, #16]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d304      	bcc.n	8000de4 <add_range+0xc4>
 8000dda:	9b07      	ldr	r3, [sp, #28]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	9a04      	ldr	r2, [sp, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d909      	bls.n	8000df8 <add_range+0xd8>
            (hi >= p->lo && hi <= p->hi)) {
 8000de4:	9b07      	ldr	r3, [sp, #28]
 8000de6:	681b      	ldr	r3, [r3, #0]
        if ((lo >= p->lo && lo <= p-> hi) ||
 8000de8:	9a06      	ldr	r2, [sp, #24]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d317      	bcc.n	8000e1e <add_range+0xfe>
            (hi >= p->lo && hi <= p->hi)) {
 8000dee:	9b07      	ldr	r3, [sp, #28]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	9a06      	ldr	r2, [sp, #24]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d812      	bhi.n	8000e1e <add_range+0xfe>
	    sprintf(msg, "Payload (%p:%p) overlaps another payload (%p:%p)\n",
 8000df8:	9b07      	ldr	r3, [sp, #28]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	9a07      	ldr	r2, [sp, #28]
 8000dfe:	6852      	ldr	r2, [r2, #4]
 8000e00:	9201      	str	r2, [sp, #4]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	9b06      	ldr	r3, [sp, #24]
 8000e06:	9a04      	ldr	r2, [sp, #16]
 8000e08:	491e      	ldr	r1, [pc, #120]	; (8000e84 <add_range+0x164>)
 8000e0a:	481c      	ldr	r0, [pc, #112]	; (8000e7c <add_range+0x15c>)
 8000e0c:	f002 f91c 	bl	8003048 <siprintf>
		    lo, hi, p->lo, p->hi);
	    malloc_error(tracenum, opnum, msg);
 8000e10:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <add_range+0x15c>)
 8000e12:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000e14:	9802      	ldr	r0, [sp, #8]
 8000e16:	f000 fe2b 	bl	8001a70 <malloc_error>
	    return 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e023      	b.n	8000e66 <add_range+0x146>
    for (p = *ranges;  p != NULL;  p = p->next) {
 8000e1e:	9b07      	ldr	r3, [sp, #28]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	9307      	str	r3, [sp, #28]
 8000e24:	9b07      	ldr	r3, [sp, #28]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1d2      	bne.n	8000dd0 <add_range+0xb0>

    /* 
     * Everything looks OK, so remember the extent of this block 
     * by creating a range struct and adding it the range list.
     */
    if ((p = (range_t *)sys_malloc(sizeof(range_t))) == NULL)
 8000e2a:	200c      	movs	r0, #12
 8000e2c:	f001 fb81 	bl	8002532 <sys_malloc>
 8000e30:	9007      	str	r0, [sp, #28]
 8000e32:	9b07      	ldr	r3, [sp, #28]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <add_range+0x11e>
		unix_error("malloc error in add_range");
 8000e38:	4813      	ldr	r0, [pc, #76]	; (8000e88 <add_range+0x168>)
 8000e3a:	f000 fdfb 	bl	8001a34 <unix_error>
	test_mem_use += sizeof(range_t);
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <add_range+0x16c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	330c      	adds	r3, #12
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <add_range+0x16c>)
 8000e48:	601a      	str	r2, [r3, #0]
    p->next = *ranges;
 8000e4a:	9b05      	ldr	r3, [sp, #20]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	9b07      	ldr	r3, [sp, #28]
 8000e50:	609a      	str	r2, [r3, #8]
    p->lo = lo;
 8000e52:	9b07      	ldr	r3, [sp, #28]
 8000e54:	9a04      	ldr	r2, [sp, #16]
 8000e56:	601a      	str	r2, [r3, #0]
    p->hi = hi;
 8000e58:	9b07      	ldr	r3, [sp, #28]
 8000e5a:	9a06      	ldr	r2, [sp, #24]
 8000e5c:	605a      	str	r2, [r3, #4]
    *ranges = p;
 8000e5e:	9b05      	ldr	r3, [sp, #20]
 8000e60:	9a07      	ldr	r2, [sp, #28]
 8000e62:	601a      	str	r2, [r3, #0]
    return 1;
 8000e64:	2301      	movs	r3, #1
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	b008      	add	sp, #32
 8000e6a:	bd10      	pop	{r4, pc}
 8000e6c:	08004e4c 	.word	0x08004e4c
 8000e70:	080052a8 	.word	0x080052a8
 8000e74:	08004e58 	.word	0x08004e58
 8000e78:	08004e70 	.word	0x08004e70
 8000e7c:	200000f0 	.word	0x200000f0
 8000e80:	08004ea0 	.word	0x08004ea0
 8000e84:	08004ecc 	.word	0x08004ecc
 8000e88:	08004f00 	.word	0x08004f00
 8000e8c:	200000ec 	.word	0x200000ec

08000e90 <remove_range>:

/* 
 * remove_range - Free the range record of block whose payload starts at lo 
 */
static void remove_range(range_t **ranges, char *lo)
{
 8000e90:	b500      	push	{lr}
 8000e92:	b085      	sub	sp, #20
 8000e94:	9001      	str	r0, [sp, #4]
 8000e96:	9100      	str	r1, [sp, #0]
    range_t *p;
    range_t **prevpp = ranges;
 8000e98:	9b01      	ldr	r3, [sp, #4]
 8000e9a:	9302      	str	r3, [sp, #8]

    for (p = *ranges;  p != NULL; p = p->next) {
 8000e9c:	9b01      	ldr	r3, [sp, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	9303      	str	r3, [sp, #12]
 8000ea2:	e012      	b.n	8000eca <remove_range+0x3a>
        if (p->lo == lo) {
 8000ea4:	9b03      	ldr	r3, [sp, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	9a00      	ldr	r2, [sp, #0]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d107      	bne.n	8000ebe <remove_range+0x2e>
	    *prevpp = p->next;
 8000eae:	9b03      	ldr	r3, [sp, #12]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	9b02      	ldr	r3, [sp, #8]
 8000eb4:	601a      	str	r2, [r3, #0]
            sys_free(p);
 8000eb6:	9803      	ldr	r0, [sp, #12]
 8000eb8:	f001 fb42 	bl	8002540 <sys_free>
            break;
 8000ebc:	e009      	b.n	8000ed2 <remove_range+0x42>
        }
        prevpp = &(p->next);
 8000ebe:	9b03      	ldr	r3, [sp, #12]
 8000ec0:	3308      	adds	r3, #8
 8000ec2:	9302      	str	r3, [sp, #8]
    for (p = *ranges;  p != NULL; p = p->next) {
 8000ec4:	9b03      	ldr	r3, [sp, #12]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	9303      	str	r3, [sp, #12]
 8000eca:	9b03      	ldr	r3, [sp, #12]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1e9      	bne.n	8000ea4 <remove_range+0x14>
    }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	b005      	add	sp, #20
 8000ed6:	f85d fb04 	ldr.w	pc, [sp], #4

08000eda <clear_ranges>:

/*
 * clear_ranges - free all of the range records for a trace 
 */
static void clear_ranges(range_t **ranges)
{
 8000eda:	b500      	push	{lr}
 8000edc:	b085      	sub	sp, #20
 8000ede:	9001      	str	r0, [sp, #4]
    range_t *p;
    range_t *pnext;

    for (p = *ranges;  p != NULL;  p = pnext) {
 8000ee0:	9b01      	ldr	r3, [sp, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	9303      	str	r3, [sp, #12]
 8000ee6:	e007      	b.n	8000ef8 <clear_ranges+0x1e>
        pnext = p->next;
 8000ee8:	9b03      	ldr	r3, [sp, #12]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	9302      	str	r3, [sp, #8]
        sys_free(p);
 8000eee:	9803      	ldr	r0, [sp, #12]
 8000ef0:	f001 fb26 	bl	8002540 <sys_free>
    for (p = *ranges;  p != NULL;  p = pnext) {
 8000ef4:	9b02      	ldr	r3, [sp, #8]
 8000ef6:	9303      	str	r3, [sp, #12]
 8000ef8:	9b03      	ldr	r3, [sp, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f4      	bne.n	8000ee8 <clear_ranges+0xe>
    }
    *ranges = NULL;
 8000efe:	9b01      	ldr	r3, [sp, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
}
 8000f04:	bf00      	nop
 8000f06:	b005      	add	sp, #20
 8000f08:	f85d fb04 	ldr.w	pc, [sp], #4

08000f0c <read_trace>:

/*
 * read_trace - read a trace file and store it in memory
 */
static trace_t *read_trace()
{
 8000f0c:	b500      	push	{lr}
 8000f0e:	f6ad 0d2c 	subw	sp, sp, #2092	; 0x82c
    trace_t *trace;
    char type[MAXLINE];
    char path[MAXLINE];
    unsigned index, size;
    unsigned max_index = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
    unsigned op_index;
	char * scanptr = tracestr;
 8000f18:	4bac      	ldr	r3, [pc, #688]	; (80011cc <read_trace+0x2c0>)
 8000f1a:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
	int bytes_scanned = 0;
 8000f1e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f22:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]

    /* Allocate the trace record */
    if ((trace = (trace_t *) sys_malloc(sizeof(trace_t))) == NULL)
 8000f2a:	201c      	movs	r0, #28
 8000f2c:	f001 fb01 	bl	8002532 <sys_malloc>
 8000f30:	f8cd 0818 	str.w	r0, [sp, #2072]	; 0x818
 8000f34:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <read_trace+0x36>
		unix_error("malloc 1 failed in read_trance");
 8000f3c:	48a4      	ldr	r0, [pc, #656]	; (80011d0 <read_trace+0x2c4>)
 8000f3e:	f000 fd79 	bl	8001a34 <unix_error>
	test_mem_use += sizeof(trace_t);
 8000f42:	4ba4      	ldr	r3, [pc, #656]	; (80011d4 <read_trace+0x2c8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	331c      	adds	r3, #28
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4ba2      	ldr	r3, [pc, #648]	; (80011d4 <read_trace+0x2c8>)
 8000f4c:	601a      	str	r2, [r3, #0]
    /* Read the trace file header */
    //if ((tracefile = fmemopen(tracestr, strlen(tracestr), "r")) == NULL) {
	//sprintf(msg, "Could not open %s in read_trace", path);
	//unix_error(msg);
    //}
    sscanf(scanptr, "%d%n", &(trace->sugg_heapsize), &bytes_scanned); /* not used */
 8000f4e:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
 8000f52:	ab03      	add	r3, sp, #12
 8000f54:	49a0      	ldr	r1, [pc, #640]	; (80011d8 <read_trace+0x2cc>)
 8000f56:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000f5a:	f002 f895 	bl	8003088 <siscanf>
	scanptr += bytes_scanned;
 8000f5e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f62:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000f6e:	4413      	add	r3, r2
 8000f70:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->num_ids), &bytes_scanned);     
 8000f74:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f78:	1d1a      	adds	r2, r3, #4
 8000f7a:	ab03      	add	r3, sp, #12
 8000f7c:	4996      	ldr	r1, [pc, #600]	; (80011d8 <read_trace+0x2cc>)
 8000f7e:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000f82:	f002 f881 	bl	8003088 <siscanf>
	scanptr += bytes_scanned;
 8000f86:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f8a:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000f96:	4413      	add	r3, r2
 8000f98:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->num_ops), &bytes_scanned);     
 8000f9c:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000fa0:	f103 0208 	add.w	r2, r3, #8
 8000fa4:	ab03      	add	r3, sp, #12
 8000fa6:	498c      	ldr	r1, [pc, #560]	; (80011d8 <read_trace+0x2cc>)
 8000fa8:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000fac:	f002 f86c 	bl	8003088 <siscanf>
	scanptr += bytes_scanned;
 8000fb0:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000fb4:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->weight), &bytes_scanned);        /* not used */
 8000fc6:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000fca:	f103 020c 	add.w	r2, r3, #12
 8000fce:	ab03      	add	r3, sp, #12
 8000fd0:	4981      	ldr	r1, [pc, #516]	; (80011d8 <read_trace+0x2cc>)
 8000fd2:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000fd6:	f002 f857 	bl	8003088 <siscanf>
	scanptr += bytes_scanned;
 8000fda:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000fde:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000fea:	4413      	add	r3, r2
 8000fec:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    
    /* We'll store each request line in the trace in this array */
    if ((trace->ops = 
	 (traceop_t *)sys_malloc(trace->num_ops * sizeof(traceop_t))) == NULL)
 8000ff0:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4618      	mov	r0, r3
 8001002:	f001 fa96 	bl	8002532 <sys_malloc>
 8001006:	4602      	mov	r2, r0
    if ((trace->ops = 
 8001008:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800100c:	611a      	str	r2, [r3, #16]
 800100e:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d102      	bne.n	800101e <read_trace+0x112>
		unix_error("malloc 2 failed in read_trace");
 8001018:	4870      	ldr	r0, [pc, #448]	; (80011dc <read_trace+0x2d0>)
 800101a:	f000 fd0b 	bl	8001a34 <unix_error>
	test_mem_use += sizeof(traceop_t);
 800101e:	4b6d      	ldr	r3, [pc, #436]	; (80011d4 <read_trace+0x2c8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	330c      	adds	r3, #12
 8001024:	461a      	mov	r2, r3
 8001026:	4b6b      	ldr	r3, [pc, #428]	; (80011d4 <read_trace+0x2c8>)
 8001028:	601a      	str	r2, [r3, #0]

    /* We'll keep an array of pointers to the allocated blocks here... */
    if ((trace->blocks = 
	 (char **)sys_malloc(trace->num_ids * sizeof(char *))) == NULL)
 800102a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4618      	mov	r0, r3
 8001034:	f001 fa7d 	bl	8002532 <sys_malloc>
 8001038:	4602      	mov	r2, r0
    if ((trace->blocks = 
 800103a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <read_trace+0x144>
		unix_error("malloc 3 failed in read_trace");
 800104a:	4865      	ldr	r0, [pc, #404]	; (80011e0 <read_trace+0x2d4>)
 800104c:	f000 fcf2 	bl	8001a34 <unix_error>
	test_mem_use += trace->num_ids * sizeof(char *);
 8001050:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4a5e      	ldr	r2, [pc, #376]	; (80011d4 <read_trace+0x2c8>)
 800105a:	6812      	ldr	r2, [r2, #0]
 800105c:	4413      	add	r3, r2
 800105e:	461a      	mov	r2, r3
 8001060:	4b5c      	ldr	r3, [pc, #368]	; (80011d4 <read_trace+0x2c8>)
 8001062:	601a      	str	r2, [r3, #0]

    /* ... along with the corresponding byte sizes of each block */
    if ((trace->block_sizes = 
	 (size_t *)sys_malloc(trace->num_ids * sizeof(size_t))) == NULL)
 8001064:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fa60 	bl	8002532 <sys_malloc>
 8001072:	4602      	mov	r2, r0
    if ((trace->block_sizes = 
 8001074:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001078:	619a      	str	r2, [r3, #24]
 800107a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d102      	bne.n	800108a <read_trace+0x17e>
		unix_error("malloc 4 failed in read_trace");
 8001084:	4857      	ldr	r0, [pc, #348]	; (80011e4 <read_trace+0x2d8>)
 8001086:	f000 fcd5 	bl	8001a34 <unix_error>
	test_mem_use += trace->num_ids * sizeof(size_t);
 800108a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4a50      	ldr	r2, [pc, #320]	; (80011d4 <read_trace+0x2c8>)
 8001094:	6812      	ldr	r2, [r2, #0]
 8001096:	4413      	add	r3, r2
 8001098:	461a      	mov	r2, r3
 800109a:	4b4e      	ldr	r3, [pc, #312]	; (80011d4 <read_trace+0x2c8>)
 800109c:	601a      	str	r2, [r3, #0]
    
    /* read every request line in the trace file */
    index = 0;
 800109e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80010a2:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
    op_index = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8cd 3820 	str.w	r3, [sp, #2080]	; 0x820
    while (sscanf(scanptr, "%s%n", type, &bytes_scanned) != EOF) {
 80010b0:	e143      	b.n	800133a <read_trace+0x42e>
		scanptr += bytes_scanned;
 80010b2:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80010b6:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 80010c2:	4413      	add	r3, r2
 80010c4:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
		switch(type[0]) {
 80010c8:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80010cc:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	3b61      	subs	r3, #97	; 0x61
 80010d4:	2b12      	cmp	r3, #18
 80010d6:	f200 810f 	bhi.w	80012f8 <read_trace+0x3ec>
 80010da:	a201      	add	r2, pc, #4	; (adr r2, 80010e0 <read_trace+0x1d4>)
 80010dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e0:	0800112d 	.word	0x0800112d
 80010e4:	080012f9 	.word	0x080012f9
 80010e8:	080012f9 	.word	0x080012f9
 80010ec:	080012f9 	.word	0x080012f9
 80010f0:	080012f9 	.word	0x080012f9
 80010f4:	0800128d 	.word	0x0800128d
 80010f8:	080012f9 	.word	0x080012f9
 80010fc:	080012f3 	.word	0x080012f3
 8001100:	080012f9 	.word	0x080012f9
 8001104:	080012f9 	.word	0x080012f9
 8001108:	080012f9 	.word	0x080012f9
 800110c:	080012f9 	.word	0x080012f9
 8001110:	080012f9 	.word	0x080012f9
 8001114:	080012f9 	.word	0x080012f9
 8001118:	080012f9 	.word	0x080012f9
 800111c:	080012f9 	.word	0x080012f9
 8001120:	080012f9 	.word	0x080012f9
 8001124:	080011ed 	.word	0x080011ed
 8001128:	080012ed 	.word	0x080012ed
		case 'a':
			sscanf(scanptr, "%u %u%n", &index, &size, &bytes_scanned);
 800112c:	a904      	add	r1, sp, #16
 800112e:	aa05      	add	r2, sp, #20
 8001130:	ab03      	add	r3, sp, #12
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	460b      	mov	r3, r1
 8001136:	492c      	ldr	r1, [pc, #176]	; (80011e8 <read_trace+0x2dc>)
 8001138:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 800113c:	f001 ffa4 	bl	8003088 <siscanf>
			scanptr += bytes_scanned;
 8001140:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001144:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8001150:	4413      	add	r3, r2
 8001152:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = ALLOC;
 8001156:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800115a:	6919      	ldr	r1, [r3, #16]
 800115c:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 800116e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001172:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800117c:	6919      	ldr	r1, [r3, #16]
 800117e:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	4602      	mov	r2, r0
 800118e:	605a      	str	r2, [r3, #4]
			trace->ops[op_index].size = size;
 8001190:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001194:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800119e:	6919      	ldr	r1, [r3, #16]
 80011a0:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	4602      	mov	r2, r0
 80011b0:	609a      	str	r2, [r3, #8]
			max_index = (index > max_index) ? index : max_index;
 80011b2:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80011b6:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f8dd 2824 	ldr.w	r2, [sp, #2084]	; 0x824
 80011c0:	4293      	cmp	r3, r2
 80011c2:	bf38      	it	cc
 80011c4:	4613      	movcc	r3, r2
 80011c6:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
			break;
 80011ca:	e0b1      	b.n	8001330 <read_trace+0x424>
 80011cc:	20000000 	.word	0x20000000
 80011d0:	08004f1c 	.word	0x08004f1c
 80011d4:	200000ec 	.word	0x200000ec
 80011d8:	08004f3c 	.word	0x08004f3c
 80011dc:	08004f44 	.word	0x08004f44
 80011e0:	08004f64 	.word	0x08004f64
 80011e4:	08004f84 	.word	0x08004f84
 80011e8:	08004fa4 	.word	0x08004fa4
		case 'r':
			sscanf(scanptr, "%u %u%n", &index, &size, &bytes_scanned);
 80011ec:	a904      	add	r1, sp, #16
 80011ee:	aa05      	add	r2, sp, #20
 80011f0:	ab03      	add	r3, sp, #12
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	460b      	mov	r3, r1
 80011f6:	495b      	ldr	r1, [pc, #364]	; (8001364 <read_trace+0x458>)
 80011f8:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 80011fc:	f001 ff44 	bl	8003088 <siscanf>
			scanptr += bytes_scanned;
 8001200:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001204:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8001210:	4413      	add	r3, r2
 8001212:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = REALLOC;
 8001216:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800121a:	6919      	ldr	r1, [r3, #16]
 800121c:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001220:	4613      	mov	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	2202      	movs	r2, #2
 800122c:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 800122e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001232:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800123c:	6919      	ldr	r1, [r3, #16]
 800123e:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	4602      	mov	r2, r0
 800124e:	605a      	str	r2, [r3, #4]
			trace->ops[op_index].size = size;
 8001250:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001254:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800125e:	6919      	ldr	r1, [r3, #16]
 8001260:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	4602      	mov	r2, r0
 8001270:	609a      	str	r2, [r3, #8]
			max_index = (index > max_index) ? index : max_index;
 8001272:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001276:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f8dd 2824 	ldr.w	r2, [sp, #2084]	; 0x824
 8001280:	4293      	cmp	r3, r2
 8001282:	bf38      	it	cc
 8001284:	4613      	movcc	r3, r2
 8001286:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
			break;
 800128a:	e051      	b.n	8001330 <read_trace+0x424>
		case 'f':
			sscanf(scanptr, "%u%n", &index, &bytes_scanned);
 800128c:	ab03      	add	r3, sp, #12
 800128e:	aa05      	add	r2, sp, #20
 8001290:	4935      	ldr	r1, [pc, #212]	; (8001368 <read_trace+0x45c>)
 8001292:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8001296:	f001 fef7 	bl	8003088 <siscanf>
			scanptr += bytes_scanned;
 800129a:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 800129e:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 80012aa:	4413      	add	r3, r2
 80012ac:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = FREE;
 80012b0:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 80012b4:	6919      	ldr	r1, [r3, #16]
 80012b6:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	440b      	add	r3, r1
 80012c4:	2201      	movs	r2, #1
 80012c6:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 80012c8:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80012cc:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 80012d6:	6919      	ldr	r1, [r3, #16]
 80012d8:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	4602      	mov	r2, r0
 80012e8:	605a      	str	r2, [r3, #4]
			break;
 80012ea:	e021      	b.n	8001330 <read_trace+0x424>
		case 's':
			stack_test();
 80012ec:	f7ff fbd6 	bl	8000a9c <stack_test>
			break;
 80012f0:	e01e      	b.n	8001330 <read_trace+0x424>
		case 'h':
			heap_test();
 80012f2:	f7ff fbe3 	bl	8000abc <heap_test>
			break;
 80012f6:	e01b      	b.n	8001330 <read_trace+0x424>
		default:
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
			   type[0], scanptr-bytes_scanned, path);
 80012f8:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80012fc:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001300:	781b      	ldrb	r3, [r3, #0]
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
 8001302:	4619      	mov	r1, r3
			   type[0], scanptr-bytes_scanned, path);
 8001304:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001308:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	425b      	negs	r3, r3
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
 8001310:	f8dd 281c 	ldr.w	r2, [sp, #2076]	; 0x81c
 8001314:	441a      	add	r2, r3
 8001316:	ab06      	add	r3, sp, #24
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	4613      	mov	r3, r2
 800131c:	460a      	mov	r2, r1
 800131e:	4913      	ldr	r1, [pc, #76]	; (800136c <read_trace+0x460>)
 8001320:	4813      	ldr	r0, [pc, #76]	; (8001370 <read_trace+0x464>)
 8001322:	f001 fe91 	bl	8003048 <siprintf>
			var_print(msg);
 8001326:	4812      	ldr	r0, [pc, #72]	; (8001370 <read_trace+0x464>)
 8001328:	f000 fe5c 	bl	8001fe4 <var_print>
			loop();
 800132c:	f000 fe54 	bl	8001fd8 <loop>
		}
		op_index++;
 8001330:	f8dd 3820 	ldr.w	r3, [sp, #2080]	; 0x820
 8001334:	3301      	adds	r3, #1
 8001336:	f8cd 3820 	str.w	r3, [sp, #2080]	; 0x820
    while (sscanf(scanptr, "%s%n", type, &bytes_scanned) != EOF) {
 800133a:	ab03      	add	r3, sp, #12
 800133c:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <read_trace+0x468>)
 8001342:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8001346:	f001 fe9f 	bl	8003088 <siscanf>
 800134a:	4603      	mov	r3, r0
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001350:	f47f aeaf 	bne.w	80010b2 <read_trace+0x1a6>
    }
	// Removed to allow shortened trace files
    //assert(max_index == trace->num_ids - 1);
    //assert(trace->num_ops == op_index);
    
    return trace;
 8001354:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
}
 8001358:	4618      	mov	r0, r3
 800135a:	f60d 0d2c 	addw	sp, sp, #2092	; 0x82c
 800135e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001362:	bf00      	nop
 8001364:	08004fa4 	.word	0x08004fa4
 8001368:	08004fac 	.word	0x08004fac
 800136c:	08004fb4 	.word	0x08004fb4
 8001370:	200000f0 	.word	0x200000f0
 8001374:	08004ff0 	.word	0x08004ff0

08001378 <free_trace>:
/*
 * free_trace - Free the trace record and the three arrays it points
 *              to, all of which were allocated in read_trace().
 */
void free_trace(trace_t *trace)
{
 8001378:	b500      	push	{lr}
 800137a:	b083      	sub	sp, #12
 800137c:	9001      	str	r0, [sp, #4]
    sys_free(trace->ops);         /* free the three arrays... */
 800137e:	9b01      	ldr	r3, [sp, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	4618      	mov	r0, r3
 8001384:	f001 f8dc 	bl	8002540 <sys_free>
    sys_free(trace->blocks);      
 8001388:	9b01      	ldr	r3, [sp, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	4618      	mov	r0, r3
 800138e:	f001 f8d7 	bl	8002540 <sys_free>
    sys_free(trace->block_sizes);
 8001392:	9b01      	ldr	r3, [sp, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	4618      	mov	r0, r3
 8001398:	f001 f8d2 	bl	8002540 <sys_free>
    sys_free(trace);              /* and the trace record itself... */
 800139c:	9801      	ldr	r0, [sp, #4]
 800139e:	f001 f8cf 	bl	8002540 <sys_free>
}
 80013a2:	bf00      	nop
 80013a4:	b003      	add	sp, #12
 80013a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080013ac <eval_mm_valid>:

/*
 * eval_mm_valid - Check the mm malloc package for correctness
 */
static int eval_mm_valid(trace_t *trace, int tracenum, range_t **ranges) 
{
 80013ac:	b500      	push	{lr}
 80013ae:	b08f      	sub	sp, #60	; 0x3c
 80013b0:	9005      	str	r0, [sp, #20]
 80013b2:	9104      	str	r1, [sp, #16]
 80013b4:	9203      	str	r2, [sp, #12]
    char *newp;
    char *oldp;
    char *p;
    
    /* Reset the heap and free any records in the range list */
    clear_ranges(ranges);
 80013b6:	9803      	ldr	r0, [sp, #12]
 80013b8:	f7ff fd8f 	bl	8000eda <clear_ranges>
	return 0;
    }
	*/

    /* Interpret each operation in the trace in order */
    for (i = 0;  i < trace->num_ops;  i++) {
 80013bc:	2300      	movs	r3, #0
 80013be:	930d      	str	r3, [sp, #52]	; 0x34
 80013c0:	e0e4      	b.n	800158c <eval_mm_valid+0x1e0>
	index = trace->ops[i].index;
 80013c2:	9b05      	ldr	r3, [sp, #20]
 80013c4:	6919      	ldr	r1, [r3, #16]
 80013c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	930a      	str	r3, [sp, #40]	; 0x28
	size = trace->ops[i].size;
 80013d6:	9b05      	ldr	r3, [sp, #20]
 80013d8:	6919      	ldr	r1, [r3, #16]
 80013da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	9309      	str	r3, [sp, #36]	; 0x24

        switch (trace->ops[i].type) {
 80013ea:	9b05      	ldr	r3, [sp, #20]
 80013ec:	6919      	ldr	r1, [r3, #16]
 80013ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d03a      	beq.n	8001476 <eval_mm_valid+0xca>
 8001400:	2b02      	cmp	r3, #2
 8001402:	f300 80ac 	bgt.w	800155e <eval_mm_valid+0x1b2>
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <eval_mm_valid+0x66>
 800140a:	2b01      	cmp	r3, #1
 800140c:	f000 8098 	beq.w	8001540 <eval_mm_valid+0x194>
 8001410:	e0a5      	b.n	800155e <eval_mm_valid+0x1b2>

        case ALLOC: /* sys_malloc */

	    /* Call the student's malloc */
	    if ((p = sys_malloc(size)) == NULL) {
 8001412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001414:	4618      	mov	r0, r3
 8001416:	f001 f88c 	bl	8002532 <sys_malloc>
 800141a:	9006      	str	r0, [sp, #24]
 800141c:	9b06      	ldr	r3, [sp, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d106      	bne.n	8001430 <eval_mm_valid+0x84>
		malloc_error(tracenum, i, "sys_malloc failed.");
 8001422:	4a60      	ldr	r2, [pc, #384]	; (80015a4 <eval_mm_valid+0x1f8>)
 8001424:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001426:	9804      	ldr	r0, [sp, #16]
 8001428:	f000 fb22 	bl	8001a70 <malloc_error>
		return 0;
 800142c:	2300      	movs	r3, #0
 800142e:	e0b4      	b.n	800159a <eval_mm_valid+0x1ee>
	    /* 
	     * Test the range of the new block for correctness and add it 
	     * to the range list if OK. The block must be  be aligned properly,
	     * and must not overlap any currently allocated block. 
	     */ 
	    if (add_range(ranges, p, size, tracenum, i) == 0)
 8001430:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	9b04      	ldr	r3, [sp, #16]
 8001436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001438:	9906      	ldr	r1, [sp, #24]
 800143a:	9803      	ldr	r0, [sp, #12]
 800143c:	f7ff fc70 	bl	8000d20 <add_range>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <eval_mm_valid+0x9e>
		return 0;
 8001446:	2300      	movs	r3, #0
 8001448:	e0a7      	b.n	800159a <eval_mm_valid+0x1ee>
	    /* ADDED: cgw
	     * fill range with low byte of index.  This will be used later
	     * if we realloc the block and wish to make sure that the old
	     * data was copied to the new block
	     */
	    memset(p, index & 0xFF, size);
 800144a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800144c:	b2db      	uxtb	r3, r3
 800144e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001450:	4619      	mov	r1, r3
 8001452:	9806      	ldr	r0, [sp, #24]
 8001454:	f001 fbf4 	bl	8002c40 <memset>

	    /* Remember region */
	    trace->blocks[index] = p;
 8001458:	9b05      	ldr	r3, [sp, #20]
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	9a06      	ldr	r2, [sp, #24]
 8001464:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 8001466:	9b05      	ldr	r3, [sp, #20]
 8001468:	699a      	ldr	r2, [r3, #24]
 800146a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001472:	601a      	str	r2, [r3, #0]
	    break;
 8001474:	e087      	b.n	8001586 <eval_mm_valid+0x1da>

        case REALLOC: /* sys_realloc */
	    
	    /* Call the student's realloc */
	    oldp = trace->blocks[index];
 8001476:	9b05      	ldr	r3, [sp, #20]
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	9308      	str	r3, [sp, #32]
	    if ((newp = sys_realloc(oldp, size)) == NULL) {
 8001484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	9808      	ldr	r0, [sp, #32]
 800148a:	f001 f85f 	bl	800254c <sys_realloc>
 800148e:	9007      	str	r0, [sp, #28]
 8001490:	9b07      	ldr	r3, [sp, #28]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d106      	bne.n	80014a4 <eval_mm_valid+0xf8>
		malloc_error(tracenum, i, "sys_realloc failed.");
 8001496:	4a44      	ldr	r2, [pc, #272]	; (80015a8 <eval_mm_valid+0x1fc>)
 8001498:	990d      	ldr	r1, [sp, #52]	; 0x34
 800149a:	9804      	ldr	r0, [sp, #16]
 800149c:	f000 fae8 	bl	8001a70 <malloc_error>
		return 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e07a      	b.n	800159a <eval_mm_valid+0x1ee>
	    }
	    
	    /* Remove the old region from the range list */
	    remove_range(ranges, oldp);
 80014a4:	9908      	ldr	r1, [sp, #32]
 80014a6:	9803      	ldr	r0, [sp, #12]
 80014a8:	f7ff fcf2 	bl	8000e90 <remove_range>
	    
	    /* Check new block for correctness and add it to range list */
	    if (add_range(ranges, newp, size, tracenum, i) == 0)
 80014ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	9b04      	ldr	r3, [sp, #16]
 80014b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014b4:	9907      	ldr	r1, [sp, #28]
 80014b6:	9803      	ldr	r0, [sp, #12]
 80014b8:	f7ff fc32 	bl	8000d20 <add_range>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <eval_mm_valid+0x11a>
		return 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e069      	b.n	800159a <eval_mm_valid+0x1ee>
	    /* ADDED: cgw
	     * Make sure that the new block contains the data from the old 
	     * block and then fill in the new block with the low order byte
	     * of the new index
	     */
	    oldsize = trace->block_sizes[index];
 80014c6:	9b05      	ldr	r3, [sp, #20]
 80014c8:	699a      	ldr	r2, [r3, #24]
 80014ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	930b      	str	r3, [sp, #44]	; 0x2c
	    if (size < oldsize) oldsize = size;
 80014d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014d8:	429a      	cmp	r2, r3
 80014da:	da01      	bge.n	80014e0 <eval_mm_valid+0x134>
 80014dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014de:	930b      	str	r3, [sp, #44]	; 0x2c
	    for (j = 0; j < oldsize; j++) {
 80014e0:	2300      	movs	r3, #0
 80014e2:	930c      	str	r3, [sp, #48]	; 0x30
 80014e4:	e012      	b.n	800150c <eval_mm_valid+0x160>
	      if (newp[j] != (index & 0xFF)) {
 80014e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80014e8:	9a07      	ldr	r2, [sp, #28]
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d006      	beq.n	8001506 <eval_mm_valid+0x15a>
		malloc_error(tracenum, i, "sys_realloc did not preserve the "
 80014f8:	4a2c      	ldr	r2, [pc, #176]	; (80015ac <eval_mm_valid+0x200>)
 80014fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80014fc:	9804      	ldr	r0, [sp, #16]
 80014fe:	f000 fab7 	bl	8001a70 <malloc_error>
			     "data from old block");
		return 0;
 8001502:	2300      	movs	r3, #0
 8001504:	e049      	b.n	800159a <eval_mm_valid+0x1ee>
	    for (j = 0; j < oldsize; j++) {
 8001506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001508:	3301      	adds	r3, #1
 800150a:	930c      	str	r3, [sp, #48]	; 0x30
 800150c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800150e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001510:	429a      	cmp	r2, r3
 8001512:	dbe8      	blt.n	80014e6 <eval_mm_valid+0x13a>
	      }
	    }
	    memset(newp, index & 0xFF, size);
 8001514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001516:	b2db      	uxtb	r3, r3
 8001518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800151a:	4619      	mov	r1, r3
 800151c:	9807      	ldr	r0, [sp, #28]
 800151e:	f001 fb8f 	bl	8002c40 <memset>

	    /* Remember region */
	    trace->blocks[index] = newp;
 8001522:	9b05      	ldr	r3, [sp, #20]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	9a07      	ldr	r2, [sp, #28]
 800152e:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 8001530:	9b05      	ldr	r3, [sp, #20]
 8001532:	699a      	ldr	r2, [r3, #24]
 8001534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800153c:	601a      	str	r2, [r3, #0]
	    break;
 800153e:	e022      	b.n	8001586 <eval_mm_valid+0x1da>

        case FREE: /* sys_free */
	    
	    /* Remove region from list and call student's free function */
	    p = trace->blocks[index];
 8001540:	9b05      	ldr	r3, [sp, #20]
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	9306      	str	r3, [sp, #24]
	    remove_range(ranges, p);
 800154e:	9906      	ldr	r1, [sp, #24]
 8001550:	9803      	ldr	r0, [sp, #12]
 8001552:	f7ff fc9d 	bl	8000e90 <remove_range>
	    sys_free(p);
 8001556:	9806      	ldr	r0, [sp, #24]
 8001558:	f000 fff2 	bl	8002540 <sys_free>
	    break;
 800155c:	e013      	b.n	8001586 <eval_mm_valid+0x1da>

	default:
		sprintf(msg, "Type %d", trace->ops[i].type);
 800155e:	9b05      	ldr	r3, [sp, #20]
 8001560:	6919      	ldr	r1, [r3, #16]
 8001562:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	490f      	ldr	r1, [pc, #60]	; (80015b0 <eval_mm_valid+0x204>)
 8001574:	480f      	ldr	r0, [pc, #60]	; (80015b4 <eval_mm_valid+0x208>)
 8001576:	f001 fd67 	bl	8003048 <siprintf>
		var_print(msg);
 800157a:	480e      	ldr	r0, [pc, #56]	; (80015b4 <eval_mm_valid+0x208>)
 800157c:	f000 fd32 	bl	8001fe4 <var_print>
	    app_error("Nonexistent request type in eval_mm_valid");
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <eval_mm_valid+0x20c>)
 8001582:	f000 fa41 	bl	8001a08 <app_error>
    for (i = 0;  i < trace->num_ops;  i++) {
 8001586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001588:	3301      	adds	r3, #1
 800158a:	930d      	str	r3, [sp, #52]	; 0x34
 800158c:	9b05      	ldr	r3, [sp, #20]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001592:	429a      	cmp	r2, r3
 8001594:	f6ff af15 	blt.w	80013c2 <eval_mm_valid+0x16>
        }

    }

    /* As far as we know, this is a valid malloc package */
    return 1;
 8001598:	2301      	movs	r3, #1
}
 800159a:	4618      	mov	r0, r3
 800159c:	b00f      	add	sp, #60	; 0x3c
 800159e:	f85d fb04 	ldr.w	pc, [sp], #4
 80015a2:	bf00      	nop
 80015a4:	08004ff8 	.word	0x08004ff8
 80015a8:	0800500c 	.word	0x0800500c
 80015ac:	08005020 	.word	0x08005020
 80015b0:	08005058 	.word	0x08005058
 80015b4:	200000f0 	.word	0x200000f0
 80015b8:	08005060 	.word	0x08005060

080015bc <eval_mm_util>:
 *   doesn't allow the students to decrement the brk pointer, so brk
 *   is always the high water mark of the heap. 
 *   
 */
static double eval_mm_util(trace_t *trace, int tracenum, range_t **ranges)
{   
 80015bc:	b530      	push	{r4, r5, lr}
 80015be:	b08f      	sub	sp, #60	; 0x3c
 80015c0:	9003      	str	r0, [sp, #12]
 80015c2:	9102      	str	r1, [sp, #8]
 80015c4:	9201      	str	r2, [sp, #4]
    int i;
    int index;
    int size, newsize, oldsize;
    int max_total_size = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	930c      	str	r3, [sp, #48]	; 0x30
    int total_size = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	930b      	str	r3, [sp, #44]	; 0x2c
    /* initialize the heap and the mm malloc package */
    //mem_reset_brk();
    //if (mm_init() < 0)
	//app_error("mm_init failed in eval_mm_util");

    for (i = 0;  i < trace->num_ops;  i++) {
 80015ce:	2300      	movs	r3, #0
 80015d0:	930d      	str	r3, [sp, #52]	; 0x34
 80015d2:	e0ba      	b.n	800174a <eval_mm_util+0x18e>
        switch (trace->ops[i].type) {
 80015d4:	9b03      	ldr	r3, [sp, #12]
 80015d6:	6919      	ldr	r1, [r3, #16]
 80015d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d040      	beq.n	800166c <eval_mm_util+0xb0>
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	f300 80a7 	bgt.w	800173e <eval_mm_util+0x182>
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <eval_mm_util+0x40>
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	f000 8082 	beq.w	80016fe <eval_mm_util+0x142>
 80015fa:	e0a0      	b.n	800173e <eval_mm_util+0x182>

        case ALLOC: /* mm_alloc */
	    index = trace->ops[i].index;
 80015fc:	9b03      	ldr	r3, [sp, #12]
 80015fe:	6919      	ldr	r1, [r3, #16]
 8001600:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	930a      	str	r3, [sp, #40]	; 0x28
	    size = trace->ops[i].size;
 8001610:	9b03      	ldr	r3, [sp, #12]
 8001612:	6919      	ldr	r1, [r3, #16]
 8001614:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	9305      	str	r3, [sp, #20]

	    if ((p = sys_malloc(size)) == NULL) 
 8001624:	9b05      	ldr	r3, [sp, #20]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 ff83 	bl	8002532 <sys_malloc>
 800162c:	9004      	str	r0, [sp, #16]
 800162e:	9b04      	ldr	r3, [sp, #16]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <eval_mm_util+0x7e>
			app_error("sys_malloc failed in eval_mm_util");
 8001634:	4856      	ldr	r0, [pc, #344]	; (8001790 <eval_mm_util+0x1d4>)
 8001636:	f000 f9e7 	bl	8001a08 <app_error>
	    
	    /* Remember region and size */
	    trace->blocks[index] = p;
 800163a:	9b03      	ldr	r3, [sp, #12]
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	9a04      	ldr	r2, [sp, #16]
 8001646:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 8001648:	9b03      	ldr	r3, [sp, #12]
 800164a:	699a      	ldr	r2, [r3, #24]
 800164c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	9a05      	ldr	r2, [sp, #20]
 8001654:	601a      	str	r2, [r3, #0]
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size += size;
 8001656:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001658:	9b05      	ldr	r3, [sp, #20]
 800165a:	4413      	add	r3, r2
 800165c:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    /* Update statistics */
	    max_total_size = (total_size > max_total_size) ?
 800165e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001662:	4293      	cmp	r3, r2
 8001664:	bfb8      	it	lt
 8001666:	4613      	movlt	r3, r2
 8001668:	930c      	str	r3, [sp, #48]	; 0x30
		total_size : max_total_size;
	    break;
 800166a:	e06b      	b.n	8001744 <eval_mm_util+0x188>

	case REALLOC: /* sys_realloc */
	    index = trace->ops[i].index;
 800166c:	9b03      	ldr	r3, [sp, #12]
 800166e:	6919      	ldr	r1, [r3, #16]
 8001670:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	930a      	str	r3, [sp, #40]	; 0x28
	    newsize = trace->ops[i].size;
 8001680:	9b03      	ldr	r3, [sp, #12]
 8001682:	6919      	ldr	r1, [r3, #16]
 8001684:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	9309      	str	r3, [sp, #36]	; 0x24
	    oldsize = trace->block_sizes[index];
 8001694:	9b03      	ldr	r3, [sp, #12]
 8001696:	699a      	ldr	r2, [r3, #24]
 8001698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	9308      	str	r3, [sp, #32]

	    oldp = trace->blocks[index];
 80016a2:	9b03      	ldr	r3, [sp, #12]
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	9307      	str	r3, [sp, #28]
	    if ((newp = sys_realloc(oldp,newsize)) == NULL)
 80016b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016b2:	4619      	mov	r1, r3
 80016b4:	9807      	ldr	r0, [sp, #28]
 80016b6:	f000 ff49 	bl	800254c <sys_realloc>
 80016ba:	9006      	str	r0, [sp, #24]
 80016bc:	9b06      	ldr	r3, [sp, #24]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <eval_mm_util+0x10c>
		app_error("sys_realloc failed in eval_mm_util");
 80016c2:	4834      	ldr	r0, [pc, #208]	; (8001794 <eval_mm_util+0x1d8>)
 80016c4:	f000 f9a0 	bl	8001a08 <app_error>

	    /* Remember region and size */
	    trace->blocks[index] = newp;
 80016c8:	9b03      	ldr	r3, [sp, #12]
 80016ca:	695a      	ldr	r2, [r3, #20]
 80016cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	9a06      	ldr	r2, [sp, #24]
 80016d4:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = newsize;
 80016d6:	9b03      	ldr	r3, [sp, #12]
 80016d8:	699a      	ldr	r2, [r3, #24]
 80016da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016e2:	601a      	str	r2, [r3, #0]
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size += (newsize - oldsize);
 80016e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016e6:	9b08      	ldr	r3, [sp, #32]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80016ec:	4413      	add	r3, r2
 80016ee:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    /* Update statistics */
	    max_total_size = (total_size > max_total_size) ?
 80016f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80016f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016f4:	4293      	cmp	r3, r2
 80016f6:	bfb8      	it	lt
 80016f8:	4613      	movlt	r3, r2
 80016fa:	930c      	str	r3, [sp, #48]	; 0x30
		total_size : max_total_size;
	    break;
 80016fc:	e022      	b.n	8001744 <eval_mm_util+0x188>

        case FREE: /* sys_free */
	    index = trace->ops[i].index;
 80016fe:	9b03      	ldr	r3, [sp, #12]
 8001700:	6919      	ldr	r1, [r3, #16]
 8001702:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	930a      	str	r3, [sp, #40]	; 0x28
	    size = trace->block_sizes[index];
 8001712:	9b03      	ldr	r3, [sp, #12]
 8001714:	699a      	ldr	r2, [r3, #24]
 8001716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	9305      	str	r3, [sp, #20]
	    p = trace->blocks[index];
 8001720:	9b03      	ldr	r3, [sp, #12]
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	9304      	str	r3, [sp, #16]
	    
	    sys_free(p);
 800172e:	9804      	ldr	r0, [sp, #16]
 8001730:	f000 ff06 	bl	8002540 <sys_free>
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size -= size;
 8001734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001736:	9b05      	ldr	r3, [sp, #20]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    break;
 800173c:	e002      	b.n	8001744 <eval_mm_util+0x188>

	default:
	    app_error("Nonexistent request type in eval_mm_util");
 800173e:	4816      	ldr	r0, [pc, #88]	; (8001798 <eval_mm_util+0x1dc>)
 8001740:	f000 f962 	bl	8001a08 <app_error>
    for (i = 0;  i < trace->num_ops;  i++) {
 8001744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001746:	3301      	adds	r3, #1
 8001748:	930d      	str	r3, [sp, #52]	; 0x34
 800174a:	9b03      	ldr	r3, [sp, #12]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001750:	429a      	cmp	r2, r3
 8001752:	f6ff af3f 	blt.w	80015d4 <eval_mm_util+0x18>

        }
    }

	max_total_size += test_mem_use;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <eval_mm_util+0x1e0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800175c:	4413      	add	r3, r2
 800175e:	930c      	str	r3, [sp, #48]	; 0x30

    return ((double)max_total_size  / (double)mem_heapsize());
 8001760:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001762:	f7fe fed7 	bl	8000514 <__aeabi_i2d>
 8001766:	4604      	mov	r4, r0
 8001768:	460d      	mov	r5, r1
 800176a:	f000 fa23 	bl	8001bb4 <mem_heapsize>
 800176e:	4603      	mov	r3, r0
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe febf 	bl	80004f4 <__aeabi_ui2d>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4620      	mov	r0, r4
 800177c:	4629      	mov	r1, r5
 800177e:	f7ff f85d 	bl	800083c <__aeabi_ddiv>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
}
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	b00f      	add	sp, #60	; 0x3c
 800178c:	bd30      	pop	{r4, r5, pc}
 800178e:	bf00      	nop
 8001790:	0800508c 	.word	0x0800508c
 8001794:	080050b0 	.word	0x080050b0
 8001798:	080050d4 	.word	0x080050d4
 800179c:	200000ec 	.word	0x200000ec

080017a0 <printresults>:

/*
 * printresults - prints a performance summary for some malloc package
 */
static void printresults(int n, stats_t *stats) 
{
 80017a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017a4:	b093      	sub	sp, #76	; 0x4c
 80017a6:	9009      	str	r0, [sp, #36]	; 0x24
 80017a8:	9108      	str	r1, [sp, #32]
    int i;
    double secs = 0;
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    double ops = 0;
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    double util = 0;
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28

    /* Print the individual results for each trace */
    sprintf(msg, "%5s%7s %5s%8s%10s%6s\n", 
 80017ce:	4b7b      	ldr	r3, [pc, #492]	; (80019bc <printresults+0x21c>)
 80017d0:	9303      	str	r3, [sp, #12]
 80017d2:	4b7b      	ldr	r3, [pc, #492]	; (80019c0 <printresults+0x220>)
 80017d4:	9302      	str	r3, [sp, #8]
 80017d6:	4b7b      	ldr	r3, [pc, #492]	; (80019c4 <printresults+0x224>)
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	4b7b      	ldr	r3, [pc, #492]	; (80019c8 <printresults+0x228>)
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	4b7b      	ldr	r3, [pc, #492]	; (80019cc <printresults+0x22c>)
 80017e0:	4a7b      	ldr	r2, [pc, #492]	; (80019d0 <printresults+0x230>)
 80017e2:	497c      	ldr	r1, [pc, #496]	; (80019d4 <printresults+0x234>)
 80017e4:	487c      	ldr	r0, [pc, #496]	; (80019d8 <printresults+0x238>)
 80017e6:	f001 fc2f 	bl	8003048 <siprintf>
	   "trace", " valid", "util", "ops", "secs", "Kops");
	var_print(msg);
 80017ea:	487b      	ldr	r0, [pc, #492]	; (80019d8 <printresults+0x238>)
 80017ec:	f000 fbfa 	bl	8001fe4 <var_print>
    for (i=0; i < n; i++) {
 80017f0:	2300      	movs	r3, #0
 80017f2:	9311      	str	r3, [sp, #68]	; 0x44
 80017f4:	e08a      	b.n	800190c <printresults+0x16c>
	if (stats[i].valid) {
 80017f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017f8:	015b      	lsls	r3, r3, #5
 80017fa:	9a08      	ldr	r2, [sp, #32]
 80017fc:	4413      	add	r3, r2
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d06f      	beq.n	80018e4 <printresults+0x144>
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
		   i,
		   "yes",
		   stats[i].util*100.0,
 8001804:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001806:	015b      	lsls	r3, r3, #5
 8001808:	9a08      	ldr	r2, [sp, #32]
 800180a:	4413      	add	r3, r2
 800180c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	4b71      	ldr	r3, [pc, #452]	; (80019dc <printresults+0x23c>)
 8001816:	f7fe fee7 	bl	80005e8 <__aeabi_dmul>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4690      	mov	r8, r2
 8001820:	4699      	mov	r9, r3
		   stats[i].ops,
 8001822:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001824:	015b      	lsls	r3, r3, #5
 8001826:	9a08      	ldr	r2, [sp, #32]
 8001828:	4413      	add	r3, r2
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 800182a:	e9d3 4500 	ldrd	r4, r5, [r3]
		   stats[i].secs,
 800182e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001830:	015b      	lsls	r3, r3, #5
 8001832:	9a08      	ldr	r2, [sp, #32]
 8001834:	4413      	add	r3, r2
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001836:	e9d3 6704 	ldrd	r6, r7, [r3, #16]
		   (stats[i].ops/1e3)/stats[i].secs);
 800183a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800183c:	015b      	lsls	r3, r3, #5
 800183e:	9a08      	ldr	r2, [sp, #32]
 8001840:	4413      	add	r3, r2
 8001842:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	4b65      	ldr	r3, [pc, #404]	; (80019e0 <printresults+0x240>)
 800184c:	f7fe fff6 	bl	800083c <__aeabi_ddiv>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800185a:	015b      	lsls	r3, r3, #5
 800185c:	9a08      	ldr	r2, [sp, #32]
 800185e:	4413      	add	r3, r2
 8001860:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001864:	f7fe ffea 	bl	800083c <__aeabi_ddiv>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001870:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001874:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001878:	e9cd 8900 	strd	r8, r9, [sp]
 800187c:	4b59      	ldr	r3, [pc, #356]	; (80019e4 <printresults+0x244>)
 800187e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001880:	4959      	ldr	r1, [pc, #356]	; (80019e8 <printresults+0x248>)
 8001882:	4855      	ldr	r0, [pc, #340]	; (80019d8 <printresults+0x238>)
 8001884:	f001 fbe0 	bl	8003048 <siprintf>
		var_print(msg);
 8001888:	4853      	ldr	r0, [pc, #332]	; (80019d8 <printresults+0x238>)
 800188a:	f000 fbab 	bl	8001fe4 <var_print>
	    secs += stats[i].secs;
 800188e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001890:	015b      	lsls	r3, r3, #5
 8001892:	9a08      	ldr	r2, [sp, #32]
 8001894:	4413      	add	r3, r2
 8001896:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800189a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800189e:	f7fe fced 	bl	800027c <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	    ops += stats[i].ops;
 80018aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018ac:	015b      	lsls	r3, r3, #5
 80018ae:	9a08      	ldr	r2, [sp, #32]
 80018b0:	4413      	add	r3, r2
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80018ba:	f7fe fcdf 	bl	800027c <__adddf3>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	    util += stats[i].util;
 80018c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018c8:	015b      	lsls	r3, r3, #5
 80018ca:	9a08      	ldr	r2, [sp, #32]
 80018cc:	4413      	add	r3, r2
 80018ce:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80018d6:	f7fe fcd1 	bl	800027c <__adddf3>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80018e2:	e010      	b.n	8001906 <printresults+0x166>
	}
	else {
	    sprintf(msg,"%2d%10s%6s%8s%10s%6s\n", 
 80018e4:	4b41      	ldr	r3, [pc, #260]	; (80019ec <printresults+0x24c>)
 80018e6:	9303      	str	r3, [sp, #12]
 80018e8:	4b40      	ldr	r3, [pc, #256]	; (80019ec <printresults+0x24c>)
 80018ea:	9302      	str	r3, [sp, #8]
 80018ec:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <printresults+0x24c>)
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	4b3e      	ldr	r3, [pc, #248]	; (80019ec <printresults+0x24c>)
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	4b3e      	ldr	r3, [pc, #248]	; (80019f0 <printresults+0x250>)
 80018f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80018f8:	493e      	ldr	r1, [pc, #248]	; (80019f4 <printresults+0x254>)
 80018fa:	4837      	ldr	r0, [pc, #220]	; (80019d8 <printresults+0x238>)
 80018fc:	f001 fba4 	bl	8003048 <siprintf>
		   "no",
		   "-",
		   "-",
		   "-",
		   "-");
		var_print(msg);
 8001900:	4835      	ldr	r0, [pc, #212]	; (80019d8 <printresults+0x238>)
 8001902:	f000 fb6f 	bl	8001fe4 <var_print>
    for (i=0; i < n; i++) {
 8001906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001908:	3301      	adds	r3, #1
 800190a:	9311      	str	r3, [sp, #68]	; 0x44
 800190c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800190e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001910:	429a      	cmp	r2, r3
 8001912:	f6ff af70 	blt.w	80017f6 <printresults+0x56>
	}
    }

    /* Print the aggregate results for the set of traces */
    if (errors == 0) {
 8001916:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <printresults+0x258>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d13b      	bne.n	8001996 <printresults+0x1f6>
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
	       "Total       ",
	       (util/n)*100.0,
 800191e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001920:	f7fe fdf8 	bl	8000514 <__aeabi_i2d>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800192c:	f7fe ff86 	bl	800083c <__aeabi_ddiv>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	4b27      	ldr	r3, [pc, #156]	; (80019dc <printresults+0x23c>)
 800193e:	f7fe fe53 	bl	80005e8 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4614      	mov	r4, r2
 8001948:	461d      	mov	r5, r3
	       ops, 
	       secs,
	       (ops/1e3)/secs);
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <printresults+0x240>)
 8001950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001954:	f7fe ff72 	bl	800083c <__aeabi_ddiv>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001960:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8001964:	f7fe ff6a 	bl	800083c <__aeabi_ddiv>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001970:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8001974:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001978:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800197c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001980:	e9cd 4500 	strd	r4, r5, [sp]
 8001984:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <printresults+0x25c>)
 8001986:	491e      	ldr	r1, [pc, #120]	; (8001a00 <printresults+0x260>)
 8001988:	4813      	ldr	r0, [pc, #76]	; (80019d8 <printresults+0x238>)
 800198a:	f001 fb5d 	bl	8003048 <siprintf>
	var_print(msg);
 800198e:	4812      	ldr	r0, [pc, #72]	; (80019d8 <printresults+0x238>)
 8001990:	f000 fb28 	bl	8001fe4 <var_print>
	       "-", 
	       "-");
	var_print(msg);
    }

}
 8001994:	e00e      	b.n	80019b4 <printresults+0x214>
	sprintf(msg, "%12s%6s%8s%10s%6s\n", 
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <printresults+0x24c>)
 8001998:	9302      	str	r3, [sp, #8]
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <printresults+0x24c>)
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <printresults+0x24c>)
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <printresults+0x24c>)
 80019a4:	4a15      	ldr	r2, [pc, #84]	; (80019fc <printresults+0x25c>)
 80019a6:	4917      	ldr	r1, [pc, #92]	; (8001a04 <printresults+0x264>)
 80019a8:	480b      	ldr	r0, [pc, #44]	; (80019d8 <printresults+0x238>)
 80019aa:	f001 fb4d 	bl	8003048 <siprintf>
	var_print(msg);
 80019ae:	480a      	ldr	r0, [pc, #40]	; (80019d8 <printresults+0x238>)
 80019b0:	f000 fb18 	bl	8001fe4 <var_print>
}
 80019b4:	bf00      	nop
 80019b6:	b013      	add	sp, #76	; 0x4c
 80019b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019bc:	08005128 	.word	0x08005128
 80019c0:	08005130 	.word	0x08005130
 80019c4:	08005138 	.word	0x08005138
 80019c8:	0800513c 	.word	0x0800513c
 80019cc:	08005100 	.word	0x08005100
 80019d0:	08005108 	.word	0x08005108
 80019d4:	08005110 	.word	0x08005110
 80019d8:	200000f0 	.word	0x200000f0
 80019dc:	40590000 	.word	0x40590000
 80019e0:	408f4000 	.word	0x408f4000
 80019e4:	08005144 	.word	0x08005144
 80019e8:	08005148 	.word	0x08005148
 80019ec:	08005184 	.word	0x08005184
 80019f0:	08005168 	.word	0x08005168
 80019f4:	0800516c 	.word	0x0800516c
 80019f8:	200000e8 	.word	0x200000e8
 80019fc:	08005188 	.word	0x08005188
 8001a00:	08005198 	.word	0x08005198
 8001a04:	080051b8 	.word	0x080051b8

08001a08 <app_error>:

/* 
 * app_error - Report an arbitrary application error
 */
void app_error(char * err_msg) 
{
 8001a08:	b500      	push	{lr}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	9001      	str	r0, [sp, #4]
    sprintf(msg, "%s\n", err_msg);
 8001a0e:	9a01      	ldr	r2, [sp, #4]
 8001a10:	4906      	ldr	r1, [pc, #24]	; (8001a2c <app_error+0x24>)
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <app_error+0x28>)
 8001a14:	f001 fb18 	bl	8003048 <siprintf>
	var_print(msg);
 8001a18:	4805      	ldr	r0, [pc, #20]	; (8001a30 <app_error+0x28>)
 8001a1a:	f000 fae3 	bl	8001fe4 <var_print>
	loop();
 8001a1e:	f000 fadb 	bl	8001fd8 <loop>
}
 8001a22:	bf00      	nop
 8001a24:	b003      	add	sp, #12
 8001a26:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a2a:	bf00      	nop
 8001a2c:	080051cc 	.word	0x080051cc
 8001a30:	200000f0 	.word	0x200000f0

08001a34 <unix_error>:

/* 
 * unix_error - Report a Unix-style error
 */
void unix_error(char * err_msg) 
{
 8001a34:	b500      	push	{lr}
 8001a36:	b083      	sub	sp, #12
 8001a38:	9001      	str	r0, [sp, #4]
    sprintf(msg, "%s: %s\n", err_msg, strerror(errno));
 8001a3a:	f001 f8b7 	bl	8002bac <__errno>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f001 fd86 	bl	8003554 <strerror>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	9a01      	ldr	r2, [sp, #4]
 8001a4c:	4906      	ldr	r1, [pc, #24]	; (8001a68 <unix_error+0x34>)
 8001a4e:	4807      	ldr	r0, [pc, #28]	; (8001a6c <unix_error+0x38>)
 8001a50:	f001 fafa 	bl	8003048 <siprintf>
	var_print(msg);
 8001a54:	4805      	ldr	r0, [pc, #20]	; (8001a6c <unix_error+0x38>)
 8001a56:	f000 fac5 	bl	8001fe4 <var_print>
	loop();
 8001a5a:	f000 fabd 	bl	8001fd8 <loop>
}
 8001a5e:	bf00      	nop
 8001a60:	b003      	add	sp, #12
 8001a62:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a66:	bf00      	nop
 8001a68:	080051d0 	.word	0x080051d0
 8001a6c:	200000f0 	.word	0x200000f0

08001a70 <malloc_error>:

/*
 * malloc_error - Report an error returned by the sys_malloc package
 */
void malloc_error(int tracenum, int opnum, char *err_msg)
{
 8001a70:	b500      	push	{lr}
 8001a72:	b087      	sub	sp, #28
 8001a74:	9005      	str	r0, [sp, #20]
 8001a76:	9104      	str	r1, [sp, #16]
 8001a78:	9203      	str	r2, [sp, #12]
    errors++;
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <malloc_error+0x3c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <malloc_error+0x3c>)
 8001a82:	6013      	str	r3, [r2, #0]
    sprintf(msg, "ERROR [trace %d, line %d]: %s\n", tracenum, LINENUM(opnum), err_msg);
 8001a84:	9b04      	ldr	r3, [sp, #16]
 8001a86:	1d5a      	adds	r2, r3, #5
 8001a88:	9b03      	ldr	r3, [sp, #12]
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	9a05      	ldr	r2, [sp, #20]
 8001a90:	4907      	ldr	r1, [pc, #28]	; (8001ab0 <malloc_error+0x40>)
 8001a92:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <malloc_error+0x44>)
 8001a94:	f001 fad8 	bl	8003048 <siprintf>
	var_print(msg);
 8001a98:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <malloc_error+0x44>)
 8001a9a:	f000 faa3 	bl	8001fe4 <var_print>
	loop();
 8001a9e:	f000 fa9b 	bl	8001fd8 <loop>
}
 8001aa2:	bf00      	nop
 8001aa4:	b007      	add	sp, #28
 8001aa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001aaa:	bf00      	nop
 8001aac:	200000e8 	.word	0x200000e8
 8001ab0:	080051d8 	.word	0x080051d8
 8001ab4:	200000f0 	.word	0x200000f0

08001ab8 <mem_init>:

/* 
 * mem_init - initialize the memory system model
 */
void mem_init(void)
{
 8001ab8:	b500      	push	{lr}
 8001aba:	b085      	sub	sp, #20
	mem_request req;
	mem_start_brk = (char *)ALIGN((size_t)(&__malloc_sbrk_start));
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <mem_init+0x48>)
 8001abe:	3303      	adds	r3, #3
 8001ac0:	f023 0307 	bic.w	r3, r3, #7
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <mem_init+0x4c>)
 8001ac8:	601a      	str	r2, [r3, #0]
    mem_brk = mem_start_brk;
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <mem_init+0x4c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <mem_init+0x50>)
 8001ad0:	6013      	str	r3, [r2, #0]

	// Sbrk request: size=0 for reset, ptr set to heap start
	req = (mem_request){.request=SBRK, .size=0, .ptr=mem_brk};
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <mem_init+0x50>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001ada:	f043 0303 	orr.w	r3, r3, #3
 8001ade:	f88d 3008 	strb.w	r3, [sp, #8]
 8001ae2:	9b02      	ldr	r3, [sp, #8]
 8001ae4:	f36f 039f 	bfc	r3, #2, #30
 8001ae8:	9302      	str	r3, [sp, #8]
 8001aea:	9203      	str	r2, [sp, #12]
	req_send(&req);
 8001aec:	ab02      	add	r3, sp, #8
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 fab1 	bl	8002056 <req_send>
	proc_update();
 8001af4:	f000 fd3a 	bl	800256c <proc_update>
}
 8001af8:	bf00      	nop
 8001afa:	b005      	add	sp, #20
 8001afc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b00:	20000d0c 	.word	0x20000d0c
 8001b04:	200004f0 	.word	0x200004f0
 8001b08:	200004f4 	.word	0x200004f4

08001b0c <mem_sbrk>:
 * mem_sbrk - simple model of the sbrk function. Extends the heap 
 *    by incr bytes and returns the start address of the new area. In
 *    this model, the heap cannot be shrunk.
 */
void *mem_sbrk(unsigned int incr) 
{
 8001b0c:	b530      	push	{r4, r5, lr}
 8001b0e:	b09b      	sub	sp, #108	; 0x6c
 8001b10:	9001      	str	r0, [sp, #4]
    char *old_brk = mem_brk;
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <mem_sbrk+0x88>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	9319      	str	r3, [sp, #100]	; 0x64
	// Special incr cases
	if (incr < 0) {
		char output_str[] = "Negative incr not supported";
		var_print(output_str);
		return (void *)-1;
	} else if (incr == 0) {
 8001b18:	9b01      	ldr	r3, [sp, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d102      	bne.n	8001b24 <mem_sbrk+0x18>
		return mem_brk;
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <mem_sbrk+0x88>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	e034      	b.n	8001b8e <mem_sbrk+0x82>
	}

	// Check if there is enough memory
    if (((mem_brk + incr) > (char *)(stack_top))) {
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <mem_sbrk+0x88>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	9b01      	ldr	r3, [sp, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	466a      	mov	r2, sp
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d911      	bls.n	8001b56 <mem_sbrk+0x4a>
		char output_str[] = "ERROR: mem_sbrk failed. Ran out of memory...\n";
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <mem_sbrk+0x8c>)
 8001b34:	ac02      	add	r4, sp, #8
 8001b36:	461d      	mov	r5, r3
 8001b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b44:	c407      	stmia	r4!, {r0, r1, r2}
 8001b46:	8023      	strh	r3, [r4, #0]
		var_print(output_str);
 8001b48:	ab02      	add	r3, sp, #8
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fa4a 	bl	8001fe4 <var_print>
		return (void *)-1;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b54:	e01b      	b.n	8001b8e <mem_sbrk+0x82>
    }
    mem_brk += incr;
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <mem_sbrk+0x88>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	9b01      	ldr	r3, [sp, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <mem_sbrk+0x88>)
 8001b60:	6013      	str	r3, [r2, #0]

	// Sbrk request: size=0 for reset, size=1 for sbrk move
	req = (mem_request){.request = SBRK, .size=incr, .ptr=0};
 8001b62:	9b01      	ldr	r3, [sp, #4]
 8001b64:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001b68:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8001b6c:	f043 0303 	orr.w	r3, r3, #3
 8001b70:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8001b74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001b76:	f362 039f 	bfi	r3, r2, #2, #30
 8001b7a:	9317      	str	r3, [sp, #92]	; 0x5c
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9318      	str	r3, [sp, #96]	; 0x60
	req_send(&req);
 8001b80:	ab17      	add	r3, sp, #92	; 0x5c
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 fa67 	bl	8002056 <req_send>
	proc_update();
 8001b88:	f000 fcf0 	bl	800256c <proc_update>
    return (void *)old_brk;
 8001b8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	b01b      	add	sp, #108	; 0x6c
 8001b92:	bd30      	pop	{r4, r5, pc}
 8001b94:	200004f4 	.word	0x200004f4
 8001b98:	080051f8 	.word	0x080051f8

08001b9c <mem_heap_lo>:
/*
 * mem_heap_lo - return address of the first heap byte
 */
void *mem_heap_lo()
{
    return (void *)mem_start_brk;
 8001b9c:	4b01      	ldr	r3, [pc, #4]	; (8001ba4 <mem_heap_lo+0x8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	4770      	bx	lr
 8001ba4:	200004f0 	.word	0x200004f0

08001ba8 <mem_heap_hi>:
/* 
 * mem_heap_hi - return address of last heap byte
 */
void *mem_heap_hi()
{
    return (void *)(mem_brk);
 8001ba8:	4b01      	ldr	r3, [pc, #4]	; (8001bb0 <mem_heap_hi+0x8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	4770      	bx	lr
 8001bb0:	200004f4 	.word	0x200004f4

08001bb4 <mem_heapsize>:
/*
 * mem_heapsize() - returns the heap size in bytes
 */
size_t mem_heapsize() 
{
    return (size_t)(mem_brk - mem_start_brk);
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <mem_heapsize+0x10>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <mem_heapsize+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	1ad3      	subs	r3, r2, r3
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200004f4 	.word	0x200004f4
 8001bc8:	200004f0 	.word	0x200004f0

08001bcc <extend_heap>:
#define CHUNKSIZE (1<<12) // Heap request chunk

#define MAX(x,y) ((x) > (y) ? (x) : (y))

// Extend heap by words * WSIZE with alignment, return 1 on success 0 on fail
static int extend_heap(size_t words) {
 8001bcc:	b500      	push	{lr}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	9001      	str	r0, [sp, #4]
	char * bp;
	size_t size;

	size = (words % 2) ? (words+1) * WSIZE : words * WSIZE; // Maintain double word alignment
 8001bd2:	9b01      	ldr	r3, [sp, #4]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <extend_heap+0x18>
 8001bdc:	9b01      	ldr	r3, [sp, #4]
 8001bde:	3301      	adds	r3, #1
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	e001      	b.n	8001be8 <extend_heap+0x1c>
 8001be4:	9b01      	ldr	r3, [sp, #4]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	9303      	str	r3, [sp, #12]
	if ((long)(bp = mem_sbrk(size)) == -1) {
 8001bea:	9803      	ldr	r0, [sp, #12]
 8001bec:	f7ff ff8e 	bl	8001b0c <mem_sbrk>
 8001bf0:	9002      	str	r0, [sp, #8]
 8001bf2:	9b02      	ldr	r3, [sp, #8]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bf8:	d101      	bne.n	8001bfe <extend_heap+0x32>
		return 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e000      	b.n	8001c00 <extend_heap+0x34>
	} else {
		return 1;
 8001bfe:	2301      	movs	r3, #1
	}
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	b005      	add	sp, #20
 8001c04:	f85d fb04 	ldr.w	pc, [sp], #4

08001c08 <mm_init>:

// Initialize memory request communication
int mm_init(void)
{
 8001c08:	b500      	push	{lr}
 8001c0a:	b083      	sub	sp, #12
	void * response = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9301      	str	r3, [sp, #4]

	mcu_init();
 8001c10:	f000 fe66 	bl	80028e0 <mcu_init>
	timer_init();
 8001c14:	f000 f992 	bl	8001f3c <timer_init>
	led_on(LD1);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f000 fde5 	bl	80027e8 <led_on>
	mem_req_setup();
 8001c1e:	f000 fa13 	bl	8002048 <mem_req_setup>
	mpu_init();
 8001c22:	f000 fd09 	bl	8002638 <mpu_init>

	// Receive starting singal of 1 in every field
	req_receive(&response);
 8001c26:	ab01      	add	r3, sp, #4
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 fa25 	bl	8002078 <req_receive>
	if (response==(void *)1) {
 8001c2e:	9b01      	ldr	r3, [sp, #4]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d10a      	bne.n	8001c4a <mm_init+0x42>
		// Signal correct - sbrk start chunk
		led_off(LD1);
 8001c34:	2000      	movs	r0, #0
 8001c36:	f000 fdf7 	bl	8002828 <led_off>
		mem_init();
 8001c3a:	f7ff ff3d 	bl	8001ab8 <mem_init>
		extend_heap(4096/WSIZE);
 8001c3e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c42:	f7ff ffc3 	bl	8001bcc <extend_heap>
		return 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e008      	b.n	8001c5c <mm_init+0x54>
	} else {
		// Signal incorrect - Throw error
		led_off(LD1);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f000 fdec 	bl	8002828 <led_off>
		var_print("Start signal incorrect");
 8001c50:	4804      	ldr	r0, [pc, #16]	; (8001c64 <mm_init+0x5c>)
 8001c52:	f000 f9c7 	bl	8001fe4 <var_print>
		loop();
 8001c56:	f000 f9bf 	bl	8001fd8 <loop>
		return 1;
 8001c5a:	2301      	movs	r3, #1
	}
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	b003      	add	sp, #12
 8001c60:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c64:	08005228 	.word	0x08005228

08001c68 <mm_malloc>:

// Malloc: sends request and return PC's response, calls sbrk if needed
void *mm_malloc(size_t size)
{
 8001c68:	b500      	push	{lr}
 8001c6a:	b08d      	sub	sp, #52	; 0x34
 8001c6c:	9001      	str	r0, [sp, #4]
	size_t asize, extendsize;	
	mem_request req;	
	void * response;

	// Ignore 0 size
	if (size == 0) {
 8001c6e:	9b01      	ldr	r3, [sp, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <mm_malloc+0x10>
		return NULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e04f      	b.n	8001d18 <mm_malloc+0xb0>
	}

	// Send malloc request to server
	req = (mem_request){.request = MALLOC, .size = size, .ptr=NULL};
 8001c78:	9b01      	ldr	r3, [sp, #4]
 8001c7a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001c7e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001c82:	f36f 0301 	bfc	r3, #0, #2
 8001c86:	f88d 3020 	strb.w	r3, [sp, #32]
 8001c8a:	9b08      	ldr	r3, [sp, #32]
 8001c8c:	f362 039f 	bfi	r3, r2, #2, #30
 8001c90:	9308      	str	r3, [sp, #32]
 8001c92:	2300      	movs	r3, #0
 8001c94:	9309      	str	r3, [sp, #36]	; 0x24
	req_send(&req);
 8001c96:	ab08      	add	r3, sp, #32
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 f9dc 	bl	8002056 <req_send>
	req_receive(&response);
 8001c9e:	ab07      	add	r3, sp, #28
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 f9e9 	bl	8002078 <req_receive>

	if (response) {
 8001ca6:	9b07      	ldr	r3, [sp, #28]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <mm_malloc+0x48>
		return response;
 8001cac:	9b07      	ldr	r3, [sp, #28]
 8001cae:	e033      	b.n	8001d18 <mm_malloc+0xb0>
	} else {
		// Need to extend heap
		// Add overhead and alignment to block size
		if (size <= WSIZE) {
 8001cb0:	9b01      	ldr	r3, [sp, #4]
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d802      	bhi.n	8001cbc <mm_malloc+0x54>
			asize = WSIZE;
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8001cba:	e004      	b.n	8001cc6 <mm_malloc+0x5e>
		} else {
			asize = WSIZE * ((size + (WSIZE) + (WSIZE-1))/WSIZE); // Add overhead and make rounding floor
 8001cbc:	9b01      	ldr	r3, [sp, #4]
 8001cbe:	3307      	adds	r3, #7
 8001cc0:	f023 0303 	bic.w	r3, r3, #3
 8001cc4:	930b      	str	r3, [sp, #44]	; 0x2c
		}
		extendsize = MAX(asize, CHUNKSIZE);
 8001cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ccc:	bf38      	it	cc
 8001cce:	f44f 5380 	movcc.w	r3, #4096	; 0x1000
 8001cd2:	930a      	str	r3, [sp, #40]	; 0x28

		if (extend_heap(extendsize/WSIZE)) {
 8001cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff77 	bl	8001bcc <extend_heap>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d018      	beq.n	8001d16 <mm_malloc+0xae>
			// Resend malloc request
			// Send malloc request to server
			req = (mem_request){.request = MALLOC, .size = size, .ptr=NULL};
 8001ce4:	9b01      	ldr	r3, [sp, #4]
 8001ce6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001cea:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001cee:	f36f 0301 	bfc	r3, #0, #2
 8001cf2:	f88d 3020 	strb.w	r3, [sp, #32]
 8001cf6:	9b08      	ldr	r3, [sp, #32]
 8001cf8:	f362 039f 	bfi	r3, r2, #2, #30
 8001cfc:	9308      	str	r3, [sp, #32]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9309      	str	r3, [sp, #36]	; 0x24
			req_send(&req);
 8001d02:	ab08      	add	r3, sp, #32
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f9a6 	bl	8002056 <req_send>
			req_receive(&response);
 8001d0a:	ab07      	add	r3, sp, #28
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 f9b3 	bl	8002078 <req_receive>
			
			return(response);
 8001d12:	9b07      	ldr	r3, [sp, #28]
 8001d14:	e000      	b.n	8001d18 <mm_malloc+0xb0>
		} else {
			// Not enough memory
			return NULL;
 8001d16:	2300      	movs	r3, #0
		}
	}
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	b00d      	add	sp, #52	; 0x34
 8001d1c:	f85d fb04 	ldr.w	pc, [sp], #4

08001d20 <mm_free>:

// Free: Send request to pc
void mm_free(void *ptr)
{
 8001d20:	b500      	push	{lr}
 8001d22:	b085      	sub	sp, #20
 8001d24:	9001      	str	r0, [sp, #4]
	mem_request req = {.request=FREE, .size=0, .ptr=ptr};
 8001d26:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f362 0301 	bfi	r3, r2, #0, #2
 8001d30:	f88d 3008 	strb.w	r3, [sp, #8]
 8001d34:	9b02      	ldr	r3, [sp, #8]
 8001d36:	f36f 039f 	bfc	r3, #2, #30
 8001d3a:	9302      	str	r3, [sp, #8]
 8001d3c:	9b01      	ldr	r3, [sp, #4]
 8001d3e:	9303      	str	r3, [sp, #12]
	req_send(&req);
 8001d40:	ab02      	add	r3, sp, #8
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f987 	bl	8002056 <req_send>
}
 8001d48:	bf00      	nop
 8001d4a:	b005      	add	sp, #20
 8001d4c:	f85d fb04 	ldr.w	pc, [sp], #4

08001d50 <mm_realloc>:

// Realloc: Send request to PC and return response, calls malloc if needed
void *mm_realloc(void *ptr, size_t size)
{
 8001d50:	b500      	push	{lr}
 8001d52:	b08b      	sub	sp, #44	; 0x2c
 8001d54:	9001      	str	r0, [sp, #4]
 8001d56:	9100      	str	r1, [sp, #0]
    void *oldptr = ptr;
 8001d58:	9b01      	ldr	r3, [sp, #4]
 8001d5a:	9309      	str	r3, [sp, #36]	; 0x24
    void *newptr;
	mem_request req;
	void * response;

	// Special cases
	if (ptr == NULL) {
 8001d5c:	9b01      	ldr	r3, [sp, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d105      	bne.n	8001d6e <mm_realloc+0x1e>
		newptr = mm_malloc(size);
 8001d62:	9800      	ldr	r0, [sp, #0]
 8001d64:	f7ff ff80 	bl	8001c68 <mm_malloc>
 8001d68:	9008      	str	r0, [sp, #32]
		return newptr;
 8001d6a:	9b08      	ldr	r3, [sp, #32]
 8001d6c:	e032      	b.n	8001dd4 <mm_realloc+0x84>
	}
	if (size == 0) {
 8001d6e:	9b00      	ldr	r3, [sp, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d104      	bne.n	8001d7e <mm_realloc+0x2e>
		mm_free(ptr);
 8001d74:	9801      	ldr	r0, [sp, #4]
 8001d76:	f7ff ffd3 	bl	8001d20 <mm_free>
		return ptr;
 8001d7a:	9b01      	ldr	r3, [sp, #4]
 8001d7c:	e02a      	b.n	8001dd4 <mm_realloc+0x84>
	}

	// Send realloc request to server
	req = (mem_request){.request = REALLOC, .size = size, .ptr=ptr};
 8001d7e:	9b00      	ldr	r3, [sp, #0]
 8001d80:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001d84:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001d88:	2102      	movs	r1, #2
 8001d8a:	f361 0301 	bfi	r3, r1, #0, #2
 8001d8e:	f88d 3018 	strb.w	r3, [sp, #24]
 8001d92:	9b06      	ldr	r3, [sp, #24]
 8001d94:	f362 039f 	bfi	r3, r2, #2, #30
 8001d98:	9306      	str	r3, [sp, #24]
 8001d9a:	9b01      	ldr	r3, [sp, #4]
 8001d9c:	9307      	str	r3, [sp, #28]
	req_send(&req);
 8001d9e:	ab06      	add	r3, sp, #24
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 f958 	bl	8002056 <req_send>
	req_receive(&response);
 8001da6:	ab05      	add	r3, sp, #20
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 f965 	bl	8002078 <req_receive>

	if (response == oldptr) {
 8001dae:	9b05      	ldr	r3, [sp, #20]
 8001db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d101      	bne.n	8001dba <mm_realloc+0x6a>
		// Address stays the same
		return response;
 8001db6:	9b05      	ldr	r3, [sp, #20]
 8001db8:	e00c      	b.n	8001dd4 <mm_realloc+0x84>
	} else {
		// Need to copy to new location
		newptr = mm_malloc(size);
 8001dba:	9800      	ldr	r0, [sp, #0]
 8001dbc:	f7ff ff54 	bl	8001c68 <mm_malloc>
 8001dc0:	9008      	str	r0, [sp, #32]
		memcpy(newptr, oldptr, size);
 8001dc2:	9a00      	ldr	r2, [sp, #0]
 8001dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001dc6:	9808      	ldr	r0, [sp, #32]
 8001dc8:	f000 ff2c 	bl	8002c24 <memcpy>
		mm_free(oldptr);
 8001dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001dce:	f7ff ffa7 	bl	8001d20 <mm_free>
		return newptr;
 8001dd2:	9b08      	ldr	r3, [sp, #32]
	}
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	b00b      	add	sp, #44	; 0x2c
 8001dd8:	f85d fb04 	ldr.w	pc, [sp], #4

08001ddc <mm_finish>:

// Tell server to end session
void mm_finish(void) {
 8001ddc:	b500      	push	{lr}
 8001dde:	b083      	sub	sp, #12
	mem_request req = {.request=SBRK, .size=0, .ptr=0};
 8001de0:	f89d 3000 	ldrb.w	r3, [sp]
 8001de4:	f043 0303 	orr.w	r3, r3, #3
 8001de8:	f88d 3000 	strb.w	r3, [sp]
 8001dec:	9b00      	ldr	r3, [sp, #0]
 8001dee:	f36f 039f 	bfc	r3, #2, #30
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	2300      	movs	r3, #0
 8001df6:	9301      	str	r3, [sp, #4]
	req_send(&req);
 8001df8:	466b      	mov	r3, sp
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f92b 	bl	8002056 <req_send>
}
 8001e00:	bf00      	nop
 8001e02:	b003      	add	sp, #12
 8001e04:	f85d fb04 	ldr.w	pc, [sp], #4

08001e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e08:	b082      	sub	sp, #8
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0c      	blt.n	8001e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e1c:	f003 021f 	and.w	r2, r3, #31
 8001e20:	4905      	ldr	r1, [pc, #20]	; (8001e38 <__NVIC_EnableIRQ+0x30>)
 8001e22:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	2001      	movs	r0, #1
 8001e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e32:	bf00      	nop
 8001e34:	b002      	add	sp, #8
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	4603      	mov	r3, r0
 8001e40:	9100      	str	r1, [sp, #0]
 8001e42:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e46:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	db0a      	blt.n	8001e64 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4e:	9b00      	ldr	r3, [sp, #0]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	490c      	ldr	r1, [pc, #48]	; (8001e84 <__NVIC_SetPriority+0x48>)
 8001e54:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8001e58:	0112      	lsls	r2, r2, #4
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e62:	e00b      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e64:	9b00      	ldr	r3, [sp, #0]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4907      	ldr	r1, [pc, #28]	; (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	b002      	add	sp, #8
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <TIM2_IRQHandler>:
			led_toggle(LD1);
		}
	}
	*/

	t2_time++;
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <TIM2_IRQHandler+0x3c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	4a0d      	ldr	r2, [pc, #52]	; (8001ec8 <TIM2_IRQHandler+0x3c>)
 8001e94:	6013      	str	r3, [r2, #0]

	// Reset watchdog bits
	// WWDG->CR |= 0x7F;

    // clear interrupt status
    if (TIM2->DIER & 0x01) {
 8001e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00e      	beq.n	8001ec2 <TIM2_IRQHandler+0x36>
        if (TIM2->SR & 0x01) {
 8001ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <TIM2_IRQHandler+0x36>
            TIM2->SR &= ~(1U << 0);
 8001eb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	6113      	str	r3, [r2, #16]
        }
    }
}
 8001ec2:	bf00      	nop
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	200004f8 	.word	0x200004f8

08001ecc <TIM3_IRQHandler>:

// TIM3 interrupt handler - Check for stack overflow
void TIM3_IRQHandler(void)
{
 8001ecc:	b530      	push	{r4, r5, lr}
 8001ece:	b087      	sub	sp, #28
		}
	}
	*/

	// Stall if stack is overflowing to heap
	if (mem_heap_hi() > (void *)(stack_top)) {
 8001ed0:	f7ff fe6a 	bl	8001ba8 <mem_heap_hi>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	466b      	mov	r3, sp
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d910      	bls.n	8001efe <TIM3_IRQHandler+0x32>
		char err[] = "Stack overflow detected";
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <TIM3_IRQHandler+0x5c>)
 8001ede:	466c      	mov	r4, sp
 8001ee0:	461d      	mov	r5, r3
 8001ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ee6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001eea:	e884 0003 	stmia.w	r4, {r0, r1}
		var_print(err);
 8001eee:	466b      	mov	r3, sp
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 f877 	bl	8001fe4 <var_print>
		mm_finish();
 8001ef6:	f7ff ff71 	bl	8001ddc <mm_finish>
		loop();
 8001efa:	f000 f86d 	bl	8001fd8 <loop>
	}	

    // clear interrupt status
    if (TIM3->DIER & 0x01) {
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <TIM3_IRQHandler+0x60>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00b      	beq.n	8001f22 <TIM3_IRQHandler+0x56>
        if (TIM3->SR & 0x01) {
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <TIM3_IRQHandler+0x60>)
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <TIM3_IRQHandler+0x56>
            TIM3->SR &= ~(1U << 0);
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <TIM3_IRQHandler+0x60>)
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <TIM3_IRQHandler+0x60>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6113      	str	r3, [r2, #16]
        }
    }

}
 8001f22:	bf00      	nop
 8001f24:	b007      	add	sp, #28
 8001f26:	bd30      	pop	{r4, r5, pc}
 8001f28:	08005240 	.word	0x08005240
 8001f2c:	40000400 	.word	0x40000400

08001f30 <get_time>:

// Returns system time in 0.1 ms
size_t get_time(void) {
	return t2_time;
 8001f30:	4b01      	ldr	r3, [pc, #4]	; (8001f38 <get_time+0x8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	4770      	bx	lr
 8001f38:	200004f8 	.word	0x200004f8

08001f3c <timer_init>:

// Initialize timers
void timer_init(void)
{
 8001f3c:	b508      	push	{r3, lr}
	// TIM2 - Keeps track of system time
    // Enable TIM2 clock (bit0)
    RCC->APB1ENR1 |= (1 << 0);
 8001f3e:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <timer_init+0x94>)
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	4a23      	ldr	r2, [pc, #140]	; (8001fd0 <timer_init+0x94>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6593      	str	r3, [r2, #88]	; 0x58
	// Formula: Clock speed = (sysclk/AHB_prescaler/APB1_prescaler)/(PSC+1)
	// Multiply clock speed by 2 if APB_prescaler is not 1
	// For STM32L4S5: 120M/1/2*2 = 120M, 120M/(11999+1) = 10 khz clock speed
    TIM2->PSC = 11999;
 8001f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f4e:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
	// Set auto reload value to 10 to give 1 ms timer interrupts
    TIM2->ARR = 10;
 8001f54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f58:	220a      	movs	r2, #10
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c
    // Update Interrupt Enable
    TIM2->DIER |= (1 << 0);
 8001f5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(TIM2_IRQn, 2); // Priority level 2
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	201c      	movs	r0, #28
 8001f70:	f7ff ff64 	bl	8001e3c <__NVIC_SetPriority>
    // enable TIM2 IRQ from NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 8001f74:	201c      	movs	r0, #28
 8001f76:	f7ff ff47 	bl	8001e08 <__NVIC_EnableIRQ>
	// Enable TIM2 Module
	TIM2->CR1 |= (1<<0);
 8001f7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6013      	str	r3, [r2, #0]

	// TIM3 - Checks for stack overflow
    
	// Enable TIM3 clock (bit1)
    RCC->APB1ENR1 |= (1 << 1);
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <timer_init+0x94>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	4a10      	ldr	r2, [pc, #64]	; (8001fd0 <timer_init+0x94>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	6593      	str	r3, [r2, #88]	; 0x58
	// For STM32L4S5: 120M/1/2*2 = 120M, 120M/(11999+1) = 10 khz clock speed
    TIM3->PSC = 11999;
 8001f96:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <timer_init+0x98>)
 8001f98:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001f9c:	629a      	str	r2, [r3, #40]	; 0x28
	// Set auto reload value to 100 to give 10 ms timer interrupts
    TIM3->ARR = 100;
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <timer_init+0x98>)
 8001fa0:	2264      	movs	r2, #100	; 0x64
 8001fa2:	62da      	str	r2, [r3, #44]	; 0x2c
    // Update Interrupt Enable
    TIM3->DIER |= (1 << 0);
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <timer_init+0x98>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <timer_init+0x98>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(TIM3_IRQn, 3);
 8001fb0:	2103      	movs	r1, #3
 8001fb2:	201d      	movs	r0, #29
 8001fb4:	f7ff ff42 	bl	8001e3c <__NVIC_SetPriority>
    // enable TIM3 IRQ from NVIC
    NVIC_EnableIRQ(TIM3_IRQn);
 8001fb8:	201d      	movs	r0, #29
 8001fba:	f7ff ff25 	bl	8001e08 <__NVIC_EnableIRQ>
    // Enable Timer 3 module (CEN, bit0)
    TIM3->CR1 |= (1 << 0);
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <timer_init+0x98>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <timer_init+0x98>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6013      	str	r3, [r2, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	bd08      	pop	{r3, pc}
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40000400 	.word	0x40000400

08001fd8 <loop>:

static char output_str[MAXLINE*2];
size_t output_offset=0;
void * sp_reset = (void *)0x20005000;

void loop() {
 8001fd8:	b508      	push	{r3, lr}
	led_on(LD1);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f000 fc04 	bl	80027e8 <led_on>
	while(1) {}
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <loop+0x8>

08001fe4 <var_print>:
}

// Append printed output to output_str
void var_print(char * str) {
 8001fe4:	b500      	push	{lr}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	9001      	str	r0, [sp, #4]
	if (output_offset + strlen(str) <= MAXLINE*2) {
 8001fea:	9801      	ldr	r0, [sp, #4]
 8001fec:	f7fe f8e8 	bl	80001c0 <strlen>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <var_print+0x2c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ffc:	d804      	bhi.n	8002008 <var_print+0x24>
		strcat(output_str, str);
 8001ffe:	9901      	ldr	r1, [sp, #4]
 8002000:	4804      	ldr	r0, [pc, #16]	; (8002014 <var_print+0x30>)
 8002002:	f001 f8b2 	bl	800316a <strcat>
	} else {
		while(1){}
	}
}
 8002006:	e000      	b.n	800200a <var_print+0x26>
		while(1){}
 8002008:	e7fe      	b.n	8002008 <var_print+0x24>
}
 800200a:	b003      	add	sp, #12
 800200c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002010:	20000cfc 	.word	0x20000cfc
 8002014:	200004fc 	.word	0x200004fc

08002018 <send>:

// Temporary buffer for tx dma optimization
static char tx_buffer[16] = {0};

// Send size bytes at data pointer, using method defined by USE_DMA macro
static void send(void * data, size_t size) {
 8002018:	b500      	push	{lr}
 800201a:	b083      	sub	sp, #12
 800201c:	9001      	str	r0, [sp, #4]
 800201e:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_tx_wait();
		memcpy(tx_buffer, data, size);
		uart_tx_start(tx_buffer, size);
	} else {
		uart_send(data, size);
 8002020:	9900      	ldr	r1, [sp, #0]
 8002022:	9801      	ldr	r0, [sp, #4]
 8002024:	f000 f83a 	bl	800209c <uart_send>
	}
}
 8002028:	bf00      	nop
 800202a:	b003      	add	sp, #12
 800202c:	f85d fb04 	ldr.w	pc, [sp], #4

08002030 <receive>:

// Receive size bytes at buffer pointer, using method defined by USE_DMA macro
static void receive(void * buffer, size_t size) {
 8002030:	b500      	push	{lr}
 8002032:	b083      	sub	sp, #12
 8002034:	9001      	str	r0, [sp, #4]
 8002036:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_tx_wait();
		uart_rx_start(buffer, size);
		uart_rx_wait();
	} else {
		uart_receive(buffer, size);
 8002038:	9900      	ldr	r1, [sp, #0]
 800203a:	9801      	ldr	r0, [sp, #4]
 800203c:	f000 f856 	bl	80020ec <uart_receive>
	}
}
 8002040:	bf00      	nop
 8002042:	b003      	add	sp, #12
 8002044:	f85d fb04 	ldr.w	pc, [sp], #4

08002048 <mem_req_setup>:

// Initialize request communication
void mem_req_setup(void) {
 8002048:	b508      	push	{r3, lr}
	uart_init();
 800204a:	f000 f913 	bl	8002274 <uart_init>
	uart_dma_init();
 800204e:	f000 f94f 	bl	80022f0 <uart_dma_init>
}
 8002052:	bf00      	nop
 8002054:	bd08      	pop	{r3, pc}

08002056 <req_send>:

// Send request
void req_send(mem_request * buffer) {
 8002056:	b500      	push	{lr}
 8002058:	b083      	sub	sp, #12
 800205a:	9001      	str	r0, [sp, #4]
	led_on(LD2);
 800205c:	2001      	movs	r0, #1
 800205e:	f000 fbc3 	bl	80027e8 <led_on>
	send(buffer, sizeof(mem_request));
 8002062:	2108      	movs	r1, #8
 8002064:	9801      	ldr	r0, [sp, #4]
 8002066:	f7ff ffd7 	bl	8002018 <send>
	led_off(LD2);
 800206a:	2001      	movs	r0, #1
 800206c:	f000 fbdc 	bl	8002828 <led_off>
}
 8002070:	bf00      	nop
 8002072:	b003      	add	sp, #12
 8002074:	f85d fb04 	ldr.w	pc, [sp], #4

08002078 <req_receive>:

// Wait for response
void req_receive(void ** buffer) {
 8002078:	b500      	push	{lr}
 800207a:	b083      	sub	sp, #12
 800207c:	9001      	str	r0, [sp, #4]
	led_on(LD2);
 800207e:	2001      	movs	r0, #1
 8002080:	f000 fbb2 	bl	80027e8 <led_on>
	receive(buffer, sizeof(void *));
 8002084:	2104      	movs	r1, #4
 8002086:	9801      	ldr	r0, [sp, #4]
 8002088:	f7ff ffd2 	bl	8002030 <receive>
	led_off(LD2);
 800208c:	2001      	movs	r0, #1
 800208e:	f000 fbcb 	bl	8002828 <led_off>
}
 8002092:	bf00      	nop
 8002094:	b003      	add	sp, #12
 8002096:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800209c <uart_send>:
#include "uart.h"

char msg_buffer[BUFFERSIZE] = {0};

// Send content of pointer through uart
void uart_send(void * data, size_t size) {
 800209c:	b084      	sub	sp, #16
 800209e:	9001      	str	r0, [sp, #4]
 80020a0:	9100      	str	r1, [sp, #0]
	for (size_t i=0; i<size; i++){
 80020a2:	2300      	movs	r3, #0
 80020a4:	9303      	str	r3, [sp, #12]
 80020a6:	e00f      	b.n	80020c8 <uart_send+0x2c>
		// Wait until TXE bit is set
		while(!(UART4->ISR & (1 << 7)));
 80020a8:	bf00      	nop
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <uart_send+0x4c>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f9      	beq.n	80020aa <uart_send+0xe>
		// Send character
		UART4->TDR = ((char *)data)[i];
 80020b6:	9a01      	ldr	r2, [sp, #4]
 80020b8:	9b03      	ldr	r3, [sp, #12]
 80020ba:	4413      	add	r3, r2
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <uart_send+0x4c>)
 80020c0:	851a      	strh	r2, [r3, #40]	; 0x28
	for (size_t i=0; i<size; i++){
 80020c2:	9b03      	ldr	r3, [sp, #12]
 80020c4:	3301      	adds	r3, #1
 80020c6:	9303      	str	r3, [sp, #12]
 80020c8:	9a03      	ldr	r2, [sp, #12]
 80020ca:	9b00      	ldr	r3, [sp, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d3eb      	bcc.n	80020a8 <uart_send+0xc>
	}
	// Wait for character transmit complete - TC bit
	while(!(UART4->ISR & (1 << 6))) {};
 80020d0:	bf00      	nop
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <uart_send+0x4c>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f9      	beq.n	80020d2 <uart_send+0x36>
}
 80020de:	bf00      	nop
 80020e0:	bf00      	nop
 80020e2:	b004      	add	sp, #16
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40004c00 	.word	0x40004c00

080020ec <uart_receive>:

// Receive size bytes of content from uart and write it to buffer
void uart_receive(void * buffer, size_t size)  {
 80020ec:	b084      	sub	sp, #16
 80020ee:	9001      	str	r0, [sp, #4]
 80020f0:	9100      	str	r1, [sp, #0]
	for (size_t i=0; i < size; i++) {
 80020f2:	2300      	movs	r3, #0
 80020f4:	9303      	str	r3, [sp, #12]
 80020f6:	e011      	b.n	800211c <uart_receive+0x30>
		// Wait until RXNE bit is set
		while(!(UART4->ISR & (1 << 5)));
 80020f8:	bf00      	nop
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <uart_receive+0x40>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f9      	beq.n	80020fa <uart_receive+0xe>
		// Receive character
		((char *)buffer)[i] = UART4->RDR;
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <uart_receive+0x40>)
 8002108:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800210a:	b299      	uxth	r1, r3
 800210c:	9a01      	ldr	r2, [sp, #4]
 800210e:	9b03      	ldr	r3, [sp, #12]
 8002110:	4413      	add	r3, r2
 8002112:	b2ca      	uxtb	r2, r1
 8002114:	701a      	strb	r2, [r3, #0]
	for (size_t i=0; i < size; i++) {
 8002116:	9b03      	ldr	r3, [sp, #12]
 8002118:	3301      	adds	r3, #1
 800211a:	9303      	str	r3, [sp, #12]
 800211c:	9a03      	ldr	r2, [sp, #12]
 800211e:	9b00      	ldr	r3, [sp, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d3e9      	bcc.n	80020f8 <uart_receive+0xc>
	}

}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	b004      	add	sp, #16
 800212a:	4770      	bx	lr
 800212c:	40004c00 	.word	0x40004c00

08002130 <uart_pin_setup>:

// Setup GPIO A2 and A3 pins for UART
static void uart_pin_setup(void) {
    // Enable GPIOA clock, bit 0 on AHB2ENR
    RCC->AHB2ENR |= (1 << 0);
 8002130:	4b17      	ldr	r3, [pc, #92]	; (8002190 <uart_pin_setup+0x60>)
 8002132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002134:	4a16      	ldr	r2, [pc, #88]	; (8002190 <uart_pin_setup+0x60>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	64d3      	str	r3, [r2, #76]	; 0x4c

    // Set pin modes as alternate mode 7 (PA0 and PA1)
    // UART4 TX and RX pins are PA0 (D1) and PA1(D0) respectively 
    GPIOA->MODER &= ~(0xFU << 0);
 800213c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002146:	f023 030f 	bic.w	r3, r3, #15
 800214a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xAU << 0);
 800214c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002156:	f043 030a 	orr.w	r3, r3, #10
 800215a:	6013      	str	r3, [r2, #0]

    // Set pin modes as high speed
    GPIOA->OSPEEDR |= 0x0000000F;
 800215c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002166:	f043 030f 	orr.w	r3, r3, #15
 800216a:	6093      	str	r3, [r2, #8]

    // Choose AF8 for UART4 in Alternate Function registers
    GPIOA->AFR[0] |= (0x8U << 0); // for pin A0
 800216c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002176:	f043 0308 	orr.w	r3, r3, #8
 800217a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x8U << 4); // for pin A1
 800217c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800218a:	6213      	str	r3, [r2, #32]
}
 800218c:	bf00      	nop
 800218e:	4770      	bx	lr
 8002190:	40021000 	.word	0x40021000

08002194 <uart_enable>:

// Initialize UART 4
static void uart_enable(void) {
    // enable UART4 clock
    RCC->APB1ENR1 |= (1 << 19);
 8002194:	4b26      	ldr	r3, [pc, #152]	; (8002230 <uart_enable+0x9c>)
 8002196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002198:	4a25      	ldr	r2, [pc, #148]	; (8002230 <uart_enable+0x9c>)
 800219a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800219e:	6593      	str	r3, [r2, #88]	; 0x58

	// Select Sysclk as UART4 Source
	// RCC->CCIPR |= (1U << 6);

    // Disable uart4 - UE, bit 0
    UART4->CR1 &= ~(1 << 0);
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <uart_enable+0xa0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a23      	ldr	r2, [pc, #140]	; (8002234 <uart_enable+0xa0>)
 80021a6:	f023 0301 	bic.w	r3, r3, #1
 80021aa:	6013      	str	r3, [r2, #0]

	// Disable FIFO mode
	UART4->CR1 &= ~(1<<20);
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <uart_enable+0xa0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a20      	ldr	r2, [pc, #128]	; (8002234 <uart_enable+0xa0>)
 80021b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80021b6:	6013      	str	r3, [r2, #0]

	// Set word size to 8
	UART4->CR1 &= ~(1U<<12 | 1U<<28);
 80021b8:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <uart_enable+0xa0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <uart_enable+0xa0>)
 80021be:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80021c2:	6013      	str	r3, [r2, #0]

	// OVER8 = 0
	UART4->CR1 &= ~(1<<15);
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <uart_enable+0xa0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1a      	ldr	r2, [pc, #104]	; (8002234 <uart_enable+0xa0>)
 80021ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021ce:	6013      	str	r3, [r2, #0]

	// For STM32L4S5: Sysclk = 120 Mhz (Sysclk/2), Baudrate = 115200, OVER8 = 0
	// USARTDIV = (1+OVER8) * fCK / baud
	// USARTDIV = 120Mhz / 115200 = 1041.67 ~ 1042
    UART4->BRR = 1042U;
 80021d0:	4b18      	ldr	r3, [pc, #96]	; (8002234 <uart_enable+0xa0>)
 80021d2:	f240 4212 	movw	r2, #1042	; 0x412
 80021d6:	60da      	str	r2, [r3, #12]

	// Set stop bits to 1
	UART4->CR2 &= ~(0xF << 12);
 80021d8:	4b16      	ldr	r3, [pc, #88]	; (8002234 <uart_enable+0xa0>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4a15      	ldr	r2, [pc, #84]	; (8002234 <uart_enable+0xa0>)
 80021de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021e2:	6053      	str	r3, [r2, #4]

	// Disable parity
	UART4->CR1 &= ~(1<<10);
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <uart_enable+0xa0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a12      	ldr	r2, [pc, #72]	; (8002234 <uart_enable+0xa0>)
 80021ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021ee:	6013      	str	r3, [r2, #0]

	// Set Auto Baud detection to 0x55 frame detection
	UART4->CR2 |= (3U<<21);
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <uart_enable+0xa0>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <uart_enable+0xa0>)
 80021f6:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 80021fa:	6053      	str	r3, [r2, #4]
	
	// Enable Auto Baud detection
	UART4->CR2 |= (1<<20);
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <uart_enable+0xa0>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <uart_enable+0xa0>)
 8002202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002206:	6053      	str	r3, [r2, #4]

    // UART4 TX enable, TE bit 3
    UART4->CR1 |= (1 << 3);
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <uart_enable+0xa0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a09      	ldr	r2, [pc, #36]	; (8002234 <uart_enable+0xa0>)
 800220e:	f043 0308 	orr.w	r3, r3, #8
 8002212:	6013      	str	r3, [r2, #0]

    // UART4 RX enable, RE bit 2
    UART4->CR1 |= (1 << 2);
 8002214:	4b07      	ldr	r3, [pc, #28]	; (8002234 <uart_enable+0xa0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a06      	ldr	r2, [pc, #24]	; (8002234 <uart_enable+0xa0>)
 800221a:	f043 0304 	orr.w	r3, r3, #4
 800221e:	6013      	str	r3, [r2, #0]

    // Enable uart4 - UE, bit 0
    UART4->CR1 |= (1 << 0);
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <uart_enable+0xa0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a03      	ldr	r2, [pc, #12]	; (8002234 <uart_enable+0xa0>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6013      	str	r3, [r2, #0]
}	
 800222c:	bf00      	nop
 800222e:	4770      	bx	lr
 8002230:	40021000 	.word	0x40021000
 8002234:	40004c00 	.word	0x40004c00

08002238 <uart_baud_gen>:

void uart_baud_gen(void) {
 8002238:	b500      	push	{lr}
 800223a:	b085      	sub	sp, #20
	char temp[8] = {0};
 800223c:	2300      	movs	r3, #0
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	2300      	movs	r3, #0
 8002242:	9302      	str	r3, [sp, #8]
	volatile uint32_t * brr = &(UART4->BRR);
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <uart_baud_gen+0x34>)
 8002246:	9303      	str	r3, [sp, #12]
	uart_receive(temp, 1);
 8002248:	ab01      	add	r3, sp, #4
 800224a:	2101      	movs	r1, #1
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff4d 	bl	80020ec <uart_receive>
	// Wait for auto baud generation to complete- ABRF bit
	while(!(UART4->ISR & (1 << 15))) {};
 8002252:	bf00      	nop
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <uart_baud_gen+0x38>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f9      	beq.n	8002254 <uart_baud_gen+0x1c>
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	b005      	add	sp, #20
 8002266:	f85d fb04 	ldr.w	pc, [sp], #4
 800226a:	bf00      	nop
 800226c:	40004c0c 	.word	0x40004c0c
 8002270:	40004c00 	.word	0x40004c00

08002274 <uart_init>:

void uart_init(void)
{
 8002274:	b508      	push	{r3, lr}
	uart_pin_setup();
 8002276:	f7ff ff5b 	bl	8002130 <uart_pin_setup>
	uart_enable();
 800227a:	f7ff ff8b 	bl	8002194 <uart_enable>
	uart_baud_gen();
 800227e:	f7ff ffdb 	bl	8002238 <uart_baud_gen>
}
 8002282:	bf00      	nop
 8002284:	bd08      	pop	{r3, pc}
	...

08002288 <DMA1_Channel2_IRQHandler>:

// UART reception finish interrupt
void DMA1_Channel2_IRQHandler(void)
{
    // clear stream receive complete interrupt - bit11 for stream 5
    if (DMA1->ISR & DMA_ISR_TCIF2) {
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <DMA1_Channel2_IRQHandler+0x24>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <DMA1_Channel2_IRQHandler+0x1e>
        // clear interrupt
        DMA1->IFCR |= DMA_IFCR_CTCIF2;
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <DMA1_Channel2_IRQHandler+0x24>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a04      	ldr	r2, [pc, #16]	; (80022ac <DMA1_Channel2_IRQHandler+0x24>)
 800229a:	f043 0320 	orr.w	r3, r3, #32
 800229e:	6053      	str	r3, [r2, #4]
		receiving = 0;
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <DMA1_Channel2_IRQHandler+0x28>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
		// Disable receive DMA
		// USART2->CR3 &= ~USART_CR3_DMAR;
    }
}
 80022a6:	bf00      	nop
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40020000 	.word	0x40020000
 80022b0:	20000d00 	.word	0x20000d00

080022b4 <DMA1_Channel1_IRQHandler>:

// UART transmission finish interrupt
void DMA1_Channel1_IRQHandler(void)
{
	// Wait for character transmit complete - TC bit
	while(!(UART4->ISR & (1 << 6))) {};
 80022b4:	bf00      	nop
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <DMA1_Channel1_IRQHandler+0x30>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f9      	beq.n	80022b6 <DMA1_Channel1_IRQHandler+0x2>
    // Clear stream transfer complete interrupt
    if (DMA1->ISR & DMA_ISR_TCIF1) {
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <DMA1_Channel1_IRQHandler+0x34>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d008      	beq.n	80022e0 <DMA1_Channel1_IRQHandler+0x2c>
        // clear interrupt
        DMA1->IFCR |= DMA_IFCR_CTCIF1;
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <DMA1_Channel1_IRQHandler+0x34>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <DMA1_Channel1_IRQHandler+0x34>)
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	6053      	str	r3, [r2, #4]
		transmitting = 0;
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <DMA1_Channel1_IRQHandler+0x38>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
    }
}
 80022e0:	bf00      	nop
 80022e2:	4770      	bx	lr
 80022e4:	40004c00 	.word	0x40004c00
 80022e8:	40020000 	.word	0x40020000
 80022ec:	20000d04 	.word	0x20000d04

080022f0 <uart_dma_init>:

// Setup UART DMA
void uart_dma_init(void) {
	// Enable transmit DMA
	UART4->CR3 |= (1U<<7);
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <uart_dma_init+0x34>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <uart_dma_init+0x34>)
 80022f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022fa:	6093      	str	r3, [r2, #8]
	// Enable receive DMA
	UART4->CR3 |= (1U<<6);
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <uart_dma_init+0x34>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4a08      	ldr	r2, [pc, #32]	; (8002324 <uart_dma_init+0x34>)
 8002302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002306:	6093      	str	r3, [r2, #8]
	// Enable DMA1 clock
	RCC->AHB1ENR |= (1U<<0);
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <uart_dma_init+0x38>)
 800230a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <uart_dma_init+0x38>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6493      	str	r3, [r2, #72]	; 0x48
	// Enable DMAMUX clock
	RCC->AHB1ENR |= (1U<<2);
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <uart_dma_init+0x38>)
 8002316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002318:	4a03      	ldr	r2, [pc, #12]	; (8002328 <uart_dma_init+0x38>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	6493      	str	r3, [r2, #72]	; 0x48
}
 8002320:	bf00      	nop
 8002322:	4770      	bx	lr
 8002324:	40004c00 	.word	0x40004c00
 8002328:	40021000 	.word	0x40021000

0800232c <SVC_Handler>:
#include "mcu_mm.h"
#include "mcu_mpu.h"
#include "mcu_timer.h"

void SVC_Handler(void) {
	__asm (
 800232c:	f01e 0f04 	tst.w	lr, #4
 8002330:	bf0c      	ite	eq
 8002332:	f3ef 8008 	mrseq	r0, MSP
 8002336:	f3ef 8009 	mrsne	r0, PSP
 800233a:	f000 b803 	b.w	8002344 <SVC_Handler_Main>
			"ITE EQ\n"
			"MRSEQ r0, MSP\n"
			"MRSNE r0, PSP\n" // Check to use msp or psp
			"B SVC_Handler_Main\n" // Go to the C handler function
	);
}
 800233e:	bf00      	nop
 8002340:	4770      	bx	lr
	...

08002344 <SVC_Handler_Main>:

void SVC_Handler_Main(unsigned int * svc_args) {
 8002344:	b500      	push	{lr}
 8002346:	b09d      	sub	sp, #116	; 0x74
 8002348:	9001      	str	r0, [sp, #4]
	// Stack frame contents: r0-r3, LR, PC, and xPSR
	// Correspond with svc_args[0 to 7]
	// svc_args array contains arguments at start and return values at end, in order

	uint32_t svc_number = ((char *)svc_args[6])[-2];
 800234a:	9b01      	ldr	r3, [sp, #4]
 800234c:	3318      	adds	r3, #24
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3b02      	subs	r3, #2
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	931b      	str	r3, [sp, #108]	; 0x6c
	switch(svc_number) {
 8002356:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002358:	2b05      	cmp	r3, #5
 800235a:	f200 80e2 	bhi.w	8002522 <SVC_Handler_Main+0x1de>
 800235e:	a201      	add	r2, pc, #4	; (adr r2, 8002364 <SVC_Handler_Main+0x20>)
 8002360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002364:	0800237d 	.word	0x0800237d
 8002368:	080023bb 	.word	0x080023bb
 800236c:	08002407 	.word	0x08002407
 8002370:	0800244b 	.word	0x0800244b
 8002374:	080024a1 	.word	0x080024a1
 8002378:	080024df 	.word	0x080024df
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800237c:	f3ef 8314 	mrs	r3, CONTROL
 8002380:	9317      	str	r3, [sp, #92]	; 0x5c
  return(result);
 8002382:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		case 0: // mm_init
			__set_CONTROL(__get_CONTROL() & ~CONTROL_nPRIV_Msk); // Enable privileged mode
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	9318      	str	r3, [sp, #96]	; 0x60
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800238a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800238c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8002390:	f3bf 8f6f 	isb	sy
}
 8002394:	bf00      	nop
  __ISB();
}
 8002396:	bf00      	nop
			mm_init();
 8002398:	f7ff fc36 	bl	8001c08 <mm_init>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800239c:	f3ef 8314 	mrs	r3, CONTROL
 80023a0:	9319      	str	r3, [sp, #100]	; 0x64
  return(result);
 80023a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
			__set_CONTROL(__get_CONTROL() | CONTROL_nPRIV_Msk); // Disable privileged mode
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	931a      	str	r3, [sp, #104]	; 0x68
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80023aa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80023ac:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80023b0:	f3bf 8f6f 	isb	sy
}
 80023b4:	bf00      	nop
}
 80023b6:	bf00      	nop
			break;
 80023b8:	e0b4      	b.n	8002524 <SVC_Handler_Main+0x1e0>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80023ba:	f3ef 8314 	mrs	r3, CONTROL
 80023be:	9313      	str	r3, [sp, #76]	; 0x4c
  return(result);
 80023c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		case 1: // mm_malloc
			__set_CONTROL(__get_CONTROL() & ~CONTROL_nPRIV_Msk);
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	9314      	str	r3, [sp, #80]	; 0x50
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80023c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80023ca:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80023ce:	f3bf 8f6f 	isb	sy
}
 80023d2:	bf00      	nop
}
 80023d4:	bf00      	nop
			svc_args[0] = (uint32_t)mm_malloc(svc_args[0]);
 80023d6:	9b01      	ldr	r3, [sp, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fc44 	bl	8001c68 <mm_malloc>
 80023e0:	4603      	mov	r3, r0
 80023e2:	461a      	mov	r2, r3
 80023e4:	9b01      	ldr	r3, [sp, #4]
 80023e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80023e8:	f3ef 8314 	mrs	r3, CONTROL
 80023ec:	9315      	str	r3, [sp, #84]	; 0x54
  return(result);
 80023ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
			__set_CONTROL(__get_CONTROL() | CONTROL_nPRIV_Msk);
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	9316      	str	r3, [sp, #88]	; 0x58
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80023f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80023f8:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80023fc:	f3bf 8f6f 	isb	sy
}
 8002400:	bf00      	nop
}
 8002402:	bf00      	nop
			break;
 8002404:	e08e      	b.n	8002524 <SVC_Handler_Main+0x1e0>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002406:	f3ef 8314 	mrs	r3, CONTROL
 800240a:	930f      	str	r3, [sp, #60]	; 0x3c
  return(result);
 800240c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		case 2: // mm_free
			__set_CONTROL(__get_CONTROL() & ~CONTROL_nPRIV_Msk);
 800240e:	f023 0301 	bic.w	r3, r3, #1
 8002412:	9310      	str	r3, [sp, #64]	; 0x40
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8002414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002416:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 800241a:	f3bf 8f6f 	isb	sy
}
 800241e:	bf00      	nop
}
 8002420:	bf00      	nop
			mm_free((void *)(svc_args[0]));
 8002422:	9b01      	ldr	r3, [sp, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fc7a 	bl	8001d20 <mm_free>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800242c:	f3ef 8314 	mrs	r3, CONTROL
 8002430:	9311      	str	r3, [sp, #68]	; 0x44
  return(result);
 8002432:	9b11      	ldr	r3, [sp, #68]	; 0x44
			__set_CONTROL(__get_CONTROL() | CONTROL_nPRIV_Msk);
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	9312      	str	r3, [sp, #72]	; 0x48
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800243a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800243c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8002440:	f3bf 8f6f 	isb	sy
}
 8002444:	bf00      	nop
}
 8002446:	bf00      	nop
			break;
 8002448:	e06c      	b.n	8002524 <SVC_Handler_Main+0x1e0>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800244a:	f3ef 8314 	mrs	r3, CONTROL
 800244e:	930b      	str	r3, [sp, #44]	; 0x2c
  return(result);
 8002450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		case 3: // mm_realloc
			__set_CONTROL(__get_CONTROL() & ~CONTROL_nPRIV_Msk);
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	930c      	str	r3, [sp, #48]	; 0x30
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8002458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800245a:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 800245e:	f3bf 8f6f 	isb	sy
}
 8002462:	bf00      	nop
}
 8002464:	bf00      	nop
			svc_args[0] = (uint32_t)mm_realloc((void *)svc_args[0], svc_args[1]);
 8002466:	9b01      	ldr	r3, [sp, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	9b01      	ldr	r3, [sp, #4]
 800246e:	3304      	adds	r3, #4
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4619      	mov	r1, r3
 8002474:	4610      	mov	r0, r2
 8002476:	f7ff fc6b 	bl	8001d50 <mm_realloc>
 800247a:	4603      	mov	r3, r0
 800247c:	461a      	mov	r2, r3
 800247e:	9b01      	ldr	r3, [sp, #4]
 8002480:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002482:	f3ef 8314 	mrs	r3, CONTROL
 8002486:	930d      	str	r3, [sp, #52]	; 0x34
  return(result);
 8002488:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			__set_CONTROL(__get_CONTROL() | CONTROL_nPRIV_Msk);
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	930e      	str	r3, [sp, #56]	; 0x38
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8002490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002492:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8002496:	f3bf 8f6f 	isb	sy
}
 800249a:	bf00      	nop
}
 800249c:	bf00      	nop
			break;
 800249e:	e041      	b.n	8002524 <SVC_Handler_Main+0x1e0>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80024a0:	f3ef 8314 	mrs	r3, CONTROL
 80024a4:	9307      	str	r3, [sp, #28]
  return(result);
 80024a6:	9b07      	ldr	r3, [sp, #28]
		case 4: // mm_finish
			__set_CONTROL(__get_CONTROL() & ~CONTROL_nPRIV_Msk);
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	9308      	str	r3, [sp, #32]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80024ae:	9b08      	ldr	r3, [sp, #32]
 80024b0:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80024b4:	f3bf 8f6f 	isb	sy
}
 80024b8:	bf00      	nop
}
 80024ba:	bf00      	nop
			mm_finish();
 80024bc:	f7ff fc8e 	bl	8001ddc <mm_finish>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80024c0:	f3ef 8314 	mrs	r3, CONTROL
 80024c4:	9309      	str	r3, [sp, #36]	; 0x24
  return(result);
 80024c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
			__set_CONTROL(__get_CONTROL() | CONTROL_nPRIV_Msk);
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	930a      	str	r3, [sp, #40]	; 0x28
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80024ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024d0:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80024d4:	f3bf 8f6f 	isb	sy
}
 80024d8:	bf00      	nop
}
 80024da:	bf00      	nop
			break;
 80024dc:	e022      	b.n	8002524 <SVC_Handler_Main+0x1e0>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80024de:	f3ef 8314 	mrs	r3, CONTROL
 80024e2:	9303      	str	r3, [sp, #12]
  return(result);
 80024e4:	9b03      	ldr	r3, [sp, #12]
		case 5: // get_time
			__set_CONTROL(__get_CONTROL() & ~CONTROL_nPRIV_Msk);
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	9304      	str	r3, [sp, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80024ec:	9b04      	ldr	r3, [sp, #16]
 80024ee:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80024f2:	f3bf 8f6f 	isb	sy
}
 80024f6:	bf00      	nop
}
 80024f8:	bf00      	nop
			svc_args[0] = get_time();
 80024fa:	f7ff fd19 	bl	8001f30 <get_time>
 80024fe:	4602      	mov	r2, r0
 8002500:	9b01      	ldr	r3, [sp, #4]
 8002502:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002504:	f3ef 8314 	mrs	r3, CONTROL
 8002508:	9305      	str	r3, [sp, #20]
  return(result);
 800250a:	9b05      	ldr	r3, [sp, #20]
			__set_CONTROL(__get_CONTROL() | CONTROL_nPRIV_Msk);
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	9306      	str	r3, [sp, #24]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8002512:	9b06      	ldr	r3, [sp, #24]
 8002514:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8002518:	f3bf 8f6f 	isb	sy
}
 800251c:	bf00      	nop
}
 800251e:	bf00      	nop
			break;
 8002520:	e000      	b.n	8002524 <SVC_Handler_Main+0x1e0>
		default:
			break;
 8002522:	bf00      	nop
	}
}
 8002524:	bf00      	nop
 8002526:	b01d      	add	sp, #116	; 0x74
 8002528:	f85d fb04 	ldr.w	pc, [sp], #4

0800252c <sys_mm_init>:

// Initialize malloc library
void sys_mm_init(void) {
	asm volatile ("svc #0");
 800252c:	df00      	svc	0
}
 800252e:	bf00      	nop
 8002530:	4770      	bx	lr

08002532 <sys_malloc>:

// Malloc size bytes of memory
void * sys_malloc(size_t size) {
 8002532:	b082      	sub	sp, #8
 8002534:	9001      	str	r0, [sp, #4]
	asm volatile ("svc #1");
 8002536:	df01      	svc	1
	register uint32_t * ret_val asm("r0");
	return (void *)ret_val;
 8002538:	4603      	mov	r3, r0
}
 800253a:	4618      	mov	r0, r3
 800253c:	b002      	add	sp, #8
 800253e:	4770      	bx	lr

08002540 <sys_free>:

// Free memory region at pointer
void sys_free(void * ptr) {
 8002540:	b082      	sub	sp, #8
 8002542:	9001      	str	r0, [sp, #4]
	asm volatile ("svc #2");
 8002544:	df02      	svc	2
}
 8002546:	bf00      	nop
 8002548:	b002      	add	sp, #8
 800254a:	4770      	bx	lr

0800254c <sys_realloc>:

// Reallocate ptr to a size byte region and return the new pointer
void * sys_realloc(void * ptr, size_t size) {
 800254c:	b082      	sub	sp, #8
 800254e:	9001      	str	r0, [sp, #4]
 8002550:	9100      	str	r1, [sp, #0]
	asm volatile ("svc #3");
 8002552:	df03      	svc	3
	register uint32_t * ret_val asm("r0");
	return (void *) ret_val;
 8002554:	4603      	mov	r3, r0
}
 8002556:	4618      	mov	r0, r3
 8002558:	b002      	add	sp, #8
 800255a:	4770      	bx	lr

0800255c <sys_mm_finish>:

// End communication session with server
void sys_mm_finish(void) {
	asm volatile ("svc #4");
 800255c:	df04      	svc	4
}
 800255e:	bf00      	nop
 8002560:	4770      	bx	lr

08002562 <sys_get_time>:

// Return current time in ms
size_t sys_get_time(void) {
	asm volatile ("svc #5");
 8002562:	df05      	svc	5
	register uint32_t * ret_val asm("r0");
	return (size_t) ret_val;
 8002564:	4603      	mov	r3, r0
}
 8002566:	4618      	mov	r0, r3
 8002568:	4770      	bx	lr
	...

0800256c <proc_update>:
#include "mcu_mpu.h"
#include "memlib.h"

// Update mpu settings with new heap top
void proc_update(void) {
 800256c:	b510      	push	{r4, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
	uint32_t mpu_cfg_rbar[4] = {
 8002570:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002574:	9304      	str	r3, [sp, #16]
 8002576:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800257a:	9305      	str	r3, [sp, #20]
 800257c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002580:	9306      	str	r3, [sp, #24]
		// SRAM - Region 1
		0x20000000,
		// Peripherals - Region 2
		PERIPH_BASE,
		// Heap top plus 32 bytes ceiling aligned - Region 3
		(((uint32_t)mem_heap_hi() + 64 + 31)/32)*32,
 8002582:	f7ff fb11 	bl	8001ba8 <mem_heap_hi>
 8002586:	4603      	mov	r3, r0
 8002588:	335f      	adds	r3, #95	; 0x5f
 800258a:	f023 031f 	bic.w	r3, r3, #31
	uint32_t mpu_cfg_rbar[4] = {
 800258e:	9307      	str	r3, [sp, #28]
	};

	uint32_t mpu_cfg_rasr[4] = {
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <proc_update+0xc4>)
 8002592:	466c      	mov	r4, sp
 8002594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002596:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		(MPU_DEFS_RASR_SIZE_4GB | MPU_DEFS_SHARED_DEVICE | MPU_DEFS_RASE_AP_FULL_ACCESS | MPU_RASR_ENABLE_Msk),
		// Stack/heap overflow protection
		(MPU_DEFS_RASR_SIZE_32B | MPU_DEFS_NORMAL_SHARED_MEMORY_WT | MPU_DEFS_RASE_AP_NO_ACCESS | MPU_RASR_ENABLE_Msk),
	};

	if (MPU->TYPE == 0) {return;} // Do nothing if MPU don't exist)
 800259a:	4b26      	ldr	r3, [pc, #152]	; (8002634 <proc_update+0xc8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d042      	beq.n	8002628 <proc_update+0xbc>
  __ASM volatile ("dmb 0xF":::"memory");
 80025a2:	f3bf 8f5f 	dmb	sy
}
 80025a6:	bf00      	nop
	__DMB(); // Finish outstanding transfers

	MPU->CTRL = 0; // Disable first
 80025a8:	4b22      	ldr	r3, [pc, #136]	; (8002634 <proc_update+0xc8>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	605a      	str	r2, [r3, #4]

	for (size_t i=0; i<4; i++) {
 80025ae:	2300      	movs	r3, #0
 80025b0:	9309      	str	r3, [sp, #36]	; 0x24
 80025b2:	e015      	b.n	80025e0 <proc_update+0x74>
		MPU->RNR = i; // Select region
 80025b4:	4a1f      	ldr	r2, [pc, #124]	; (8002634 <proc_update+0xc8>)
 80025b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025b8:	6093      	str	r3, [r2, #8]
		MPU->RBAR = mpu_cfg_rbar[i]; // Write base address register
 80025ba:	4a1e      	ldr	r2, [pc, #120]	; (8002634 <proc_update+0xc8>)
 80025bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	3328      	adds	r3, #40	; 0x28
 80025c2:	446b      	add	r3, sp
 80025c4:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80025c8:	60d3      	str	r3, [r2, #12]
		MPU->RASR = mpu_cfg_rasr[i]; // Region attribute and size register
 80025ca:	4a1a      	ldr	r2, [pc, #104]	; (8002634 <proc_update+0xc8>)
 80025cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	3328      	adds	r3, #40	; 0x28
 80025d2:	446b      	add	r3, sp
 80025d4:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80025d8:	6113      	str	r3, [r2, #16]
	for (size_t i=0; i<4; i++) {
 80025da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025dc:	3301      	adds	r3, #1
 80025de:	9309      	str	r3, [sp, #36]	; 0x24
 80025e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d9e6      	bls.n	80025b4 <proc_update+0x48>
	}

	for (size_t i=4; i<8; i++) {
 80025e6:	2304      	movs	r3, #4
 80025e8:	9308      	str	r3, [sp, #32]
 80025ea:	e00b      	b.n	8002604 <proc_update+0x98>
		// Disable unused regions
		MPU->RNR = i; // Select region
 80025ec:	4a11      	ldr	r2, [pc, #68]	; (8002634 <proc_update+0xc8>)
 80025ee:	9b08      	ldr	r3, [sp, #32]
 80025f0:	6093      	str	r3, [r2, #8]
		MPU->RBAR = 0; // Base address
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <proc_update+0xc8>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	60da      	str	r2, [r3, #12]
		MPU->RASR = 0; // Region attribute and size register
 80025f8:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <proc_update+0xc8>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
	for (size_t i=4; i<8; i++) {
 80025fe:	9b08      	ldr	r3, [sp, #32]
 8002600:	3301      	adds	r3, #1
 8002602:	9308      	str	r3, [sp, #32]
 8002604:	9b08      	ldr	r3, [sp, #32]
 8002606:	2b07      	cmp	r3, #7
 8002608:	d9f0      	bls.n	80025ec <proc_update+0x80>
	}

	MPU->CTRL |= 1<<2; // Enable privileged background region
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <proc_update+0xc8>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4a09      	ldr	r2, [pc, #36]	; (8002634 <proc_update+0xc8>)
 8002610:	f043 0304 	orr.w	r3, r3, #4
 8002614:	6053      	str	r3, [r2, #4]

	MPU->CTRL = MPU_CTRL_ENABLE_Msk; // Enable MPU
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <proc_update+0xc8>)
 8002618:	2201      	movs	r2, #1
 800261a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800261c:	f3bf 8f4f 	dsb	sy
}
 8002620:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002622:	f3bf 8f6f 	isb	sy
}
 8002626:	e000      	b.n	800262a <proc_update+0xbe>
	if (MPU->TYPE == 0) {return;} // Do nothing if MPU don't exist)
 8002628:	bf00      	nop

	__DSB(); // Memory barrier for subsequence data & instruction
	__ISB(); // Transfers using updated MPU settings
}
 800262a:	b00a      	add	sp, #40	; 0x28
 800262c:	bd10      	pop	{r4, pc}
 800262e:	bf00      	nop
 8002630:	08005258 	.word	0x08005258
 8002634:	e000ed90 	.word	0xe000ed90

08002638 <mpu_init>:

void mpu_init(void) {
 8002638:	b088      	sub	sp, #32
	uint32_t mpu_cfg_rbar[3] = {
 800263a:	4a2a      	ldr	r2, [pc, #168]	; (80026e4 <mpu_init+0xac>)
 800263c:	ab03      	add	r3, sp, #12
 800263e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002640:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		0x20000000,
		// Peripherals - Region 2
		PERIPH_BASE,
	};

	uint32_t mpu_cfg_rasr[3] = {
 8002644:	4a28      	ldr	r2, [pc, #160]	; (80026e8 <mpu_init+0xb0>)
 8002646:	466b      	mov	r3, sp
 8002648:	ca07      	ldmia	r2, {r0, r1, r2}
 800264a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(MPU_DEFS_RASR_SIZE_128KB | MPU_DEFS_NORMAL_SHARED_MEMORY_WT | MPU_DEFS_RASE_AP_FULL_ACCESS | MPU_RASR_ENABLE_Msk),
		// Peripherals
		(MPU_DEFS_RASR_SIZE_4GB | MPU_DEFS_SHARED_DEVICE | MPU_DEFS_RASE_AP_FULL_ACCESS | MPU_RASR_ENABLE_Msk),
	};

	if (MPU->TYPE == 0) {return;} // Do nothing if MPU don't existPB1PERIPH_BASE + 0x4400U)
 800264e:	4b27      	ldr	r3, [pc, #156]	; (80026ec <mpu_init+0xb4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d042      	beq.n	80026dc <mpu_init+0xa4>
  __ASM volatile ("dmb 0xF":::"memory");
 8002656:	f3bf 8f5f 	dmb	sy
}
 800265a:	bf00      	nop
	__DMB(); // Finish outstanding transfers

	MPU->CTRL = 0; // Disable first
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <mpu_init+0xb4>)
 800265e:	2200      	movs	r2, #0
 8002660:	605a      	str	r2, [r3, #4]

	for (size_t i=0; i<3; i++) {
 8002662:	2300      	movs	r3, #0
 8002664:	9307      	str	r3, [sp, #28]
 8002666:	e015      	b.n	8002694 <mpu_init+0x5c>
		MPU->RNR = i; // Select region
 8002668:	4a20      	ldr	r2, [pc, #128]	; (80026ec <mpu_init+0xb4>)
 800266a:	9b07      	ldr	r3, [sp, #28]
 800266c:	6093      	str	r3, [r2, #8]
		MPU->RBAR = mpu_cfg_rbar[i]; // Write base address register
 800266e:	4a1f      	ldr	r2, [pc, #124]	; (80026ec <mpu_init+0xb4>)
 8002670:	9b07      	ldr	r3, [sp, #28]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	3320      	adds	r3, #32
 8002676:	446b      	add	r3, sp
 8002678:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800267c:	60d3      	str	r3, [r2, #12]
		MPU->RASR = mpu_cfg_rasr[i]; // Region attribute and size register
 800267e:	4a1b      	ldr	r2, [pc, #108]	; (80026ec <mpu_init+0xb4>)
 8002680:	9b07      	ldr	r3, [sp, #28]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	3320      	adds	r3, #32
 8002686:	446b      	add	r3, sp
 8002688:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800268c:	6113      	str	r3, [r2, #16]
	for (size_t i=0; i<3; i++) {
 800268e:	9b07      	ldr	r3, [sp, #28]
 8002690:	3301      	adds	r3, #1
 8002692:	9307      	str	r3, [sp, #28]
 8002694:	9b07      	ldr	r3, [sp, #28]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d9e6      	bls.n	8002668 <mpu_init+0x30>
	}

	for (size_t i=3; i<8; i++) {
 800269a:	2303      	movs	r3, #3
 800269c:	9306      	str	r3, [sp, #24]
 800269e:	e00b      	b.n	80026b8 <mpu_init+0x80>
		// Disable unused regions
		MPU->RNR = i; // Select region
 80026a0:	4a12      	ldr	r2, [pc, #72]	; (80026ec <mpu_init+0xb4>)
 80026a2:	9b06      	ldr	r3, [sp, #24]
 80026a4:	6093      	str	r3, [r2, #8]
		MPU->RBAR = 0; // Base address
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <mpu_init+0xb4>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	60da      	str	r2, [r3, #12]
		MPU->RASR = 0; // Region attribute and size register
 80026ac:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <mpu_init+0xb4>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
	for (size_t i=3; i<8; i++) {
 80026b2:	9b06      	ldr	r3, [sp, #24]
 80026b4:	3301      	adds	r3, #1
 80026b6:	9306      	str	r3, [sp, #24]
 80026b8:	9b06      	ldr	r3, [sp, #24]
 80026ba:	2b07      	cmp	r3, #7
 80026bc:	d9f0      	bls.n	80026a0 <mpu_init+0x68>
	}

	MPU->CTRL |= 1<<2; // Enable privileged background region
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <mpu_init+0xb4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <mpu_init+0xb4>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	6053      	str	r3, [r2, #4]

	MPU->CTRL = MPU_CTRL_ENABLE_Msk; // Enable MPU
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <mpu_init+0xb4>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80026d0:	f3bf 8f4f 	dsb	sy
}
 80026d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026d6:	f3bf 8f6f 	isb	sy
}
 80026da:	e000      	b.n	80026de <mpu_init+0xa6>
	if (MPU->TYPE == 0) {return;} // Do nothing if MPU don't existPB1PERIPH_BASE + 0x4400U)
 80026dc:	bf00      	nop

	__DSB(); // Memory barrier for subsequence data & instruction
	__ISB(); // Transfers using updated MPU settings
}
 80026de:	b008      	add	sp, #32
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	08005268 	.word	0x08005268
 80026e8:	08005274 	.word	0x08005274
 80026ec:	e000ed90 	.word	0xe000ed90

080026f0 <__NVIC_SetPriority>:
{
 80026f0:	b082      	sub	sp, #8
 80026f2:	4603      	mov	r3, r0
 80026f4:	9100      	str	r1, [sp, #0]
 80026f6:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fa:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	db0a      	blt.n	8002718 <__NVIC_SetPriority+0x28>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002702:	9b00      	ldr	r3, [sp, #0]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	490c      	ldr	r1, [pc, #48]	; (8002738 <__NVIC_SetPriority+0x48>)
 8002708:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800270c:	0112      	lsls	r2, r2, #4
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	440b      	add	r3, r1
 8002712:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002716:	e00b      	b.n	8002730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	9b00      	ldr	r3, [sp, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	4907      	ldr	r1, [pc, #28]	; (800273c <__NVIC_SetPriority+0x4c>)
 800271e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	3b04      	subs	r3, #4
 8002728:	0112      	lsls	r2, r2, #4
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	440b      	add	r3, r1
 800272e:	761a      	strb	r2, [r3, #24]
}
 8002730:	bf00      	nop
 8002732:	b002      	add	sp, #8
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000e100 	.word	0xe000e100
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <HardFault_Handler>:
#include "mcu_init.h"
#include "mcu_mm.h"
#include "mcu_timer.h"

// Hardfault Handler - Send exit signal
void HardFault_Handler(void) {
 8002740:	b500      	push	{lr}
 8002742:	b085      	sub	sp, #20
	// Force reset stack pointer in case of overflow
	sp_reset = (void *)0x20005000;
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <HardFault_Handler+0x3c>)
 8002746:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <HardFault_Handler+0x40>)
 8002748:	601a      	str	r2, [r3, #0]
	asm volatile ("mov sp, %0" : "+r" (sp_reset));
 800274a:	4b0c      	ldr	r3, [pc, #48]	; (800277c <HardFault_Handler+0x3c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	469d      	mov	sp, r3
 8002750:	4a0a      	ldr	r2, [pc, #40]	; (800277c <HardFault_Handler+0x3c>)
 8002752:	6013      	str	r3, [r2, #0]

	char err[] = "Hard Fault";
 8002754:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <HardFault_Handler+0x44>)
 8002756:	ab01      	add	r3, sp, #4
 8002758:	ca07      	ldmia	r2, {r0, r1, r2}
 800275a:	c303      	stmia	r3!, {r0, r1}
 800275c:	801a      	strh	r2, [r3, #0]
 800275e:	3302      	adds	r3, #2
 8002760:	0c12      	lsrs	r2, r2, #16
 8002762:	701a      	strb	r2, [r3, #0]
	var_print(err);
 8002764:	ab01      	add	r3, sp, #4
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fc3c 	bl	8001fe4 <var_print>
	mm_finish();
 800276c:	f7ff fb36 	bl	8001ddc <mm_finish>
	loop();
 8002770:	f7ff fc32 	bl	8001fd8 <loop>
}
 8002774:	bf00      	nop
 8002776:	b005      	add	sp, #20
 8002778:	f85d fb04 	ldr.w	pc, [sp], #4
 800277c:	2000005c 	.word	0x2000005c
 8002780:	20005000 	.word	0x20005000
 8002784:	08005280 	.word	0x08005280

08002788 <MemManage_Handler>:
	loop();
}
*/

// Memory fault handler -  Send exit signal
void MemManage_Handler(void) {
 8002788:	b510      	push	{r4, lr}
 800278a:	b084      	sub	sp, #16
	// Force reset stack pointer in case of overflow
	sp_reset = (void *)0x20005000;
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <MemManage_Handler+0x34>)
 800278e:	4a0c      	ldr	r2, [pc, #48]	; (80027c0 <MemManage_Handler+0x38>)
 8002790:	601a      	str	r2, [r3, #0]
	asm volatile ("mov sp, %0" : "+r" (sp_reset));
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <MemManage_Handler+0x34>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	469d      	mov	sp, r3
 8002798:	4a08      	ldr	r2, [pc, #32]	; (80027bc <MemManage_Handler+0x34>)
 800279a:	6013      	str	r3, [r2, #0]

	char err[] = "Memory error";
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <MemManage_Handler+0x3c>)
 800279e:	466c      	mov	r4, sp
 80027a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027a2:	c407      	stmia	r4!, {r0, r1, r2}
 80027a4:	7023      	strb	r3, [r4, #0]
	var_print(err);
 80027a6:	466b      	mov	r3, sp
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fc1b 	bl	8001fe4 <var_print>
	mm_finish();
 80027ae:	f7ff fb15 	bl	8001ddc <mm_finish>
	loop();
 80027b2:	f7ff fc11 	bl	8001fd8 <loop>
}
 80027b6:	bf00      	nop
 80027b8:	b004      	add	sp, #16
 80027ba:	bd10      	pop	{r4, pc}
 80027bc:	2000005c 	.word	0x2000005c
 80027c0:	20005000 	.word	0x20005000
 80027c4:	0800528c 	.word	0x0800528c

080027c8 <memfault_init>:
	NVIC_EnableIRQ(WWDG_IRQn);
}
*/

// Initialize memory fault handler
void memfault_init(void) {
 80027c8:	b508      	push	{r3, lr}
	SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk; // Enable memfault, bit 16
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <memfault_init+0x1c>)
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	4a05      	ldr	r2, [pc, #20]	; (80027e4 <memfault_init+0x1c>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d4:	6253      	str	r3, [r2, #36]	; 0x24
	NVIC_SetPriority(MemoryManagement_IRQn, 0);
 80027d6:	2100      	movs	r1, #0
 80027d8:	f06f 000b 	mvn.w	r0, #11
 80027dc:	f7ff ff88 	bl	80026f0 <__NVIC_SetPriority>
}
 80027e0:	bf00      	nop
 80027e2:	bd08      	pop	{r3, pc}
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <led_on>:

// Turn on LED
void led_on(led l) {
 80027e8:	b082      	sub	sp, #8
 80027ea:	4603      	mov	r3, r0
 80027ec:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (l) {
 80027f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <led_on+0x16>
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d009      	beq.n	8002810 <led_on+0x28>
			break;
		case LD2:
			GPIOB->ODR |= (1U<<14);
			break;
		default:
			break;
 80027fc:	e00f      	b.n	800281e <led_on+0x36>
			GPIOA->ODR |= (1U<<5);
 80027fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002808:	f043 0320 	orr.w	r3, r3, #32
 800280c:	6153      	str	r3, [r2, #20]
			break;
 800280e:	e006      	b.n	800281e <led_on+0x36>
			GPIOB->ODR |= (1U<<14);
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <led_on+0x3c>)
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	4a03      	ldr	r2, [pc, #12]	; (8002824 <led_on+0x3c>)
 8002816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281a:	6153      	str	r3, [r2, #20]
			break;
 800281c:	bf00      	nop
	}
}
 800281e:	bf00      	nop
 8002820:	b002      	add	sp, #8
 8002822:	4770      	bx	lr
 8002824:	48000400 	.word	0x48000400

08002828 <led_off>:

// Turn off LED
void led_off(led l) {
 8002828:	b082      	sub	sp, #8
 800282a:	4603      	mov	r3, r0
 800282c:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (l) {
 8002830:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <led_off+0x16>
 8002838:	2b01      	cmp	r3, #1
 800283a:	d009      	beq.n	8002850 <led_off+0x28>
			break;
		case LD2:
			GPIOB->ODR &= ~(1U<<14);
			break;
		default:
			break;
 800283c:	e00f      	b.n	800285e <led_off+0x36>
			GPIOA->ODR &= ~(1U<<5);
 800283e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002848:	f023 0320 	bic.w	r3, r3, #32
 800284c:	6153      	str	r3, [r2, #20]
			break;
 800284e:	e006      	b.n	800285e <led_off+0x36>
			GPIOB->ODR &= ~(1U<<14);
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <led_off+0x3c>)
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	4a03      	ldr	r2, [pc, #12]	; (8002864 <led_off+0x3c>)
 8002856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800285a:	6153      	str	r3, [r2, #20]
			break;
 800285c:	bf00      	nop
	}
}
 800285e:	bf00      	nop
 8002860:	b002      	add	sp, #8
 8002862:	4770      	bx	lr
 8002864:	48000400 	.word	0x48000400

08002868 <led_init>:
}

// Setup LED GPIO
void led_init(void) {
	// Enable GPIOA and GPIOB clock
	RCC->AHB2ENR |= (1U << 0);
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <led_init+0x70>)
 800286a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286c:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <led_init+0x70>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (1U << 1);
 8002874:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <led_init+0x70>)
 8002876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002878:	4a17      	ldr	r2, [pc, #92]	; (80028d8 <led_init+0x70>)
 800287a:	f043 0302 	orr.w	r3, r3, #2
 800287e:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Turn on output mode on A5 and B14
	GPIOA->MODER &= ~(0xFU << 10);
 8002880:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800288a:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800288e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 10);
 8002890:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800289a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800289e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0xFU << 28);
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <led_init+0x74>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0d      	ldr	r2, [pc, #52]	; (80028dc <led_init+0x74>)
 80028a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80028aa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 28);
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <led_init+0x74>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <led_init+0x74>)
 80028b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b6:	6013      	str	r3, [r2, #0]

	// Turn off LEDs
	GPIOA->ODR &= ~(1U<<5);
 80028b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80028c2:	f023 0320 	bic.w	r3, r3, #32
 80028c6:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~(1U<<14);
 80028c8:	4b04      	ldr	r3, [pc, #16]	; (80028dc <led_init+0x74>)
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	4a03      	ldr	r2, [pc, #12]	; (80028dc <led_init+0x74>)
 80028ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028d2:	6153      	str	r3, [r2, #20]
}
 80028d4:	bf00      	nop
 80028d6:	4770      	bx	lr
 80028d8:	40021000 	.word	0x40021000
 80028dc:	48000400 	.word	0x48000400

080028e0 <mcu_init>:

// Set up LED and fault handlers
void mcu_init(void) {
 80028e0:	b508      	push	{r3, lr}
	set_sysclk_to_120();
 80028e2:	f000 f831 	bl	8002948 <set_sysclk_to_120>
	//wwdg_init();
	memfault_init();
 80028e6:	f7ff ff6f 	bl	80027c8 <memfault_init>
	led_init();
 80028ea:	f7ff ffbd 	bl	8002868 <led_init>
	// Make SVC call priority 6
	NVIC_SetPriority(SVCall_IRQn, 6);
 80028ee:	2106      	movs	r1, #6
 80028f0:	f06f 0004 	mvn.w	r0, #4
 80028f4:	f7ff fefc 	bl	80026f0 <__NVIC_SetPriority>
}
 80028f8:	bf00      	nop
 80028fa:	bd08      	pop	{r3, pc}

080028fc <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <SystemInit+0x44>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <SystemInit+0x44>)
 8002904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  	// Set MSION bit
	RCC->CR |= 1U<<0;
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <SystemInit+0x48>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <SystemInit+0x48>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6013      	str	r3, [r2, #0]

	// Reset HSEON, CSSON, PLLON, and HSEBYP bit
	RCC->CR &= ~((1U<<16) | (1U<<19) | (1U<<24) | (1U<<18));
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <SystemInit+0x48>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a09      	ldr	r2, [pc, #36]	; (8002944 <SystemInit+0x48>)
 800291e:	f023 7386 	bic.w	r3, r3, #17563648	; 0x10c0000
 8002922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002926:	6013      	str	r3, [r2, #0]
	// Reset RCC clock configuration
	RCC->CFGR = 0x00000000;
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <SystemInit+0x48>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
	RCC->PLLCFGR = 0x00001000;	
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <SystemInit+0x48>)
 8002930:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002934:	60da      	str	r2, [r3, #12]
	// Disable all clock interrupts
	RCC->CIER = 0x00000000;
 8002936:	4b03      	ldr	r3, [pc, #12]	; (8002944 <SystemInit+0x48>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
}
 800293c:	bf00      	nop
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00
 8002944:	40021000 	.word	0x40021000

08002948 <set_sysclk_to_120>:
}

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

// Set system clock to 120 MHz and perform other initialization tasks
void set_sysclk_to_120(void) {
 8002948:	b084      	sub	sp, #16
	// Actual bit values for PLL fields
	uint32_t pllm = PLL_M-1;
 800294a:	2303      	movs	r3, #3
 800294c:	9302      	str	r3, [sp, #8]
	uint32_t plln = PLL_N;
 800294e:	2314      	movs	r3, #20
 8002950:	9301      	str	r3, [sp, #4]
	uint32_t pllr = PLL_R/2 - 1;
 8002952:	2300      	movs	r3, #0
 8002954:	9300      	str	r3, [sp, #0]
	volatile uint32_t * icscr = &(RCC->ICSCR);
	volatile uint32_t * flashacr = &(FLASH->ACR);
	*/

	// Enable power interface clock
	RCC->APB1ENR1 |= 1U<<28;
 8002956:	4b6c      	ldr	r3, [pc, #432]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	4a6b      	ldr	r2, [pc, #428]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002960:	6593      	str	r3, [r2, #88]	; 0x58
	// Select power range 1
	PWR->CR1 |= 1<<9;
 8002962:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <set_sysclk_to_120+0x1c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a69      	ldr	r2, [pc, #420]	; (8002b0c <set_sysclk_to_120+0x1c4>)
 8002968:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800296c:	6013      	str	r3, [r2, #0]
	// R1MODE bit - boost mode
	PWR->CR5 &= ~(1<<8);
 800296e:	4b67      	ldr	r3, [pc, #412]	; (8002b0c <set_sysclk_to_120+0x1c4>)
 8002970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002974:	4a65      	ldr	r2, [pc, #404]	; (8002b0c <set_sysclk_to_120+0x1c4>)
 8002976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800297a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	// Disable BDCR write protection
	PWR->CR1 |= 1U<<8;
 800297e:	4b63      	ldr	r3, [pc, #396]	; (8002b0c <set_sysclk_to_120+0x1c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a62      	ldr	r2, [pc, #392]	; (8002b0c <set_sysclk_to_120+0x1c4>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]
	// Unreset BDCR
	// RCC->BDCR &= ~(1U<<16);
	// Enable LSE (for MSI PLL)
	RCC->BDCR |= 1U<<0;
 800298a:	4b5f      	ldr	r3, [pc, #380]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002990:	4a5d      	ldr	r2, [pc, #372]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	// Wait for LSE to be ready
	while(!(RCC->BDCR &(1U<<1)));
 800299a:	bf00      	nop
 800299c:	4b5a      	ldr	r3, [pc, #360]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f8      	beq.n	800299c <set_sysclk_to_120+0x54>

	// Enable MSI
	RCC->CR |= 1U<<0;
 80029aa:	4b57      	ldr	r3, [pc, #348]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a56      	ldr	r2, [pc, #344]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 80029b6:	bf00      	nop
 80029b8:	4b53      	ldr	r3, [pc, #332]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f9      	beq.n	80029b8 <set_sysclk_to_120+0x70>
	// Set MSI clock to 48 Mhz
	RCC->CR |= 1U<<3; // Select CR register value
 80029c4:	4b50      	ldr	r3, [pc, #320]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a4f      	ldr	r2, [pc, #316]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 80029ca:	f043 0308 	orr.w	r3, r3, #8
 80029ce:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 80029d0:	bf00      	nop
 80029d2:	4b4d      	ldr	r3, [pc, #308]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f9      	beq.n	80029d2 <set_sysclk_to_120+0x8a>
	RCC->CR &= ~(0xFF << 4);
 80029de:	4b4a      	ldr	r3, [pc, #296]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a49      	ldr	r2, [pc, #292]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 80029e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80029e8:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 80029ea:	bf00      	nop
 80029ec:	4b46      	ldr	r3, [pc, #280]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f9      	beq.n	80029ec <set_sysclk_to_120+0xa4>
	RCC->CR |= (11 << 4);
 80029f8:	4b43      	ldr	r3, [pc, #268]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a42      	ldr	r2, [pc, #264]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 80029fe:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002a02:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 8002a04:	bf00      	nop
 8002a06:	4b40      	ldr	r3, [pc, #256]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f9      	beq.n	8002a06 <set_sysclk_to_120+0xbe>
	// Enable MSI PLL
	RCC->CR |= 1U<<2;
 8002a12:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a3c      	ldr	r2, [pc, #240]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a18:	f043 0304 	orr.w	r3, r3, #4
 8002a1c:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 8002a1e:	bf00      	nop
 8002a20:	4b39      	ldr	r3, [pc, #228]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f9      	beq.n	8002a20 <set_sysclk_to_120+0xd8>

	// Set AHB Prescaler - 2
	RCC->CFGR |= (4<<4);
 8002a2c:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a35      	ldr	r2, [pc, #212]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a36:	6093      	str	r3, [r2, #8]
	// Set APB1 low speed prescaler - 2
	RCC->CFGR |= (4<<8);
 8002a38:	4b33      	ldr	r3, [pc, #204]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a32      	ldr	r2, [pc, #200]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a42:	6093      	str	r3, [r2, #8]
	// Set APB2 high speed prescaler - 1
	RCC->CFGR |= (0<<11);
 8002a44:	4b30      	ldr	r3, [pc, #192]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a46:	4a30      	ldr	r2, [pc, #192]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	6093      	str	r3, [r2, #8]

	// Disable PLL
	RCC->CR &= ~(1U<<24);
 8002a4c:	4b2e      	ldr	r3, [pc, #184]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a2d      	ldr	r2, [pc, #180]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a56:	6013      	str	r3, [r2, #0]
	// Wait for PLL to unlock
	while((RCC->CR & (1U<<25)));
 8002a58:	bf00      	nop
 8002a5a:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f9      	bne.n	8002a5a <set_sysclk_to_120+0x112>
	// Reset PLLN bits
	RCC->PLLCFGR = 0;
 8002a66:	4b28      	ldr	r3, [pc, #160]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
	// Set PLL dividers, and source to MSI
	RCC->PLLCFGR |= (pllm<<4) | (plln<<8) | (pllr<<25) | (1 << 0);
 8002a6c:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	9b02      	ldr	r3, [sp, #8]
 8002a72:	0119      	lsls	r1, r3, #4
 8002a74:	9b01      	ldr	r3, [sp, #4]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	4319      	orrs	r1, r3
 8002a7a:	9b00      	ldr	r3, [sp, #0]
 8002a7c:	065b      	lsls	r3, r3, #25
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	4313      	orrs	r3, r2
 8002a82:	4a21      	ldr	r2, [pc, #132]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	60d3      	str	r3, [r2, #12]
	// Enable main PLL
	RCC->CR |= 1U<<24;
 8002a8a:	4b1f      	ldr	r3, [pc, #124]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1e      	ldr	r2, [pc, #120]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a94:	6013      	str	r3, [r2, #0]
	// Set R EN bit
	RCC->PLLCFGR |= (1U << 24);
 8002a96:	4b1c      	ldr	r3, [pc, #112]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002a9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa0:	60d3      	str	r3, [r2, #12]
	// Wait until PLL is ready
	while(!(RCC->CR & (1 << 25)));
 8002aa2:	bf00      	nop
 8002aa4:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f9      	beq.n	8002aa4 <set_sysclk_to_120+0x15c>

	// Flash: Prefetch enable, instruction cache enable, data cache enable, latency to 5 wait states (Depends on CPU clock, refer to table 12 in RM0432)
	FLASH->ACR |= (1U << 8) | (1U << 9) | (1U << 10) | (5 << 0);
 8002ab0:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <set_sysclk_to_120+0x1c8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <set_sysclk_to_120+0x1c8>)
 8002ab6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aba:	f043 0305 	orr.w	r3, r3, #5
 8002abe:	6013      	str	r3, [r2, #0]

	// Select main PLL as system clock source
	RCC->CFGR |= 3U<<0;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002ac6:	f043 0303 	orr.w	r3, r3, #3
 8002aca:	6093      	str	r3, [r2, #8]
	// Wait until main PLL is set as clock
	while (1) {
		if((RCC->CFGR & 0xc) == 0xc) {
 8002acc:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	d000      	beq.n	8002ada <set_sysclk_to_120+0x192>
 8002ad8:	e7f8      	b.n	8002acc <set_sysclk_to_120+0x184>
			break;
 8002ada:	bf00      	nop
		}
	}

	// Wait about 1us
	for (int i=0; i<1000; i++){};
 8002adc:	2300      	movs	r3, #0
 8002ade:	9303      	str	r3, [sp, #12]
 8002ae0:	e002      	b.n	8002ae8 <set_sysclk_to_120+0x1a0>
 8002ae2:	9b03      	ldr	r3, [sp, #12]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	9303      	str	r3, [sp, #12]
 8002ae8:	9b03      	ldr	r3, [sp, #12]
 8002aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aee:	dbf8      	blt.n	8002ae2 <set_sysclk_to_120+0x19a>
	// Set AHB Prescaler - 1
	RCC->CFGR &= ~(0xFF<<4);
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <set_sysclk_to_120+0x1c0>)
 8002af6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002afa:	6093      	str	r3, [r2, #8]

	// Update SystemCoreClock variable
	SystemCoreClock = 120000000;
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <set_sysclk_to_120+0x1cc>)
 8002afe:	4a06      	ldr	r2, [pc, #24]	; (8002b18 <set_sysclk_to_120+0x1d0>)
 8002b00:	601a      	str	r2, [r3, #0]
}
 8002b02:	bf00      	nop
 8002b04:	b004      	add	sp, #16
 8002b06:	4770      	bx	lr
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40007000 	.word	0x40007000
 8002b10:	40022000 	.word	0x40022000
 8002b14:	20000060 	.word	0x20000060
 8002b18:	07270e00 	.word	0x07270e00

08002b1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b20:	f7ff feec 	bl	80028fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b24:	480c      	ldr	r0, [pc, #48]	; (8002b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b26:	490d      	ldr	r1, [pc, #52]	; (8002b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b28:	4a0d      	ldr	r2, [pc, #52]	; (8002b60 <LoopForever+0xe>)
  movs r3, #0
 8002b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b2c:	e002      	b.n	8002b34 <LoopCopyDataInit>

08002b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b32:	3304      	adds	r3, #4

08002b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b38:	d3f9      	bcc.n	8002b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b3c:	4c0a      	ldr	r4, [pc, #40]	; (8002b68 <LoopForever+0x16>)
  movs r3, #0
 8002b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b40:	e001      	b.n	8002b46 <LoopFillZerobss>

08002b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b44:	3204      	adds	r2, #4

08002b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b48:	d3fb      	bcc.n	8002b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b4a:	f000 f847 	bl	8002bdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b4e:	f7fd ffc3 	bl	8000ad8 <main>

08002b52 <LoopForever>:

LoopForever:
    b LoopForever
 8002b52:	e7fe      	b.n	8002b52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b54:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b5c:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8002b60:	08005b50 	.word	0x08005b50
  ldr r2, =_sbss
 8002b64:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8002b68:	20000d1c 	.word	0x20000d1c

08002b6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b6c:	e7fe      	b.n	8002b6c <ADC1_IRQHandler>
	...

08002b70 <__assert_func>:
 8002b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b72:	4614      	mov	r4, r2
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <__assert_func+0x2c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4605      	mov	r5, r0
 8002b7c:	68d8      	ldr	r0, [r3, #12]
 8002b7e:	b14c      	cbz	r4, 8002b94 <__assert_func+0x24>
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <__assert_func+0x30>)
 8002b82:	9100      	str	r1, [sp, #0]
 8002b84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002b88:	4906      	ldr	r1, [pc, #24]	; (8002ba4 <__assert_func+0x34>)
 8002b8a:	462b      	mov	r3, r5
 8002b8c:	f000 f814 	bl	8002bb8 <fiprintf>
 8002b90:	f000 fdbe 	bl	8003710 <abort>
 8002b94:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <__assert_func+0x38>)
 8002b96:	461c      	mov	r4, r3
 8002b98:	e7f3      	b.n	8002b82 <__assert_func+0x12>
 8002b9a:	bf00      	nop
 8002b9c:	20000064 	.word	0x20000064
 8002ba0:	080052b2 	.word	0x080052b2
 8002ba4:	080052bf 	.word	0x080052bf
 8002ba8:	080052ed 	.word	0x080052ed

08002bac <__errno>:
 8002bac:	4b01      	ldr	r3, [pc, #4]	; (8002bb4 <__errno+0x8>)
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000064 	.word	0x20000064

08002bb8 <fiprintf>:
 8002bb8:	b40e      	push	{r1, r2, r3}
 8002bba:	b503      	push	{r0, r1, lr}
 8002bbc:	4601      	mov	r1, r0
 8002bbe:	ab03      	add	r3, sp, #12
 8002bc0:	4805      	ldr	r0, [pc, #20]	; (8002bd8 <fiprintf+0x20>)
 8002bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bc6:	6800      	ldr	r0, [r0, #0]
 8002bc8:	9301      	str	r3, [sp, #4]
 8002bca:	f000 f8ff 	bl	8002dcc <_vfiprintf_r>
 8002bce:	b002      	add	sp, #8
 8002bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bd4:	b003      	add	sp, #12
 8002bd6:	4770      	bx	lr
 8002bd8:	20000064 	.word	0x20000064

08002bdc <__libc_init_array>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	4d0d      	ldr	r5, [pc, #52]	; (8002c14 <__libc_init_array+0x38>)
 8002be0:	4c0d      	ldr	r4, [pc, #52]	; (8002c18 <__libc_init_array+0x3c>)
 8002be2:	1b64      	subs	r4, r4, r5
 8002be4:	10a4      	asrs	r4, r4, #2
 8002be6:	2600      	movs	r6, #0
 8002be8:	42a6      	cmp	r6, r4
 8002bea:	d109      	bne.n	8002c00 <__libc_init_array+0x24>
 8002bec:	4d0b      	ldr	r5, [pc, #44]	; (8002c1c <__libc_init_array+0x40>)
 8002bee:	4c0c      	ldr	r4, [pc, #48]	; (8002c20 <__libc_init_array+0x44>)
 8002bf0:	f002 f8be 	bl	8004d70 <_init>
 8002bf4:	1b64      	subs	r4, r4, r5
 8002bf6:	10a4      	asrs	r4, r4, #2
 8002bf8:	2600      	movs	r6, #0
 8002bfa:	42a6      	cmp	r6, r4
 8002bfc:	d105      	bne.n	8002c0a <__libc_init_array+0x2e>
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}
 8002c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c04:	4798      	blx	r3
 8002c06:	3601      	adds	r6, #1
 8002c08:	e7ee      	b.n	8002be8 <__libc_init_array+0xc>
 8002c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c0e:	4798      	blx	r3
 8002c10:	3601      	adds	r6, #1
 8002c12:	e7f2      	b.n	8002bfa <__libc_init_array+0x1e>
 8002c14:	08005b40 	.word	0x08005b40
 8002c18:	08005b40 	.word	0x08005b40
 8002c1c:	08005b40 	.word	0x08005b40
 8002c20:	08005b44 	.word	0x08005b44

08002c24 <memcpy>:
 8002c24:	440a      	add	r2, r1
 8002c26:	4291      	cmp	r1, r2
 8002c28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002c2c:	d100      	bne.n	8002c30 <memcpy+0xc>
 8002c2e:	4770      	bx	lr
 8002c30:	b510      	push	{r4, lr}
 8002c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c3a:	4291      	cmp	r1, r2
 8002c3c:	d1f9      	bne.n	8002c32 <memcpy+0xe>
 8002c3e:	bd10      	pop	{r4, pc}

08002c40 <memset>:
 8002c40:	4402      	add	r2, r0
 8002c42:	4603      	mov	r3, r0
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d100      	bne.n	8002c4a <memset+0xa>
 8002c48:	4770      	bx	lr
 8002c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c4e:	e7f9      	b.n	8002c44 <memset+0x4>

08002c50 <sbrk_aligned>:
 8002c50:	b570      	push	{r4, r5, r6, lr}
 8002c52:	4e0e      	ldr	r6, [pc, #56]	; (8002c8c <sbrk_aligned+0x3c>)
 8002c54:	460c      	mov	r4, r1
 8002c56:	6831      	ldr	r1, [r6, #0]
 8002c58:	4605      	mov	r5, r0
 8002c5a:	b911      	cbnz	r1, 8002c62 <sbrk_aligned+0x12>
 8002c5c:	f000 f9e4 	bl	8003028 <_sbrk_r>
 8002c60:	6030      	str	r0, [r6, #0]
 8002c62:	4621      	mov	r1, r4
 8002c64:	4628      	mov	r0, r5
 8002c66:	f000 f9df 	bl	8003028 <_sbrk_r>
 8002c6a:	1c43      	adds	r3, r0, #1
 8002c6c:	d00a      	beq.n	8002c84 <sbrk_aligned+0x34>
 8002c6e:	1cc4      	adds	r4, r0, #3
 8002c70:	f024 0403 	bic.w	r4, r4, #3
 8002c74:	42a0      	cmp	r0, r4
 8002c76:	d007      	beq.n	8002c88 <sbrk_aligned+0x38>
 8002c78:	1a21      	subs	r1, r4, r0
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	f000 f9d4 	bl	8003028 <_sbrk_r>
 8002c80:	3001      	adds	r0, #1
 8002c82:	d101      	bne.n	8002c88 <sbrk_aligned+0x38>
 8002c84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002c88:	4620      	mov	r0, r4
 8002c8a:	bd70      	pop	{r4, r5, r6, pc}
 8002c8c:	20000d0c 	.word	0x20000d0c

08002c90 <_malloc_r>:
 8002c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c94:	1ccd      	adds	r5, r1, #3
 8002c96:	f025 0503 	bic.w	r5, r5, #3
 8002c9a:	3508      	adds	r5, #8
 8002c9c:	2d0c      	cmp	r5, #12
 8002c9e:	bf38      	it	cc
 8002ca0:	250c      	movcc	r5, #12
 8002ca2:	2d00      	cmp	r5, #0
 8002ca4:	4607      	mov	r7, r0
 8002ca6:	db01      	blt.n	8002cac <_malloc_r+0x1c>
 8002ca8:	42a9      	cmp	r1, r5
 8002caa:	d905      	bls.n	8002cb8 <_malloc_r+0x28>
 8002cac:	230c      	movs	r3, #12
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	2600      	movs	r6, #0
 8002cb2:	4630      	mov	r0, r6
 8002cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cb8:	4e2e      	ldr	r6, [pc, #184]	; (8002d74 <_malloc_r+0xe4>)
 8002cba:	f000 ff8d 	bl	8003bd8 <__malloc_lock>
 8002cbe:	6833      	ldr	r3, [r6, #0]
 8002cc0:	461c      	mov	r4, r3
 8002cc2:	bb34      	cbnz	r4, 8002d12 <_malloc_r+0x82>
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	4638      	mov	r0, r7
 8002cc8:	f7ff ffc2 	bl	8002c50 <sbrk_aligned>
 8002ccc:	1c43      	adds	r3, r0, #1
 8002cce:	4604      	mov	r4, r0
 8002cd0:	d14d      	bne.n	8002d6e <_malloc_r+0xde>
 8002cd2:	6834      	ldr	r4, [r6, #0]
 8002cd4:	4626      	mov	r6, r4
 8002cd6:	2e00      	cmp	r6, #0
 8002cd8:	d140      	bne.n	8002d5c <_malloc_r+0xcc>
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	4631      	mov	r1, r6
 8002cde:	4638      	mov	r0, r7
 8002ce0:	eb04 0803 	add.w	r8, r4, r3
 8002ce4:	f000 f9a0 	bl	8003028 <_sbrk_r>
 8002ce8:	4580      	cmp	r8, r0
 8002cea:	d13a      	bne.n	8002d62 <_malloc_r+0xd2>
 8002cec:	6823      	ldr	r3, [r4, #0]
 8002cee:	3503      	adds	r5, #3
 8002cf0:	1aed      	subs	r5, r5, r3
 8002cf2:	f025 0503 	bic.w	r5, r5, #3
 8002cf6:	3508      	adds	r5, #8
 8002cf8:	2d0c      	cmp	r5, #12
 8002cfa:	bf38      	it	cc
 8002cfc:	250c      	movcc	r5, #12
 8002cfe:	4629      	mov	r1, r5
 8002d00:	4638      	mov	r0, r7
 8002d02:	f7ff ffa5 	bl	8002c50 <sbrk_aligned>
 8002d06:	3001      	adds	r0, #1
 8002d08:	d02b      	beq.n	8002d62 <_malloc_r+0xd2>
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	442b      	add	r3, r5
 8002d0e:	6023      	str	r3, [r4, #0]
 8002d10:	e00e      	b.n	8002d30 <_malloc_r+0xa0>
 8002d12:	6822      	ldr	r2, [r4, #0]
 8002d14:	1b52      	subs	r2, r2, r5
 8002d16:	d41e      	bmi.n	8002d56 <_malloc_r+0xc6>
 8002d18:	2a0b      	cmp	r2, #11
 8002d1a:	d916      	bls.n	8002d4a <_malloc_r+0xba>
 8002d1c:	1961      	adds	r1, r4, r5
 8002d1e:	42a3      	cmp	r3, r4
 8002d20:	6025      	str	r5, [r4, #0]
 8002d22:	bf18      	it	ne
 8002d24:	6059      	strne	r1, [r3, #4]
 8002d26:	6863      	ldr	r3, [r4, #4]
 8002d28:	bf08      	it	eq
 8002d2a:	6031      	streq	r1, [r6, #0]
 8002d2c:	5162      	str	r2, [r4, r5]
 8002d2e:	604b      	str	r3, [r1, #4]
 8002d30:	4638      	mov	r0, r7
 8002d32:	f104 060b 	add.w	r6, r4, #11
 8002d36:	f000 ff55 	bl	8003be4 <__malloc_unlock>
 8002d3a:	f026 0607 	bic.w	r6, r6, #7
 8002d3e:	1d23      	adds	r3, r4, #4
 8002d40:	1af2      	subs	r2, r6, r3
 8002d42:	d0b6      	beq.n	8002cb2 <_malloc_r+0x22>
 8002d44:	1b9b      	subs	r3, r3, r6
 8002d46:	50a3      	str	r3, [r4, r2]
 8002d48:	e7b3      	b.n	8002cb2 <_malloc_r+0x22>
 8002d4a:	6862      	ldr	r2, [r4, #4]
 8002d4c:	42a3      	cmp	r3, r4
 8002d4e:	bf0c      	ite	eq
 8002d50:	6032      	streq	r2, [r6, #0]
 8002d52:	605a      	strne	r2, [r3, #4]
 8002d54:	e7ec      	b.n	8002d30 <_malloc_r+0xa0>
 8002d56:	4623      	mov	r3, r4
 8002d58:	6864      	ldr	r4, [r4, #4]
 8002d5a:	e7b2      	b.n	8002cc2 <_malloc_r+0x32>
 8002d5c:	4634      	mov	r4, r6
 8002d5e:	6876      	ldr	r6, [r6, #4]
 8002d60:	e7b9      	b.n	8002cd6 <_malloc_r+0x46>
 8002d62:	230c      	movs	r3, #12
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	4638      	mov	r0, r7
 8002d68:	f000 ff3c 	bl	8003be4 <__malloc_unlock>
 8002d6c:	e7a1      	b.n	8002cb2 <_malloc_r+0x22>
 8002d6e:	6025      	str	r5, [r4, #0]
 8002d70:	e7de      	b.n	8002d30 <_malloc_r+0xa0>
 8002d72:	bf00      	nop
 8002d74:	20000d08 	.word	0x20000d08

08002d78 <__sfputc_r>:
 8002d78:	6893      	ldr	r3, [r2, #8]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	b410      	push	{r4}
 8002d80:	6093      	str	r3, [r2, #8]
 8002d82:	da08      	bge.n	8002d96 <__sfputc_r+0x1e>
 8002d84:	6994      	ldr	r4, [r2, #24]
 8002d86:	42a3      	cmp	r3, r4
 8002d88:	db01      	blt.n	8002d8e <__sfputc_r+0x16>
 8002d8a:	290a      	cmp	r1, #10
 8002d8c:	d103      	bne.n	8002d96 <__sfputc_r+0x1e>
 8002d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d92:	f000 bbeb 	b.w	800356c <__swbuf_r>
 8002d96:	6813      	ldr	r3, [r2, #0]
 8002d98:	1c58      	adds	r0, r3, #1
 8002d9a:	6010      	str	r0, [r2, #0]
 8002d9c:	7019      	strb	r1, [r3, #0]
 8002d9e:	4608      	mov	r0, r1
 8002da0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <__sfputs_r>:
 8002da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da8:	4606      	mov	r6, r0
 8002daa:	460f      	mov	r7, r1
 8002dac:	4614      	mov	r4, r2
 8002dae:	18d5      	adds	r5, r2, r3
 8002db0:	42ac      	cmp	r4, r5
 8002db2:	d101      	bne.n	8002db8 <__sfputs_r+0x12>
 8002db4:	2000      	movs	r0, #0
 8002db6:	e007      	b.n	8002dc8 <__sfputs_r+0x22>
 8002db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dbc:	463a      	mov	r2, r7
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	f7ff ffda 	bl	8002d78 <__sfputc_r>
 8002dc4:	1c43      	adds	r3, r0, #1
 8002dc6:	d1f3      	bne.n	8002db0 <__sfputs_r+0xa>
 8002dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002dcc <_vfiprintf_r>:
 8002dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dd0:	460d      	mov	r5, r1
 8002dd2:	b09d      	sub	sp, #116	; 0x74
 8002dd4:	4614      	mov	r4, r2
 8002dd6:	4698      	mov	r8, r3
 8002dd8:	4606      	mov	r6, r0
 8002dda:	b118      	cbz	r0, 8002de4 <_vfiprintf_r+0x18>
 8002ddc:	6983      	ldr	r3, [r0, #24]
 8002dde:	b90b      	cbnz	r3, 8002de4 <_vfiprintf_r+0x18>
 8002de0:	f000 fdc8 	bl	8003974 <__sinit>
 8002de4:	4b88      	ldr	r3, [pc, #544]	; (8003008 <_vfiprintf_r+0x23c>)
 8002de6:	429d      	cmp	r5, r3
 8002de8:	d11b      	bne.n	8002e22 <_vfiprintf_r+0x56>
 8002dea:	6875      	ldr	r5, [r6, #4]
 8002dec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002dee:	07d9      	lsls	r1, r3, #31
 8002df0:	d405      	bmi.n	8002dfe <_vfiprintf_r+0x32>
 8002df2:	89ab      	ldrh	r3, [r5, #12]
 8002df4:	059a      	lsls	r2, r3, #22
 8002df6:	d402      	bmi.n	8002dfe <_vfiprintf_r+0x32>
 8002df8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002dfa:	f000 fe59 	bl	8003ab0 <__retarget_lock_acquire_recursive>
 8002dfe:	89ab      	ldrh	r3, [r5, #12]
 8002e00:	071b      	lsls	r3, r3, #28
 8002e02:	d501      	bpl.n	8002e08 <_vfiprintf_r+0x3c>
 8002e04:	692b      	ldr	r3, [r5, #16]
 8002e06:	b9eb      	cbnz	r3, 8002e44 <_vfiprintf_r+0x78>
 8002e08:	4629      	mov	r1, r5
 8002e0a:	4630      	mov	r0, r6
 8002e0c:	f000 fc12 	bl	8003634 <__swsetup_r>
 8002e10:	b1c0      	cbz	r0, 8002e44 <_vfiprintf_r+0x78>
 8002e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e14:	07dc      	lsls	r4, r3, #31
 8002e16:	d50e      	bpl.n	8002e36 <_vfiprintf_r+0x6a>
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e1c:	b01d      	add	sp, #116	; 0x74
 8002e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e22:	4b7a      	ldr	r3, [pc, #488]	; (800300c <_vfiprintf_r+0x240>)
 8002e24:	429d      	cmp	r5, r3
 8002e26:	d101      	bne.n	8002e2c <_vfiprintf_r+0x60>
 8002e28:	68b5      	ldr	r5, [r6, #8]
 8002e2a:	e7df      	b.n	8002dec <_vfiprintf_r+0x20>
 8002e2c:	4b78      	ldr	r3, [pc, #480]	; (8003010 <_vfiprintf_r+0x244>)
 8002e2e:	429d      	cmp	r5, r3
 8002e30:	bf08      	it	eq
 8002e32:	68f5      	ldreq	r5, [r6, #12]
 8002e34:	e7da      	b.n	8002dec <_vfiprintf_r+0x20>
 8002e36:	89ab      	ldrh	r3, [r5, #12]
 8002e38:	0598      	lsls	r0, r3, #22
 8002e3a:	d4ed      	bmi.n	8002e18 <_vfiprintf_r+0x4c>
 8002e3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e3e:	f000 fe38 	bl	8003ab2 <__retarget_lock_release_recursive>
 8002e42:	e7e9      	b.n	8002e18 <_vfiprintf_r+0x4c>
 8002e44:	2300      	movs	r3, #0
 8002e46:	9309      	str	r3, [sp, #36]	; 0x24
 8002e48:	2320      	movs	r3, #32
 8002e4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e52:	2330      	movs	r3, #48	; 0x30
 8002e54:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003014 <_vfiprintf_r+0x248>
 8002e58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e5c:	f04f 0901 	mov.w	r9, #1
 8002e60:	4623      	mov	r3, r4
 8002e62:	469a      	mov	sl, r3
 8002e64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e68:	b10a      	cbz	r2, 8002e6e <_vfiprintf_r+0xa2>
 8002e6a:	2a25      	cmp	r2, #37	; 0x25
 8002e6c:	d1f9      	bne.n	8002e62 <_vfiprintf_r+0x96>
 8002e6e:	ebba 0b04 	subs.w	fp, sl, r4
 8002e72:	d00b      	beq.n	8002e8c <_vfiprintf_r+0xc0>
 8002e74:	465b      	mov	r3, fp
 8002e76:	4622      	mov	r2, r4
 8002e78:	4629      	mov	r1, r5
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	f7ff ff93 	bl	8002da6 <__sfputs_r>
 8002e80:	3001      	adds	r0, #1
 8002e82:	f000 80a9 	beq.w	8002fd8 <_vfiprintf_r+0x20c>
 8002e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e88:	445a      	add	r2, fp
 8002e8a:	9209      	str	r2, [sp, #36]	; 0x24
 8002e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80a1 	beq.w	8002fd8 <_vfiprintf_r+0x20c>
 8002e96:	2300      	movs	r3, #0
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ea0:	f10a 0a01 	add.w	sl, sl, #1
 8002ea4:	9304      	str	r3, [sp, #16]
 8002ea6:	9307      	str	r3, [sp, #28]
 8002ea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002eac:	931a      	str	r3, [sp, #104]	; 0x68
 8002eae:	4654      	mov	r4, sl
 8002eb0:	2205      	movs	r2, #5
 8002eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eb6:	4857      	ldr	r0, [pc, #348]	; (8003014 <_vfiprintf_r+0x248>)
 8002eb8:	f7fd f98a 	bl	80001d0 <memchr>
 8002ebc:	9a04      	ldr	r2, [sp, #16]
 8002ebe:	b9d8      	cbnz	r0, 8002ef8 <_vfiprintf_r+0x12c>
 8002ec0:	06d1      	lsls	r1, r2, #27
 8002ec2:	bf44      	itt	mi
 8002ec4:	2320      	movmi	r3, #32
 8002ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002eca:	0713      	lsls	r3, r2, #28
 8002ecc:	bf44      	itt	mi
 8002ece:	232b      	movmi	r3, #43	; 0x2b
 8002ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8002ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8002eda:	d015      	beq.n	8002f08 <_vfiprintf_r+0x13c>
 8002edc:	9a07      	ldr	r2, [sp, #28]
 8002ede:	4654      	mov	r4, sl
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f04f 0c0a 	mov.w	ip, #10
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002eec:	3b30      	subs	r3, #48	; 0x30
 8002eee:	2b09      	cmp	r3, #9
 8002ef0:	d94d      	bls.n	8002f8e <_vfiprintf_r+0x1c2>
 8002ef2:	b1b0      	cbz	r0, 8002f22 <_vfiprintf_r+0x156>
 8002ef4:	9207      	str	r2, [sp, #28]
 8002ef6:	e014      	b.n	8002f22 <_vfiprintf_r+0x156>
 8002ef8:	eba0 0308 	sub.w	r3, r0, r8
 8002efc:	fa09 f303 	lsl.w	r3, r9, r3
 8002f00:	4313      	orrs	r3, r2
 8002f02:	9304      	str	r3, [sp, #16]
 8002f04:	46a2      	mov	sl, r4
 8002f06:	e7d2      	b.n	8002eae <_vfiprintf_r+0xe2>
 8002f08:	9b03      	ldr	r3, [sp, #12]
 8002f0a:	1d19      	adds	r1, r3, #4
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	9103      	str	r1, [sp, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bfbb      	ittet	lt
 8002f14:	425b      	neglt	r3, r3
 8002f16:	f042 0202 	orrlt.w	r2, r2, #2
 8002f1a:	9307      	strge	r3, [sp, #28]
 8002f1c:	9307      	strlt	r3, [sp, #28]
 8002f1e:	bfb8      	it	lt
 8002f20:	9204      	strlt	r2, [sp, #16]
 8002f22:	7823      	ldrb	r3, [r4, #0]
 8002f24:	2b2e      	cmp	r3, #46	; 0x2e
 8002f26:	d10c      	bne.n	8002f42 <_vfiprintf_r+0x176>
 8002f28:	7863      	ldrb	r3, [r4, #1]
 8002f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8002f2c:	d134      	bne.n	8002f98 <_vfiprintf_r+0x1cc>
 8002f2e:	9b03      	ldr	r3, [sp, #12]
 8002f30:	1d1a      	adds	r2, r3, #4
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	9203      	str	r2, [sp, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	bfb8      	it	lt
 8002f3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002f3e:	3402      	adds	r4, #2
 8002f40:	9305      	str	r3, [sp, #20]
 8002f42:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8003024 <_vfiprintf_r+0x258>
 8002f46:	7821      	ldrb	r1, [r4, #0]
 8002f48:	2203      	movs	r2, #3
 8002f4a:	4650      	mov	r0, sl
 8002f4c:	f7fd f940 	bl	80001d0 <memchr>
 8002f50:	b138      	cbz	r0, 8002f62 <_vfiprintf_r+0x196>
 8002f52:	9b04      	ldr	r3, [sp, #16]
 8002f54:	eba0 000a 	sub.w	r0, r0, sl
 8002f58:	2240      	movs	r2, #64	; 0x40
 8002f5a:	4082      	lsls	r2, r0
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	3401      	adds	r4, #1
 8002f60:	9304      	str	r3, [sp, #16]
 8002f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f66:	482c      	ldr	r0, [pc, #176]	; (8003018 <_vfiprintf_r+0x24c>)
 8002f68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f6c:	2206      	movs	r2, #6
 8002f6e:	f7fd f92f 	bl	80001d0 <memchr>
 8002f72:	2800      	cmp	r0, #0
 8002f74:	d03f      	beq.n	8002ff6 <_vfiprintf_r+0x22a>
 8002f76:	4b29      	ldr	r3, [pc, #164]	; (800301c <_vfiprintf_r+0x250>)
 8002f78:	bb1b      	cbnz	r3, 8002fc2 <_vfiprintf_r+0x1f6>
 8002f7a:	9b03      	ldr	r3, [sp, #12]
 8002f7c:	3307      	adds	r3, #7
 8002f7e:	f023 0307 	bic.w	r3, r3, #7
 8002f82:	3308      	adds	r3, #8
 8002f84:	9303      	str	r3, [sp, #12]
 8002f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f88:	443b      	add	r3, r7
 8002f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f8c:	e768      	b.n	8002e60 <_vfiprintf_r+0x94>
 8002f8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f92:	460c      	mov	r4, r1
 8002f94:	2001      	movs	r0, #1
 8002f96:	e7a6      	b.n	8002ee6 <_vfiprintf_r+0x11a>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	3401      	adds	r4, #1
 8002f9c:	9305      	str	r3, [sp, #20]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f04f 0c0a 	mov.w	ip, #10
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002faa:	3a30      	subs	r2, #48	; 0x30
 8002fac:	2a09      	cmp	r2, #9
 8002fae:	d903      	bls.n	8002fb8 <_vfiprintf_r+0x1ec>
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0c6      	beq.n	8002f42 <_vfiprintf_r+0x176>
 8002fb4:	9105      	str	r1, [sp, #20]
 8002fb6:	e7c4      	b.n	8002f42 <_vfiprintf_r+0x176>
 8002fb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e7f0      	b.n	8002fa4 <_vfiprintf_r+0x1d8>
 8002fc2:	ab03      	add	r3, sp, #12
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	462a      	mov	r2, r5
 8002fc8:	4b15      	ldr	r3, [pc, #84]	; (8003020 <_vfiprintf_r+0x254>)
 8002fca:	a904      	add	r1, sp, #16
 8002fcc:	4630      	mov	r0, r6
 8002fce:	f3af 8000 	nop.w
 8002fd2:	4607      	mov	r7, r0
 8002fd4:	1c78      	adds	r0, r7, #1
 8002fd6:	d1d6      	bne.n	8002f86 <_vfiprintf_r+0x1ba>
 8002fd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fda:	07d9      	lsls	r1, r3, #31
 8002fdc:	d405      	bmi.n	8002fea <_vfiprintf_r+0x21e>
 8002fde:	89ab      	ldrh	r3, [r5, #12]
 8002fe0:	059a      	lsls	r2, r3, #22
 8002fe2:	d402      	bmi.n	8002fea <_vfiprintf_r+0x21e>
 8002fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fe6:	f000 fd64 	bl	8003ab2 <__retarget_lock_release_recursive>
 8002fea:	89ab      	ldrh	r3, [r5, #12]
 8002fec:	065b      	lsls	r3, r3, #25
 8002fee:	f53f af13 	bmi.w	8002e18 <_vfiprintf_r+0x4c>
 8002ff2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ff4:	e712      	b.n	8002e1c <_vfiprintf_r+0x50>
 8002ff6:	ab03      	add	r3, sp, #12
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	462a      	mov	r2, r5
 8002ffc:	4b08      	ldr	r3, [pc, #32]	; (8003020 <_vfiprintf_r+0x254>)
 8002ffe:	a904      	add	r1, sp, #16
 8003000:	4630      	mov	r0, r6
 8003002:	f001 fa09 	bl	8004418 <_printf_i>
 8003006:	e7e4      	b.n	8002fd2 <_vfiprintf_r+0x206>
 8003008:	080059bc 	.word	0x080059bc
 800300c:	080059dc 	.word	0x080059dc
 8003010:	0800599c 	.word	0x0800599c
 8003014:	080052f4 	.word	0x080052f4
 8003018:	080052fe 	.word	0x080052fe
 800301c:	00000000 	.word	0x00000000
 8003020:	08002da7 	.word	0x08002da7
 8003024:	080052fa 	.word	0x080052fa

08003028 <_sbrk_r>:
 8003028:	b538      	push	{r3, r4, r5, lr}
 800302a:	4d06      	ldr	r5, [pc, #24]	; (8003044 <_sbrk_r+0x1c>)
 800302c:	2300      	movs	r3, #0
 800302e:	4604      	mov	r4, r0
 8003030:	4608      	mov	r0, r1
 8003032:	602b      	str	r3, [r5, #0]
 8003034:	f001 fe84 	bl	8004d40 <_sbrk>
 8003038:	1c43      	adds	r3, r0, #1
 800303a:	d102      	bne.n	8003042 <_sbrk_r+0x1a>
 800303c:	682b      	ldr	r3, [r5, #0]
 800303e:	b103      	cbz	r3, 8003042 <_sbrk_r+0x1a>
 8003040:	6023      	str	r3, [r4, #0]
 8003042:	bd38      	pop	{r3, r4, r5, pc}
 8003044:	20000d14 	.word	0x20000d14

08003048 <siprintf>:
 8003048:	b40e      	push	{r1, r2, r3}
 800304a:	b500      	push	{lr}
 800304c:	b09c      	sub	sp, #112	; 0x70
 800304e:	ab1d      	add	r3, sp, #116	; 0x74
 8003050:	9002      	str	r0, [sp, #8]
 8003052:	9006      	str	r0, [sp, #24]
 8003054:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003058:	4809      	ldr	r0, [pc, #36]	; (8003080 <siprintf+0x38>)
 800305a:	9107      	str	r1, [sp, #28]
 800305c:	9104      	str	r1, [sp, #16]
 800305e:	4909      	ldr	r1, [pc, #36]	; (8003084 <siprintf+0x3c>)
 8003060:	f853 2b04 	ldr.w	r2, [r3], #4
 8003064:	9105      	str	r1, [sp, #20]
 8003066:	6800      	ldr	r0, [r0, #0]
 8003068:	9301      	str	r3, [sp, #4]
 800306a:	a902      	add	r1, sp, #8
 800306c:	f000 fe96 	bl	8003d9c <_svfiprintf_r>
 8003070:	9b02      	ldr	r3, [sp, #8]
 8003072:	2200      	movs	r2, #0
 8003074:	701a      	strb	r2, [r3, #0]
 8003076:	b01c      	add	sp, #112	; 0x70
 8003078:	f85d eb04 	ldr.w	lr, [sp], #4
 800307c:	b003      	add	sp, #12
 800307e:	4770      	bx	lr
 8003080:	20000064 	.word	0x20000064
 8003084:	ffff0208 	.word	0xffff0208

08003088 <siscanf>:
 8003088:	b40e      	push	{r1, r2, r3}
 800308a:	b510      	push	{r4, lr}
 800308c:	b09f      	sub	sp, #124	; 0x7c
 800308e:	ac21      	add	r4, sp, #132	; 0x84
 8003090:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003094:	f854 2b04 	ldr.w	r2, [r4], #4
 8003098:	9201      	str	r2, [sp, #4]
 800309a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800309e:	9004      	str	r0, [sp, #16]
 80030a0:	9008      	str	r0, [sp, #32]
 80030a2:	f7fd f88d 	bl	80001c0 <strlen>
 80030a6:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <siscanf+0x50>)
 80030a8:	9005      	str	r0, [sp, #20]
 80030aa:	9009      	str	r0, [sp, #36]	; 0x24
 80030ac:	930d      	str	r3, [sp, #52]	; 0x34
 80030ae:	480b      	ldr	r0, [pc, #44]	; (80030dc <siscanf+0x54>)
 80030b0:	9a01      	ldr	r2, [sp, #4]
 80030b2:	6800      	ldr	r0, [r0, #0]
 80030b4:	9403      	str	r4, [sp, #12]
 80030b6:	2300      	movs	r3, #0
 80030b8:	9311      	str	r3, [sp, #68]	; 0x44
 80030ba:	9316      	str	r3, [sp, #88]	; 0x58
 80030bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80030c4:	a904      	add	r1, sp, #16
 80030c6:	4623      	mov	r3, r4
 80030c8:	f000 ffc0 	bl	800404c <__ssvfiscanf_r>
 80030cc:	b01f      	add	sp, #124	; 0x7c
 80030ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030d2:	b003      	add	sp, #12
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	08003103 	.word	0x08003103
 80030dc:	20000064 	.word	0x20000064

080030e0 <__sread>:
 80030e0:	b510      	push	{r4, lr}
 80030e2:	460c      	mov	r4, r1
 80030e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030e8:	f001 fc06 	bl	80048f8 <_read_r>
 80030ec:	2800      	cmp	r0, #0
 80030ee:	bfab      	itete	ge
 80030f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80030f2:	89a3      	ldrhlt	r3, [r4, #12]
 80030f4:	181b      	addge	r3, r3, r0
 80030f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80030fa:	bfac      	ite	ge
 80030fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80030fe:	81a3      	strhlt	r3, [r4, #12]
 8003100:	bd10      	pop	{r4, pc}

08003102 <__seofread>:
 8003102:	2000      	movs	r0, #0
 8003104:	4770      	bx	lr

08003106 <__swrite>:
 8003106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800310a:	461f      	mov	r7, r3
 800310c:	898b      	ldrh	r3, [r1, #12]
 800310e:	05db      	lsls	r3, r3, #23
 8003110:	4605      	mov	r5, r0
 8003112:	460c      	mov	r4, r1
 8003114:	4616      	mov	r6, r2
 8003116:	d505      	bpl.n	8003124 <__swrite+0x1e>
 8003118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800311c:	2302      	movs	r3, #2
 800311e:	2200      	movs	r2, #0
 8003120:	f000 fcc8 	bl	8003ab4 <_lseek_r>
 8003124:	89a3      	ldrh	r3, [r4, #12]
 8003126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800312a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800312e:	81a3      	strh	r3, [r4, #12]
 8003130:	4632      	mov	r2, r6
 8003132:	463b      	mov	r3, r7
 8003134:	4628      	mov	r0, r5
 8003136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800313a:	f000 ba69 	b.w	8003610 <_write_r>

0800313e <__sseek>:
 800313e:	b510      	push	{r4, lr}
 8003140:	460c      	mov	r4, r1
 8003142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003146:	f000 fcb5 	bl	8003ab4 <_lseek_r>
 800314a:	1c43      	adds	r3, r0, #1
 800314c:	89a3      	ldrh	r3, [r4, #12]
 800314e:	bf15      	itete	ne
 8003150:	6560      	strne	r0, [r4, #84]	; 0x54
 8003152:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003156:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800315a:	81a3      	strheq	r3, [r4, #12]
 800315c:	bf18      	it	ne
 800315e:	81a3      	strhne	r3, [r4, #12]
 8003160:	bd10      	pop	{r4, pc}

08003162 <__sclose>:
 8003162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003166:	f000 badb 	b.w	8003720 <_close_r>

0800316a <strcat>:
 800316a:	b510      	push	{r4, lr}
 800316c:	4602      	mov	r2, r0
 800316e:	7814      	ldrb	r4, [r2, #0]
 8003170:	4613      	mov	r3, r2
 8003172:	3201      	adds	r2, #1
 8003174:	2c00      	cmp	r4, #0
 8003176:	d1fa      	bne.n	800316e <strcat+0x4>
 8003178:	3b01      	subs	r3, #1
 800317a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800317e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003182:	2a00      	cmp	r2, #0
 8003184:	d1f9      	bne.n	800317a <strcat+0x10>
 8003186:	bd10      	pop	{r4, pc}

08003188 <_strerror_r>:
 8003188:	b510      	push	{r4, lr}
 800318a:	4604      	mov	r4, r0
 800318c:	4608      	mov	r0, r1
 800318e:	4611      	mov	r1, r2
 8003190:	288e      	cmp	r0, #142	; 0x8e
 8003192:	f200 8130 	bhi.w	80033f6 <_strerror_r+0x26e>
 8003196:	e8df f010 	tbh	[pc, r0, lsl #1]
 800319a:	0139      	.short	0x0139
 800319c:	0092008f 	.word	0x0092008f
 80031a0:	00960094 	.word	0x00960094
 80031a4:	009a0098 	.word	0x009a0098
 80031a8:	009e009c 	.word	0x009e009c
 80031ac:	00a400a2 	.word	0x00a400a2
 80031b0:	00aa00a8 	.word	0x00aa00a8
 80031b4:	00ae00ac 	.word	0x00ae00ac
 80031b8:	00b0012e 	.word	0x00b0012e
 80031bc:	00b400b2 	.word	0x00b400b2
 80031c0:	00b800b6 	.word	0x00b800b6
 80031c4:	00c000be 	.word	0x00c000be
 80031c8:	00c800c6 	.word	0x00c800c6
 80031cc:	00cc00ca 	.word	0x00cc00ca
 80031d0:	00d200ce 	.word	0x00d200ce
 80031d4:	00d800d6 	.word	0x00d800d6
 80031d8:	00dc00da 	.word	0x00dc00da
 80031dc:	00e000de 	.word	0x00e000de
 80031e0:	00e400e2 	.word	0x00e400e2
 80031e4:	012e012e 	.word	0x012e012e
 80031e8:	012e012e 	.word	0x012e012e
 80031ec:	012e012e 	.word	0x012e012e
 80031f0:	012e012e 	.word	0x012e012e
 80031f4:	00ec00e8 	.word	0x00ec00e8
 80031f8:	012e012e 	.word	0x012e012e
 80031fc:	012e012e 	.word	0x012e012e
 8003200:	012e012e 	.word	0x012e012e
 8003204:	012e012e 	.word	0x012e012e
 8003208:	012e012e 	.word	0x012e012e
 800320c:	012e012e 	.word	0x012e012e
 8003210:	00ee012e 	.word	0x00ee012e
 8003214:	00f00108 	.word	0x00f00108
 8003218:	012e00f2 	.word	0x012e00f2
 800321c:	012e012e 	.word	0x012e012e
 8003220:	012e00f4 	.word	0x012e00f4
 8003224:	012e012e 	.word	0x012e012e
 8003228:	012e00f6 	.word	0x012e00f6
 800322c:	00fa012e 	.word	0x00fa012e
 8003230:	012e012e 	.word	0x012e012e
 8003234:	012e00fc 	.word	0x012e00fc
 8003238:	012e012e 	.word	0x012e012e
 800323c:	012e012e 	.word	0x012e012e
 8003240:	012e012e 	.word	0x012e012e
 8003244:	012e012e 	.word	0x012e012e
 8003248:	00fe012e 	.word	0x00fe012e
 800324c:	0100012e 	.word	0x0100012e
 8003250:	01040102 	.word	0x01040102
 8003254:	012e012e 	.word	0x012e012e
 8003258:	012e0126 	.word	0x012e0126
 800325c:	012e012e 	.word	0x012e012e
 8003260:	012e012e 	.word	0x012e012e
 8003264:	012e012e 	.word	0x012e012e
 8003268:	0114012e 	.word	0x0114012e
 800326c:	010a0106 	.word	0x010a0106
 8003270:	010e010c 	.word	0x010e010c
 8003274:	012e0110 	.word	0x012e0110
 8003278:	01160112 	.word	0x01160112
 800327c:	00ea011a 	.word	0x00ea011a
 8003280:	012c00c2 	.word	0x012c00c2
 8003284:	00d000ba 	.word	0x00d000ba
 8003288:	00a000bc 	.word	0x00a000bc
 800328c:	012a00a6 	.word	0x012a00a6
 8003290:	012e00f8 	.word	0x012e00f8
 8003294:	00c40118 	.word	0x00c40118
 8003298:	011c011e 	.word	0x011c011e
 800329c:	012e012e 	.word	0x012e012e
 80032a0:	012e012e 	.word	0x012e012e
 80032a4:	00d4012e 	.word	0x00d4012e
 80032a8:	012e012e 	.word	0x012e012e
 80032ac:	00e6012e 	.word	0x00e6012e
 80032b0:	01200128 	.word	0x01200128
 80032b4:	01240122 	.word	0x01240122
 80032b8:	4b55      	ldr	r3, [pc, #340]	; (8003410 <_strerror_r+0x288>)
 80032ba:	4618      	mov	r0, r3
 80032bc:	bd10      	pop	{r4, pc}
 80032be:	4b55      	ldr	r3, [pc, #340]	; (8003414 <_strerror_r+0x28c>)
 80032c0:	e7fb      	b.n	80032ba <_strerror_r+0x132>
 80032c2:	4b55      	ldr	r3, [pc, #340]	; (8003418 <_strerror_r+0x290>)
 80032c4:	e7f9      	b.n	80032ba <_strerror_r+0x132>
 80032c6:	4b55      	ldr	r3, [pc, #340]	; (800341c <_strerror_r+0x294>)
 80032c8:	e7f7      	b.n	80032ba <_strerror_r+0x132>
 80032ca:	4b55      	ldr	r3, [pc, #340]	; (8003420 <_strerror_r+0x298>)
 80032cc:	e7f5      	b.n	80032ba <_strerror_r+0x132>
 80032ce:	4b55      	ldr	r3, [pc, #340]	; (8003424 <_strerror_r+0x29c>)
 80032d0:	e7f3      	b.n	80032ba <_strerror_r+0x132>
 80032d2:	4b55      	ldr	r3, [pc, #340]	; (8003428 <_strerror_r+0x2a0>)
 80032d4:	e7f1      	b.n	80032ba <_strerror_r+0x132>
 80032d6:	4b55      	ldr	r3, [pc, #340]	; (800342c <_strerror_r+0x2a4>)
 80032d8:	e7ef      	b.n	80032ba <_strerror_r+0x132>
 80032da:	4b55      	ldr	r3, [pc, #340]	; (8003430 <_strerror_r+0x2a8>)
 80032dc:	e7ed      	b.n	80032ba <_strerror_r+0x132>
 80032de:	4b55      	ldr	r3, [pc, #340]	; (8003434 <_strerror_r+0x2ac>)
 80032e0:	e7eb      	b.n	80032ba <_strerror_r+0x132>
 80032e2:	4b55      	ldr	r3, [pc, #340]	; (8003438 <_strerror_r+0x2b0>)
 80032e4:	e7e9      	b.n	80032ba <_strerror_r+0x132>
 80032e6:	4b55      	ldr	r3, [pc, #340]	; (800343c <_strerror_r+0x2b4>)
 80032e8:	e7e7      	b.n	80032ba <_strerror_r+0x132>
 80032ea:	4b55      	ldr	r3, [pc, #340]	; (8003440 <_strerror_r+0x2b8>)
 80032ec:	e7e5      	b.n	80032ba <_strerror_r+0x132>
 80032ee:	4b55      	ldr	r3, [pc, #340]	; (8003444 <_strerror_r+0x2bc>)
 80032f0:	e7e3      	b.n	80032ba <_strerror_r+0x132>
 80032f2:	4b55      	ldr	r3, [pc, #340]	; (8003448 <_strerror_r+0x2c0>)
 80032f4:	e7e1      	b.n	80032ba <_strerror_r+0x132>
 80032f6:	4b55      	ldr	r3, [pc, #340]	; (800344c <_strerror_r+0x2c4>)
 80032f8:	e7df      	b.n	80032ba <_strerror_r+0x132>
 80032fa:	4b55      	ldr	r3, [pc, #340]	; (8003450 <_strerror_r+0x2c8>)
 80032fc:	e7dd      	b.n	80032ba <_strerror_r+0x132>
 80032fe:	4b55      	ldr	r3, [pc, #340]	; (8003454 <_strerror_r+0x2cc>)
 8003300:	e7db      	b.n	80032ba <_strerror_r+0x132>
 8003302:	4b55      	ldr	r3, [pc, #340]	; (8003458 <_strerror_r+0x2d0>)
 8003304:	e7d9      	b.n	80032ba <_strerror_r+0x132>
 8003306:	4b55      	ldr	r3, [pc, #340]	; (800345c <_strerror_r+0x2d4>)
 8003308:	e7d7      	b.n	80032ba <_strerror_r+0x132>
 800330a:	4b55      	ldr	r3, [pc, #340]	; (8003460 <_strerror_r+0x2d8>)
 800330c:	e7d5      	b.n	80032ba <_strerror_r+0x132>
 800330e:	4b55      	ldr	r3, [pc, #340]	; (8003464 <_strerror_r+0x2dc>)
 8003310:	e7d3      	b.n	80032ba <_strerror_r+0x132>
 8003312:	4b55      	ldr	r3, [pc, #340]	; (8003468 <_strerror_r+0x2e0>)
 8003314:	e7d1      	b.n	80032ba <_strerror_r+0x132>
 8003316:	4b55      	ldr	r3, [pc, #340]	; (800346c <_strerror_r+0x2e4>)
 8003318:	e7cf      	b.n	80032ba <_strerror_r+0x132>
 800331a:	4b55      	ldr	r3, [pc, #340]	; (8003470 <_strerror_r+0x2e8>)
 800331c:	e7cd      	b.n	80032ba <_strerror_r+0x132>
 800331e:	4b55      	ldr	r3, [pc, #340]	; (8003474 <_strerror_r+0x2ec>)
 8003320:	e7cb      	b.n	80032ba <_strerror_r+0x132>
 8003322:	4b55      	ldr	r3, [pc, #340]	; (8003478 <_strerror_r+0x2f0>)
 8003324:	e7c9      	b.n	80032ba <_strerror_r+0x132>
 8003326:	4b55      	ldr	r3, [pc, #340]	; (800347c <_strerror_r+0x2f4>)
 8003328:	e7c7      	b.n	80032ba <_strerror_r+0x132>
 800332a:	4b55      	ldr	r3, [pc, #340]	; (8003480 <_strerror_r+0x2f8>)
 800332c:	e7c5      	b.n	80032ba <_strerror_r+0x132>
 800332e:	4b55      	ldr	r3, [pc, #340]	; (8003484 <_strerror_r+0x2fc>)
 8003330:	e7c3      	b.n	80032ba <_strerror_r+0x132>
 8003332:	4b55      	ldr	r3, [pc, #340]	; (8003488 <_strerror_r+0x300>)
 8003334:	e7c1      	b.n	80032ba <_strerror_r+0x132>
 8003336:	4b55      	ldr	r3, [pc, #340]	; (800348c <_strerror_r+0x304>)
 8003338:	e7bf      	b.n	80032ba <_strerror_r+0x132>
 800333a:	4b55      	ldr	r3, [pc, #340]	; (8003490 <_strerror_r+0x308>)
 800333c:	e7bd      	b.n	80032ba <_strerror_r+0x132>
 800333e:	4b55      	ldr	r3, [pc, #340]	; (8003494 <_strerror_r+0x30c>)
 8003340:	e7bb      	b.n	80032ba <_strerror_r+0x132>
 8003342:	4b55      	ldr	r3, [pc, #340]	; (8003498 <_strerror_r+0x310>)
 8003344:	e7b9      	b.n	80032ba <_strerror_r+0x132>
 8003346:	4b55      	ldr	r3, [pc, #340]	; (800349c <_strerror_r+0x314>)
 8003348:	e7b7      	b.n	80032ba <_strerror_r+0x132>
 800334a:	4b55      	ldr	r3, [pc, #340]	; (80034a0 <_strerror_r+0x318>)
 800334c:	e7b5      	b.n	80032ba <_strerror_r+0x132>
 800334e:	4b55      	ldr	r3, [pc, #340]	; (80034a4 <_strerror_r+0x31c>)
 8003350:	e7b3      	b.n	80032ba <_strerror_r+0x132>
 8003352:	4b55      	ldr	r3, [pc, #340]	; (80034a8 <_strerror_r+0x320>)
 8003354:	e7b1      	b.n	80032ba <_strerror_r+0x132>
 8003356:	4b55      	ldr	r3, [pc, #340]	; (80034ac <_strerror_r+0x324>)
 8003358:	e7af      	b.n	80032ba <_strerror_r+0x132>
 800335a:	4b55      	ldr	r3, [pc, #340]	; (80034b0 <_strerror_r+0x328>)
 800335c:	e7ad      	b.n	80032ba <_strerror_r+0x132>
 800335e:	4b55      	ldr	r3, [pc, #340]	; (80034b4 <_strerror_r+0x32c>)
 8003360:	e7ab      	b.n	80032ba <_strerror_r+0x132>
 8003362:	4b55      	ldr	r3, [pc, #340]	; (80034b8 <_strerror_r+0x330>)
 8003364:	e7a9      	b.n	80032ba <_strerror_r+0x132>
 8003366:	4b55      	ldr	r3, [pc, #340]	; (80034bc <_strerror_r+0x334>)
 8003368:	e7a7      	b.n	80032ba <_strerror_r+0x132>
 800336a:	4b55      	ldr	r3, [pc, #340]	; (80034c0 <_strerror_r+0x338>)
 800336c:	e7a5      	b.n	80032ba <_strerror_r+0x132>
 800336e:	4b55      	ldr	r3, [pc, #340]	; (80034c4 <_strerror_r+0x33c>)
 8003370:	e7a3      	b.n	80032ba <_strerror_r+0x132>
 8003372:	4b55      	ldr	r3, [pc, #340]	; (80034c8 <_strerror_r+0x340>)
 8003374:	e7a1      	b.n	80032ba <_strerror_r+0x132>
 8003376:	4b55      	ldr	r3, [pc, #340]	; (80034cc <_strerror_r+0x344>)
 8003378:	e79f      	b.n	80032ba <_strerror_r+0x132>
 800337a:	4b55      	ldr	r3, [pc, #340]	; (80034d0 <_strerror_r+0x348>)
 800337c:	e79d      	b.n	80032ba <_strerror_r+0x132>
 800337e:	4b55      	ldr	r3, [pc, #340]	; (80034d4 <_strerror_r+0x34c>)
 8003380:	e79b      	b.n	80032ba <_strerror_r+0x132>
 8003382:	4b55      	ldr	r3, [pc, #340]	; (80034d8 <_strerror_r+0x350>)
 8003384:	e799      	b.n	80032ba <_strerror_r+0x132>
 8003386:	4b55      	ldr	r3, [pc, #340]	; (80034dc <_strerror_r+0x354>)
 8003388:	e797      	b.n	80032ba <_strerror_r+0x132>
 800338a:	4b55      	ldr	r3, [pc, #340]	; (80034e0 <_strerror_r+0x358>)
 800338c:	e795      	b.n	80032ba <_strerror_r+0x132>
 800338e:	4b55      	ldr	r3, [pc, #340]	; (80034e4 <_strerror_r+0x35c>)
 8003390:	e793      	b.n	80032ba <_strerror_r+0x132>
 8003392:	4b55      	ldr	r3, [pc, #340]	; (80034e8 <_strerror_r+0x360>)
 8003394:	e791      	b.n	80032ba <_strerror_r+0x132>
 8003396:	4b55      	ldr	r3, [pc, #340]	; (80034ec <_strerror_r+0x364>)
 8003398:	e78f      	b.n	80032ba <_strerror_r+0x132>
 800339a:	4b55      	ldr	r3, [pc, #340]	; (80034f0 <_strerror_r+0x368>)
 800339c:	e78d      	b.n	80032ba <_strerror_r+0x132>
 800339e:	4b55      	ldr	r3, [pc, #340]	; (80034f4 <_strerror_r+0x36c>)
 80033a0:	e78b      	b.n	80032ba <_strerror_r+0x132>
 80033a2:	4b55      	ldr	r3, [pc, #340]	; (80034f8 <_strerror_r+0x370>)
 80033a4:	e789      	b.n	80032ba <_strerror_r+0x132>
 80033a6:	4b55      	ldr	r3, [pc, #340]	; (80034fc <_strerror_r+0x374>)
 80033a8:	e787      	b.n	80032ba <_strerror_r+0x132>
 80033aa:	4b55      	ldr	r3, [pc, #340]	; (8003500 <_strerror_r+0x378>)
 80033ac:	e785      	b.n	80032ba <_strerror_r+0x132>
 80033ae:	4b55      	ldr	r3, [pc, #340]	; (8003504 <_strerror_r+0x37c>)
 80033b0:	e783      	b.n	80032ba <_strerror_r+0x132>
 80033b2:	4b55      	ldr	r3, [pc, #340]	; (8003508 <_strerror_r+0x380>)
 80033b4:	e781      	b.n	80032ba <_strerror_r+0x132>
 80033b6:	4b55      	ldr	r3, [pc, #340]	; (800350c <_strerror_r+0x384>)
 80033b8:	e77f      	b.n	80032ba <_strerror_r+0x132>
 80033ba:	4b55      	ldr	r3, [pc, #340]	; (8003510 <_strerror_r+0x388>)
 80033bc:	e77d      	b.n	80032ba <_strerror_r+0x132>
 80033be:	4b55      	ldr	r3, [pc, #340]	; (8003514 <_strerror_r+0x38c>)
 80033c0:	e77b      	b.n	80032ba <_strerror_r+0x132>
 80033c2:	4b55      	ldr	r3, [pc, #340]	; (8003518 <_strerror_r+0x390>)
 80033c4:	e779      	b.n	80032ba <_strerror_r+0x132>
 80033c6:	4b55      	ldr	r3, [pc, #340]	; (800351c <_strerror_r+0x394>)
 80033c8:	e777      	b.n	80032ba <_strerror_r+0x132>
 80033ca:	4b55      	ldr	r3, [pc, #340]	; (8003520 <_strerror_r+0x398>)
 80033cc:	e775      	b.n	80032ba <_strerror_r+0x132>
 80033ce:	4b55      	ldr	r3, [pc, #340]	; (8003524 <_strerror_r+0x39c>)
 80033d0:	e773      	b.n	80032ba <_strerror_r+0x132>
 80033d2:	4b55      	ldr	r3, [pc, #340]	; (8003528 <_strerror_r+0x3a0>)
 80033d4:	e771      	b.n	80032ba <_strerror_r+0x132>
 80033d6:	4b55      	ldr	r3, [pc, #340]	; (800352c <_strerror_r+0x3a4>)
 80033d8:	e76f      	b.n	80032ba <_strerror_r+0x132>
 80033da:	4b55      	ldr	r3, [pc, #340]	; (8003530 <_strerror_r+0x3a8>)
 80033dc:	e76d      	b.n	80032ba <_strerror_r+0x132>
 80033de:	4b55      	ldr	r3, [pc, #340]	; (8003534 <_strerror_r+0x3ac>)
 80033e0:	e76b      	b.n	80032ba <_strerror_r+0x132>
 80033e2:	4b55      	ldr	r3, [pc, #340]	; (8003538 <_strerror_r+0x3b0>)
 80033e4:	e769      	b.n	80032ba <_strerror_r+0x132>
 80033e6:	4b55      	ldr	r3, [pc, #340]	; (800353c <_strerror_r+0x3b4>)
 80033e8:	e767      	b.n	80032ba <_strerror_r+0x132>
 80033ea:	4b55      	ldr	r3, [pc, #340]	; (8003540 <_strerror_r+0x3b8>)
 80033ec:	e765      	b.n	80032ba <_strerror_r+0x132>
 80033ee:	4b55      	ldr	r3, [pc, #340]	; (8003544 <_strerror_r+0x3bc>)
 80033f0:	e763      	b.n	80032ba <_strerror_r+0x132>
 80033f2:	4b55      	ldr	r3, [pc, #340]	; (8003548 <_strerror_r+0x3c0>)
 80033f4:	e761      	b.n	80032ba <_strerror_r+0x132>
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf14      	ite	ne
 80033fa:	461a      	movne	r2, r3
 80033fc:	4622      	moveq	r2, r4
 80033fe:	f000 f8b3 	bl	8003568 <_user_strerror>
 8003402:	4b52      	ldr	r3, [pc, #328]	; (800354c <_strerror_r+0x3c4>)
 8003404:	2800      	cmp	r0, #0
 8003406:	bf18      	it	ne
 8003408:	4603      	movne	r3, r0
 800340a:	e756      	b.n	80032ba <_strerror_r+0x132>
 800340c:	4b50      	ldr	r3, [pc, #320]	; (8003550 <_strerror_r+0x3c8>)
 800340e:	e754      	b.n	80032ba <_strerror_r+0x132>
 8003410:	0800530d 	.word	0x0800530d
 8003414:	08005317 	.word	0x08005317
 8003418:	08005331 	.word	0x08005331
 800341c:	08005341 	.word	0x08005341
 8003420:	08005359 	.word	0x08005359
 8003424:	08005363 	.word	0x08005363
 8003428:	0800537d 	.word	0x0800537d
 800342c:	0800538f 	.word	0x0800538f
 8003430:	080053a1 	.word	0x080053a1
 8003434:	080053ba 	.word	0x080053ba
 8003438:	080053ca 	.word	0x080053ca
 800343c:	080053d6 	.word	0x080053d6
 8003440:	080053f3 	.word	0x080053f3
 8003444:	08005405 	.word	0x08005405
 8003448:	08005416 	.word	0x08005416
 800344c:	08005428 	.word	0x08005428
 8003450:	08005434 	.word	0x08005434
 8003454:	0800544c 	.word	0x0800544c
 8003458:	08005458 	.word	0x08005458
 800345c:	0800546a 	.word	0x0800546a
 8003460:	08005479 	.word	0x08005479
 8003464:	08005489 	.word	0x08005489
 8003468:	08005496 	.word	0x08005496
 800346c:	080054b5 	.word	0x080054b5
 8003470:	080054c4 	.word	0x080054c4
 8003474:	080054d5 	.word	0x080054d5
 8003478:	080054f9 	.word	0x080054f9
 800347c:	08005517 	.word	0x08005517
 8003480:	08005535 	.word	0x08005535
 8003484:	08005555 	.word	0x08005555
 8003488:	0800556c 	.word	0x0800556c
 800348c:	0800557b 	.word	0x0800557b
 8003490:	0800558a 	.word	0x0800558a
 8003494:	0800559e 	.word	0x0800559e
 8003498:	080055b6 	.word	0x080055b6
 800349c:	080055c4 	.word	0x080055c4
 80034a0:	080055d1 	.word	0x080055d1
 80034a4:	080055e7 	.word	0x080055e7
 80034a8:	080055f6 	.word	0x080055f6
 80034ac:	08005602 	.word	0x08005602
 80034b0:	08005631 	.word	0x08005631
 80034b4:	08005642 	.word	0x08005642
 80034b8:	0800565d 	.word	0x0800565d
 80034bc:	08005670 	.word	0x08005670
 80034c0:	08005686 	.word	0x08005686
 80034c4:	0800568f 	.word	0x0800568f
 80034c8:	080056a6 	.word	0x080056a6
 80034cc:	080056ae 	.word	0x080056ae
 80034d0:	080056bb 	.word	0x080056bb
 80034d4:	080056d0 	.word	0x080056d0
 80034d8:	080056e4 	.word	0x080056e4
 80034dc:	080056fc 	.word	0x080056fc
 80034e0:	0800570b 	.word	0x0800570b
 80034e4:	0800571c 	.word	0x0800571c
 80034e8:	0800572f 	.word	0x0800572f
 80034ec:	0800573b 	.word	0x0800573b
 80034f0:	08005754 	.word	0x08005754
 80034f4:	08005768 	.word	0x08005768
 80034f8:	08005783 	.word	0x08005783
 80034fc:	0800579b 	.word	0x0800579b
 8003500:	080057b5 	.word	0x080057b5
 8003504:	080057bd 	.word	0x080057bd
 8003508:	080057ed 	.word	0x080057ed
 800350c:	0800580c 	.word	0x0800580c
 8003510:	0800582b 	.word	0x0800582b
 8003514:	08005842 	.word	0x08005842
 8003518:	08005855 	.word	0x08005855
 800351c:	0800586e 	.word	0x0800586e
 8003520:	08005885 	.word	0x08005885
 8003524:	0800589b 	.word	0x0800589b
 8003528:	080058bc 	.word	0x080058bc
 800352c:	080058d4 	.word	0x080058d4
 8003530:	080058f0 	.word	0x080058f0
 8003534:	08005903 	.word	0x08005903
 8003538:	08005919 	.word	0x08005919
 800353c:	0800592d 	.word	0x0800592d
 8003540:	0800594f 	.word	0x0800594f
 8003544:	08005975 	.word	0x08005975
 8003548:	08005986 	.word	0x08005986
 800354c:	080052ed 	.word	0x080052ed
 8003550:	08005305 	.word	0x08005305

08003554 <strerror>:
 8003554:	4601      	mov	r1, r0
 8003556:	4803      	ldr	r0, [pc, #12]	; (8003564 <strerror+0x10>)
 8003558:	2300      	movs	r3, #0
 800355a:	6800      	ldr	r0, [r0, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	f7ff be13 	b.w	8003188 <_strerror_r>
 8003562:	bf00      	nop
 8003564:	20000064 	.word	0x20000064

08003568 <_user_strerror>:
 8003568:	2000      	movs	r0, #0
 800356a:	4770      	bx	lr

0800356c <__swbuf_r>:
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	460e      	mov	r6, r1
 8003570:	4614      	mov	r4, r2
 8003572:	4605      	mov	r5, r0
 8003574:	b118      	cbz	r0, 800357e <__swbuf_r+0x12>
 8003576:	6983      	ldr	r3, [r0, #24]
 8003578:	b90b      	cbnz	r3, 800357e <__swbuf_r+0x12>
 800357a:	f000 f9fb 	bl	8003974 <__sinit>
 800357e:	4b21      	ldr	r3, [pc, #132]	; (8003604 <__swbuf_r+0x98>)
 8003580:	429c      	cmp	r4, r3
 8003582:	d12b      	bne.n	80035dc <__swbuf_r+0x70>
 8003584:	686c      	ldr	r4, [r5, #4]
 8003586:	69a3      	ldr	r3, [r4, #24]
 8003588:	60a3      	str	r3, [r4, #8]
 800358a:	89a3      	ldrh	r3, [r4, #12]
 800358c:	071a      	lsls	r2, r3, #28
 800358e:	d52f      	bpl.n	80035f0 <__swbuf_r+0x84>
 8003590:	6923      	ldr	r3, [r4, #16]
 8003592:	b36b      	cbz	r3, 80035f0 <__swbuf_r+0x84>
 8003594:	6923      	ldr	r3, [r4, #16]
 8003596:	6820      	ldr	r0, [r4, #0]
 8003598:	1ac0      	subs	r0, r0, r3
 800359a:	6963      	ldr	r3, [r4, #20]
 800359c:	b2f6      	uxtb	r6, r6
 800359e:	4283      	cmp	r3, r0
 80035a0:	4637      	mov	r7, r6
 80035a2:	dc04      	bgt.n	80035ae <__swbuf_r+0x42>
 80035a4:	4621      	mov	r1, r4
 80035a6:	4628      	mov	r0, r5
 80035a8:	f000 f950 	bl	800384c <_fflush_r>
 80035ac:	bb30      	cbnz	r0, 80035fc <__swbuf_r+0x90>
 80035ae:	68a3      	ldr	r3, [r4, #8]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	60a3      	str	r3, [r4, #8]
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	6022      	str	r2, [r4, #0]
 80035ba:	701e      	strb	r6, [r3, #0]
 80035bc:	6963      	ldr	r3, [r4, #20]
 80035be:	3001      	adds	r0, #1
 80035c0:	4283      	cmp	r3, r0
 80035c2:	d004      	beq.n	80035ce <__swbuf_r+0x62>
 80035c4:	89a3      	ldrh	r3, [r4, #12]
 80035c6:	07db      	lsls	r3, r3, #31
 80035c8:	d506      	bpl.n	80035d8 <__swbuf_r+0x6c>
 80035ca:	2e0a      	cmp	r6, #10
 80035cc:	d104      	bne.n	80035d8 <__swbuf_r+0x6c>
 80035ce:	4621      	mov	r1, r4
 80035d0:	4628      	mov	r0, r5
 80035d2:	f000 f93b 	bl	800384c <_fflush_r>
 80035d6:	b988      	cbnz	r0, 80035fc <__swbuf_r+0x90>
 80035d8:	4638      	mov	r0, r7
 80035da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035dc:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <__swbuf_r+0x9c>)
 80035de:	429c      	cmp	r4, r3
 80035e0:	d101      	bne.n	80035e6 <__swbuf_r+0x7a>
 80035e2:	68ac      	ldr	r4, [r5, #8]
 80035e4:	e7cf      	b.n	8003586 <__swbuf_r+0x1a>
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <__swbuf_r+0xa0>)
 80035e8:	429c      	cmp	r4, r3
 80035ea:	bf08      	it	eq
 80035ec:	68ec      	ldreq	r4, [r5, #12]
 80035ee:	e7ca      	b.n	8003586 <__swbuf_r+0x1a>
 80035f0:	4621      	mov	r1, r4
 80035f2:	4628      	mov	r0, r5
 80035f4:	f000 f81e 	bl	8003634 <__swsetup_r>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d0cb      	beq.n	8003594 <__swbuf_r+0x28>
 80035fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003600:	e7ea      	b.n	80035d8 <__swbuf_r+0x6c>
 8003602:	bf00      	nop
 8003604:	080059bc 	.word	0x080059bc
 8003608:	080059dc 	.word	0x080059dc
 800360c:	0800599c 	.word	0x0800599c

08003610 <_write_r>:
 8003610:	b538      	push	{r3, r4, r5, lr}
 8003612:	4d07      	ldr	r5, [pc, #28]	; (8003630 <_write_r+0x20>)
 8003614:	4604      	mov	r4, r0
 8003616:	4608      	mov	r0, r1
 8003618:	4611      	mov	r1, r2
 800361a:	2200      	movs	r2, #0
 800361c:	602a      	str	r2, [r5, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	f001 fb9c 	bl	8004d5c <_write>
 8003624:	1c43      	adds	r3, r0, #1
 8003626:	d102      	bne.n	800362e <_write_r+0x1e>
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	b103      	cbz	r3, 800362e <_write_r+0x1e>
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	bd38      	pop	{r3, r4, r5, pc}
 8003630:	20000d14 	.word	0x20000d14

08003634 <__swsetup_r>:
 8003634:	4b32      	ldr	r3, [pc, #200]	; (8003700 <__swsetup_r+0xcc>)
 8003636:	b570      	push	{r4, r5, r6, lr}
 8003638:	681d      	ldr	r5, [r3, #0]
 800363a:	4606      	mov	r6, r0
 800363c:	460c      	mov	r4, r1
 800363e:	b125      	cbz	r5, 800364a <__swsetup_r+0x16>
 8003640:	69ab      	ldr	r3, [r5, #24]
 8003642:	b913      	cbnz	r3, 800364a <__swsetup_r+0x16>
 8003644:	4628      	mov	r0, r5
 8003646:	f000 f995 	bl	8003974 <__sinit>
 800364a:	4b2e      	ldr	r3, [pc, #184]	; (8003704 <__swsetup_r+0xd0>)
 800364c:	429c      	cmp	r4, r3
 800364e:	d10f      	bne.n	8003670 <__swsetup_r+0x3c>
 8003650:	686c      	ldr	r4, [r5, #4]
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003658:	0719      	lsls	r1, r3, #28
 800365a:	d42c      	bmi.n	80036b6 <__swsetup_r+0x82>
 800365c:	06dd      	lsls	r5, r3, #27
 800365e:	d411      	bmi.n	8003684 <__swsetup_r+0x50>
 8003660:	2309      	movs	r3, #9
 8003662:	6033      	str	r3, [r6, #0]
 8003664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003668:	81a3      	strh	r3, [r4, #12]
 800366a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800366e:	e03e      	b.n	80036ee <__swsetup_r+0xba>
 8003670:	4b25      	ldr	r3, [pc, #148]	; (8003708 <__swsetup_r+0xd4>)
 8003672:	429c      	cmp	r4, r3
 8003674:	d101      	bne.n	800367a <__swsetup_r+0x46>
 8003676:	68ac      	ldr	r4, [r5, #8]
 8003678:	e7eb      	b.n	8003652 <__swsetup_r+0x1e>
 800367a:	4b24      	ldr	r3, [pc, #144]	; (800370c <__swsetup_r+0xd8>)
 800367c:	429c      	cmp	r4, r3
 800367e:	bf08      	it	eq
 8003680:	68ec      	ldreq	r4, [r5, #12]
 8003682:	e7e6      	b.n	8003652 <__swsetup_r+0x1e>
 8003684:	0758      	lsls	r0, r3, #29
 8003686:	d512      	bpl.n	80036ae <__swsetup_r+0x7a>
 8003688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800368a:	b141      	cbz	r1, 800369e <__swsetup_r+0x6a>
 800368c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003690:	4299      	cmp	r1, r3
 8003692:	d002      	beq.n	800369a <__swsetup_r+0x66>
 8003694:	4630      	mov	r0, r6
 8003696:	f000 faab 	bl	8003bf0 <_free_r>
 800369a:	2300      	movs	r3, #0
 800369c:	6363      	str	r3, [r4, #52]	; 0x34
 800369e:	89a3      	ldrh	r3, [r4, #12]
 80036a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036a4:	81a3      	strh	r3, [r4, #12]
 80036a6:	2300      	movs	r3, #0
 80036a8:	6063      	str	r3, [r4, #4]
 80036aa:	6923      	ldr	r3, [r4, #16]
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	89a3      	ldrh	r3, [r4, #12]
 80036b0:	f043 0308 	orr.w	r3, r3, #8
 80036b4:	81a3      	strh	r3, [r4, #12]
 80036b6:	6923      	ldr	r3, [r4, #16]
 80036b8:	b94b      	cbnz	r3, 80036ce <__swsetup_r+0x9a>
 80036ba:	89a3      	ldrh	r3, [r4, #12]
 80036bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c4:	d003      	beq.n	80036ce <__swsetup_r+0x9a>
 80036c6:	4621      	mov	r1, r4
 80036c8:	4630      	mov	r0, r6
 80036ca:	f000 fa2b 	bl	8003b24 <__smakebuf_r>
 80036ce:	89a0      	ldrh	r0, [r4, #12]
 80036d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036d4:	f010 0301 	ands.w	r3, r0, #1
 80036d8:	d00a      	beq.n	80036f0 <__swsetup_r+0xbc>
 80036da:	2300      	movs	r3, #0
 80036dc:	60a3      	str	r3, [r4, #8]
 80036de:	6963      	ldr	r3, [r4, #20]
 80036e0:	425b      	negs	r3, r3
 80036e2:	61a3      	str	r3, [r4, #24]
 80036e4:	6923      	ldr	r3, [r4, #16]
 80036e6:	b943      	cbnz	r3, 80036fa <__swsetup_r+0xc6>
 80036e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036ec:	d1ba      	bne.n	8003664 <__swsetup_r+0x30>
 80036ee:	bd70      	pop	{r4, r5, r6, pc}
 80036f0:	0781      	lsls	r1, r0, #30
 80036f2:	bf58      	it	pl
 80036f4:	6963      	ldrpl	r3, [r4, #20]
 80036f6:	60a3      	str	r3, [r4, #8]
 80036f8:	e7f4      	b.n	80036e4 <__swsetup_r+0xb0>
 80036fa:	2000      	movs	r0, #0
 80036fc:	e7f7      	b.n	80036ee <__swsetup_r+0xba>
 80036fe:	bf00      	nop
 8003700:	20000064 	.word	0x20000064
 8003704:	080059bc 	.word	0x080059bc
 8003708:	080059dc 	.word	0x080059dc
 800370c:	0800599c 	.word	0x0800599c

08003710 <abort>:
 8003710:	b508      	push	{r3, lr}
 8003712:	2006      	movs	r0, #6
 8003714:	f001 f964 	bl	80049e0 <raise>
 8003718:	2001      	movs	r0, #1
 800371a:	f001 fb27 	bl	8004d6c <_exit>
	...

08003720 <_close_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	4d06      	ldr	r5, [pc, #24]	; (800373c <_close_r+0x1c>)
 8003724:	2300      	movs	r3, #0
 8003726:	4604      	mov	r4, r0
 8003728:	4608      	mov	r0, r1
 800372a:	602b      	str	r3, [r5, #0]
 800372c:	f001 fad0 	bl	8004cd0 <_close>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d102      	bne.n	800373a <_close_r+0x1a>
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	b103      	cbz	r3, 800373a <_close_r+0x1a>
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	20000d14 	.word	0x20000d14

08003740 <__sflush_r>:
 8003740:	898a      	ldrh	r2, [r1, #12]
 8003742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003746:	4605      	mov	r5, r0
 8003748:	0710      	lsls	r0, r2, #28
 800374a:	460c      	mov	r4, r1
 800374c:	d458      	bmi.n	8003800 <__sflush_r+0xc0>
 800374e:	684b      	ldr	r3, [r1, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	dc05      	bgt.n	8003760 <__sflush_r+0x20>
 8003754:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	dc02      	bgt.n	8003760 <__sflush_r+0x20>
 800375a:	2000      	movs	r0, #0
 800375c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003762:	2e00      	cmp	r6, #0
 8003764:	d0f9      	beq.n	800375a <__sflush_r+0x1a>
 8003766:	2300      	movs	r3, #0
 8003768:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800376c:	682f      	ldr	r7, [r5, #0]
 800376e:	6a21      	ldr	r1, [r4, #32]
 8003770:	602b      	str	r3, [r5, #0]
 8003772:	d032      	beq.n	80037da <__sflush_r+0x9a>
 8003774:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003776:	89a3      	ldrh	r3, [r4, #12]
 8003778:	075a      	lsls	r2, r3, #29
 800377a:	d505      	bpl.n	8003788 <__sflush_r+0x48>
 800377c:	6863      	ldr	r3, [r4, #4]
 800377e:	1ac0      	subs	r0, r0, r3
 8003780:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003782:	b10b      	cbz	r3, 8003788 <__sflush_r+0x48>
 8003784:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003786:	1ac0      	subs	r0, r0, r3
 8003788:	2300      	movs	r3, #0
 800378a:	4602      	mov	r2, r0
 800378c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800378e:	6a21      	ldr	r1, [r4, #32]
 8003790:	4628      	mov	r0, r5
 8003792:	47b0      	blx	r6
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	89a3      	ldrh	r3, [r4, #12]
 8003798:	d106      	bne.n	80037a8 <__sflush_r+0x68>
 800379a:	6829      	ldr	r1, [r5, #0]
 800379c:	291d      	cmp	r1, #29
 800379e:	d82b      	bhi.n	80037f8 <__sflush_r+0xb8>
 80037a0:	4a29      	ldr	r2, [pc, #164]	; (8003848 <__sflush_r+0x108>)
 80037a2:	410a      	asrs	r2, r1
 80037a4:	07d6      	lsls	r6, r2, #31
 80037a6:	d427      	bmi.n	80037f8 <__sflush_r+0xb8>
 80037a8:	2200      	movs	r2, #0
 80037aa:	6062      	str	r2, [r4, #4]
 80037ac:	04d9      	lsls	r1, r3, #19
 80037ae:	6922      	ldr	r2, [r4, #16]
 80037b0:	6022      	str	r2, [r4, #0]
 80037b2:	d504      	bpl.n	80037be <__sflush_r+0x7e>
 80037b4:	1c42      	adds	r2, r0, #1
 80037b6:	d101      	bne.n	80037bc <__sflush_r+0x7c>
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	b903      	cbnz	r3, 80037be <__sflush_r+0x7e>
 80037bc:	6560      	str	r0, [r4, #84]	; 0x54
 80037be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037c0:	602f      	str	r7, [r5, #0]
 80037c2:	2900      	cmp	r1, #0
 80037c4:	d0c9      	beq.n	800375a <__sflush_r+0x1a>
 80037c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037ca:	4299      	cmp	r1, r3
 80037cc:	d002      	beq.n	80037d4 <__sflush_r+0x94>
 80037ce:	4628      	mov	r0, r5
 80037d0:	f000 fa0e 	bl	8003bf0 <_free_r>
 80037d4:	2000      	movs	r0, #0
 80037d6:	6360      	str	r0, [r4, #52]	; 0x34
 80037d8:	e7c0      	b.n	800375c <__sflush_r+0x1c>
 80037da:	2301      	movs	r3, #1
 80037dc:	4628      	mov	r0, r5
 80037de:	47b0      	blx	r6
 80037e0:	1c41      	adds	r1, r0, #1
 80037e2:	d1c8      	bne.n	8003776 <__sflush_r+0x36>
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0c5      	beq.n	8003776 <__sflush_r+0x36>
 80037ea:	2b1d      	cmp	r3, #29
 80037ec:	d001      	beq.n	80037f2 <__sflush_r+0xb2>
 80037ee:	2b16      	cmp	r3, #22
 80037f0:	d101      	bne.n	80037f6 <__sflush_r+0xb6>
 80037f2:	602f      	str	r7, [r5, #0]
 80037f4:	e7b1      	b.n	800375a <__sflush_r+0x1a>
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037fc:	81a3      	strh	r3, [r4, #12]
 80037fe:	e7ad      	b.n	800375c <__sflush_r+0x1c>
 8003800:	690f      	ldr	r7, [r1, #16]
 8003802:	2f00      	cmp	r7, #0
 8003804:	d0a9      	beq.n	800375a <__sflush_r+0x1a>
 8003806:	0793      	lsls	r3, r2, #30
 8003808:	680e      	ldr	r6, [r1, #0]
 800380a:	bf08      	it	eq
 800380c:	694b      	ldreq	r3, [r1, #20]
 800380e:	600f      	str	r7, [r1, #0]
 8003810:	bf18      	it	ne
 8003812:	2300      	movne	r3, #0
 8003814:	eba6 0807 	sub.w	r8, r6, r7
 8003818:	608b      	str	r3, [r1, #8]
 800381a:	f1b8 0f00 	cmp.w	r8, #0
 800381e:	dd9c      	ble.n	800375a <__sflush_r+0x1a>
 8003820:	6a21      	ldr	r1, [r4, #32]
 8003822:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003824:	4643      	mov	r3, r8
 8003826:	463a      	mov	r2, r7
 8003828:	4628      	mov	r0, r5
 800382a:	47b0      	blx	r6
 800382c:	2800      	cmp	r0, #0
 800382e:	dc06      	bgt.n	800383e <__sflush_r+0xfe>
 8003830:	89a3      	ldrh	r3, [r4, #12]
 8003832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003836:	81a3      	strh	r3, [r4, #12]
 8003838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800383c:	e78e      	b.n	800375c <__sflush_r+0x1c>
 800383e:	4407      	add	r7, r0
 8003840:	eba8 0800 	sub.w	r8, r8, r0
 8003844:	e7e9      	b.n	800381a <__sflush_r+0xda>
 8003846:	bf00      	nop
 8003848:	dfbffffe 	.word	0xdfbffffe

0800384c <_fflush_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	690b      	ldr	r3, [r1, #16]
 8003850:	4605      	mov	r5, r0
 8003852:	460c      	mov	r4, r1
 8003854:	b913      	cbnz	r3, 800385c <_fflush_r+0x10>
 8003856:	2500      	movs	r5, #0
 8003858:	4628      	mov	r0, r5
 800385a:	bd38      	pop	{r3, r4, r5, pc}
 800385c:	b118      	cbz	r0, 8003866 <_fflush_r+0x1a>
 800385e:	6983      	ldr	r3, [r0, #24]
 8003860:	b90b      	cbnz	r3, 8003866 <_fflush_r+0x1a>
 8003862:	f000 f887 	bl	8003974 <__sinit>
 8003866:	4b14      	ldr	r3, [pc, #80]	; (80038b8 <_fflush_r+0x6c>)
 8003868:	429c      	cmp	r4, r3
 800386a:	d11b      	bne.n	80038a4 <_fflush_r+0x58>
 800386c:	686c      	ldr	r4, [r5, #4]
 800386e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0ef      	beq.n	8003856 <_fflush_r+0xa>
 8003876:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003878:	07d0      	lsls	r0, r2, #31
 800387a:	d404      	bmi.n	8003886 <_fflush_r+0x3a>
 800387c:	0599      	lsls	r1, r3, #22
 800387e:	d402      	bmi.n	8003886 <_fflush_r+0x3a>
 8003880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003882:	f000 f915 	bl	8003ab0 <__retarget_lock_acquire_recursive>
 8003886:	4628      	mov	r0, r5
 8003888:	4621      	mov	r1, r4
 800388a:	f7ff ff59 	bl	8003740 <__sflush_r>
 800388e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003890:	07da      	lsls	r2, r3, #31
 8003892:	4605      	mov	r5, r0
 8003894:	d4e0      	bmi.n	8003858 <_fflush_r+0xc>
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	059b      	lsls	r3, r3, #22
 800389a:	d4dd      	bmi.n	8003858 <_fflush_r+0xc>
 800389c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800389e:	f000 f908 	bl	8003ab2 <__retarget_lock_release_recursive>
 80038a2:	e7d9      	b.n	8003858 <_fflush_r+0xc>
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <_fflush_r+0x70>)
 80038a6:	429c      	cmp	r4, r3
 80038a8:	d101      	bne.n	80038ae <_fflush_r+0x62>
 80038aa:	68ac      	ldr	r4, [r5, #8]
 80038ac:	e7df      	b.n	800386e <_fflush_r+0x22>
 80038ae:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <_fflush_r+0x74>)
 80038b0:	429c      	cmp	r4, r3
 80038b2:	bf08      	it	eq
 80038b4:	68ec      	ldreq	r4, [r5, #12]
 80038b6:	e7da      	b.n	800386e <_fflush_r+0x22>
 80038b8:	080059bc 	.word	0x080059bc
 80038bc:	080059dc 	.word	0x080059dc
 80038c0:	0800599c 	.word	0x0800599c

080038c4 <std>:
 80038c4:	2300      	movs	r3, #0
 80038c6:	b510      	push	{r4, lr}
 80038c8:	4604      	mov	r4, r0
 80038ca:	e9c0 3300 	strd	r3, r3, [r0]
 80038ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038d2:	6083      	str	r3, [r0, #8]
 80038d4:	8181      	strh	r1, [r0, #12]
 80038d6:	6643      	str	r3, [r0, #100]	; 0x64
 80038d8:	81c2      	strh	r2, [r0, #14]
 80038da:	6183      	str	r3, [r0, #24]
 80038dc:	4619      	mov	r1, r3
 80038de:	2208      	movs	r2, #8
 80038e0:	305c      	adds	r0, #92	; 0x5c
 80038e2:	f7ff f9ad 	bl	8002c40 <memset>
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <std+0x38>)
 80038e8:	6263      	str	r3, [r4, #36]	; 0x24
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <std+0x3c>)
 80038ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <std+0x40>)
 80038f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <std+0x44>)
 80038f4:	6224      	str	r4, [r4, #32]
 80038f6:	6323      	str	r3, [r4, #48]	; 0x30
 80038f8:	bd10      	pop	{r4, pc}
 80038fa:	bf00      	nop
 80038fc:	080030e1 	.word	0x080030e1
 8003900:	08003107 	.word	0x08003107
 8003904:	0800313f 	.word	0x0800313f
 8003908:	08003163 	.word	0x08003163

0800390c <_cleanup_r>:
 800390c:	4901      	ldr	r1, [pc, #4]	; (8003914 <_cleanup_r+0x8>)
 800390e:	f000 b8af 	b.w	8003a70 <_fwalk_reent>
 8003912:	bf00      	nop
 8003914:	0800384d 	.word	0x0800384d

08003918 <__sfmoreglue>:
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	2368      	movs	r3, #104	; 0x68
 800391c:	1e4d      	subs	r5, r1, #1
 800391e:	435d      	muls	r5, r3
 8003920:	460e      	mov	r6, r1
 8003922:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003926:	f7ff f9b3 	bl	8002c90 <_malloc_r>
 800392a:	4604      	mov	r4, r0
 800392c:	b140      	cbz	r0, 8003940 <__sfmoreglue+0x28>
 800392e:	2100      	movs	r1, #0
 8003930:	e9c0 1600 	strd	r1, r6, [r0]
 8003934:	300c      	adds	r0, #12
 8003936:	60a0      	str	r0, [r4, #8]
 8003938:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800393c:	f7ff f980 	bl	8002c40 <memset>
 8003940:	4620      	mov	r0, r4
 8003942:	bd70      	pop	{r4, r5, r6, pc}

08003944 <__sfp_lock_acquire>:
 8003944:	4801      	ldr	r0, [pc, #4]	; (800394c <__sfp_lock_acquire+0x8>)
 8003946:	f000 b8b3 	b.w	8003ab0 <__retarget_lock_acquire_recursive>
 800394a:	bf00      	nop
 800394c:	20000d11 	.word	0x20000d11

08003950 <__sfp_lock_release>:
 8003950:	4801      	ldr	r0, [pc, #4]	; (8003958 <__sfp_lock_release+0x8>)
 8003952:	f000 b8ae 	b.w	8003ab2 <__retarget_lock_release_recursive>
 8003956:	bf00      	nop
 8003958:	20000d11 	.word	0x20000d11

0800395c <__sinit_lock_acquire>:
 800395c:	4801      	ldr	r0, [pc, #4]	; (8003964 <__sinit_lock_acquire+0x8>)
 800395e:	f000 b8a7 	b.w	8003ab0 <__retarget_lock_acquire_recursive>
 8003962:	bf00      	nop
 8003964:	20000d12 	.word	0x20000d12

08003968 <__sinit_lock_release>:
 8003968:	4801      	ldr	r0, [pc, #4]	; (8003970 <__sinit_lock_release+0x8>)
 800396a:	f000 b8a2 	b.w	8003ab2 <__retarget_lock_release_recursive>
 800396e:	bf00      	nop
 8003970:	20000d12 	.word	0x20000d12

08003974 <__sinit>:
 8003974:	b510      	push	{r4, lr}
 8003976:	4604      	mov	r4, r0
 8003978:	f7ff fff0 	bl	800395c <__sinit_lock_acquire>
 800397c:	69a3      	ldr	r3, [r4, #24]
 800397e:	b11b      	cbz	r3, 8003988 <__sinit+0x14>
 8003980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003984:	f7ff bff0 	b.w	8003968 <__sinit_lock_release>
 8003988:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800398c:	6523      	str	r3, [r4, #80]	; 0x50
 800398e:	4b13      	ldr	r3, [pc, #76]	; (80039dc <__sinit+0x68>)
 8003990:	4a13      	ldr	r2, [pc, #76]	; (80039e0 <__sinit+0x6c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	62a2      	str	r2, [r4, #40]	; 0x28
 8003996:	42a3      	cmp	r3, r4
 8003998:	bf04      	itt	eq
 800399a:	2301      	moveq	r3, #1
 800399c:	61a3      	streq	r3, [r4, #24]
 800399e:	4620      	mov	r0, r4
 80039a0:	f000 f820 	bl	80039e4 <__sfp>
 80039a4:	6060      	str	r0, [r4, #4]
 80039a6:	4620      	mov	r0, r4
 80039a8:	f000 f81c 	bl	80039e4 <__sfp>
 80039ac:	60a0      	str	r0, [r4, #8]
 80039ae:	4620      	mov	r0, r4
 80039b0:	f000 f818 	bl	80039e4 <__sfp>
 80039b4:	2200      	movs	r2, #0
 80039b6:	60e0      	str	r0, [r4, #12]
 80039b8:	2104      	movs	r1, #4
 80039ba:	6860      	ldr	r0, [r4, #4]
 80039bc:	f7ff ff82 	bl	80038c4 <std>
 80039c0:	68a0      	ldr	r0, [r4, #8]
 80039c2:	2201      	movs	r2, #1
 80039c4:	2109      	movs	r1, #9
 80039c6:	f7ff ff7d 	bl	80038c4 <std>
 80039ca:	68e0      	ldr	r0, [r4, #12]
 80039cc:	2202      	movs	r2, #2
 80039ce:	2112      	movs	r1, #18
 80039d0:	f7ff ff78 	bl	80038c4 <std>
 80039d4:	2301      	movs	r3, #1
 80039d6:	61a3      	str	r3, [r4, #24]
 80039d8:	e7d2      	b.n	8003980 <__sinit+0xc>
 80039da:	bf00      	nop
 80039dc:	080052f0 	.word	0x080052f0
 80039e0:	0800390d 	.word	0x0800390d

080039e4 <__sfp>:
 80039e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e6:	4607      	mov	r7, r0
 80039e8:	f7ff ffac 	bl	8003944 <__sfp_lock_acquire>
 80039ec:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <__sfp+0x84>)
 80039ee:	681e      	ldr	r6, [r3, #0]
 80039f0:	69b3      	ldr	r3, [r6, #24]
 80039f2:	b913      	cbnz	r3, 80039fa <__sfp+0x16>
 80039f4:	4630      	mov	r0, r6
 80039f6:	f7ff ffbd 	bl	8003974 <__sinit>
 80039fa:	3648      	adds	r6, #72	; 0x48
 80039fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	d503      	bpl.n	8003a0c <__sfp+0x28>
 8003a04:	6833      	ldr	r3, [r6, #0]
 8003a06:	b30b      	cbz	r3, 8003a4c <__sfp+0x68>
 8003a08:	6836      	ldr	r6, [r6, #0]
 8003a0a:	e7f7      	b.n	80039fc <__sfp+0x18>
 8003a0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a10:	b9d5      	cbnz	r5, 8003a48 <__sfp+0x64>
 8003a12:	4b16      	ldr	r3, [pc, #88]	; (8003a6c <__sfp+0x88>)
 8003a14:	60e3      	str	r3, [r4, #12]
 8003a16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a1a:	6665      	str	r5, [r4, #100]	; 0x64
 8003a1c:	f000 f847 	bl	8003aae <__retarget_lock_init_recursive>
 8003a20:	f7ff ff96 	bl	8003950 <__sfp_lock_release>
 8003a24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a2c:	6025      	str	r5, [r4, #0]
 8003a2e:	61a5      	str	r5, [r4, #24]
 8003a30:	2208      	movs	r2, #8
 8003a32:	4629      	mov	r1, r5
 8003a34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a38:	f7ff f902 	bl	8002c40 <memset>
 8003a3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a44:	4620      	mov	r0, r4
 8003a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a48:	3468      	adds	r4, #104	; 0x68
 8003a4a:	e7d9      	b.n	8003a00 <__sfp+0x1c>
 8003a4c:	2104      	movs	r1, #4
 8003a4e:	4638      	mov	r0, r7
 8003a50:	f7ff ff62 	bl	8003918 <__sfmoreglue>
 8003a54:	4604      	mov	r4, r0
 8003a56:	6030      	str	r0, [r6, #0]
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d1d5      	bne.n	8003a08 <__sfp+0x24>
 8003a5c:	f7ff ff78 	bl	8003950 <__sfp_lock_release>
 8003a60:	230c      	movs	r3, #12
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	e7ee      	b.n	8003a44 <__sfp+0x60>
 8003a66:	bf00      	nop
 8003a68:	080052f0 	.word	0x080052f0
 8003a6c:	ffff0001 	.word	0xffff0001

08003a70 <_fwalk_reent>:
 8003a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a74:	4606      	mov	r6, r0
 8003a76:	4688      	mov	r8, r1
 8003a78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a7c:	2700      	movs	r7, #0
 8003a7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a82:	f1b9 0901 	subs.w	r9, r9, #1
 8003a86:	d505      	bpl.n	8003a94 <_fwalk_reent+0x24>
 8003a88:	6824      	ldr	r4, [r4, #0]
 8003a8a:	2c00      	cmp	r4, #0
 8003a8c:	d1f7      	bne.n	8003a7e <_fwalk_reent+0xe>
 8003a8e:	4638      	mov	r0, r7
 8003a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a94:	89ab      	ldrh	r3, [r5, #12]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d907      	bls.n	8003aaa <_fwalk_reent+0x3a>
 8003a9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	d003      	beq.n	8003aaa <_fwalk_reent+0x3a>
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	4630      	mov	r0, r6
 8003aa6:	47c0      	blx	r8
 8003aa8:	4307      	orrs	r7, r0
 8003aaa:	3568      	adds	r5, #104	; 0x68
 8003aac:	e7e9      	b.n	8003a82 <_fwalk_reent+0x12>

08003aae <__retarget_lock_init_recursive>:
 8003aae:	4770      	bx	lr

08003ab0 <__retarget_lock_acquire_recursive>:
 8003ab0:	4770      	bx	lr

08003ab2 <__retarget_lock_release_recursive>:
 8003ab2:	4770      	bx	lr

08003ab4 <_lseek_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	4d07      	ldr	r5, [pc, #28]	; (8003ad4 <_lseek_r+0x20>)
 8003ab8:	4604      	mov	r4, r0
 8003aba:	4608      	mov	r0, r1
 8003abc:	4611      	mov	r1, r2
 8003abe:	2200      	movs	r2, #0
 8003ac0:	602a      	str	r2, [r5, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f001 f92c 	bl	8004d20 <_lseek>
 8003ac8:	1c43      	adds	r3, r0, #1
 8003aca:	d102      	bne.n	8003ad2 <_lseek_r+0x1e>
 8003acc:	682b      	ldr	r3, [r5, #0]
 8003ace:	b103      	cbz	r3, 8003ad2 <_lseek_r+0x1e>
 8003ad0:	6023      	str	r3, [r4, #0]
 8003ad2:	bd38      	pop	{r3, r4, r5, pc}
 8003ad4:	20000d14 	.word	0x20000d14

08003ad8 <__swhatbuf_r>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	460c      	mov	r4, r1
 8003adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ae0:	2900      	cmp	r1, #0
 8003ae2:	b096      	sub	sp, #88	; 0x58
 8003ae4:	4615      	mov	r5, r2
 8003ae6:	461e      	mov	r6, r3
 8003ae8:	da0d      	bge.n	8003b06 <__swhatbuf_r+0x2e>
 8003aea:	89a3      	ldrh	r3, [r4, #12]
 8003aec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003af0:	f04f 0100 	mov.w	r1, #0
 8003af4:	bf0c      	ite	eq
 8003af6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003afa:	2340      	movne	r3, #64	; 0x40
 8003afc:	2000      	movs	r0, #0
 8003afe:	6031      	str	r1, [r6, #0]
 8003b00:	602b      	str	r3, [r5, #0]
 8003b02:	b016      	add	sp, #88	; 0x58
 8003b04:	bd70      	pop	{r4, r5, r6, pc}
 8003b06:	466a      	mov	r2, sp
 8003b08:	f001 f8b8 	bl	8004c7c <_fstat_r>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	dbec      	blt.n	8003aea <__swhatbuf_r+0x12>
 8003b10:	9901      	ldr	r1, [sp, #4]
 8003b12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003b16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003b1a:	4259      	negs	r1, r3
 8003b1c:	4159      	adcs	r1, r3
 8003b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b22:	e7eb      	b.n	8003afc <__swhatbuf_r+0x24>

08003b24 <__smakebuf_r>:
 8003b24:	898b      	ldrh	r3, [r1, #12]
 8003b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b28:	079d      	lsls	r5, r3, #30
 8003b2a:	4606      	mov	r6, r0
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	d507      	bpl.n	8003b40 <__smakebuf_r+0x1c>
 8003b30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b34:	6023      	str	r3, [r4, #0]
 8003b36:	6123      	str	r3, [r4, #16]
 8003b38:	2301      	movs	r3, #1
 8003b3a:	6163      	str	r3, [r4, #20]
 8003b3c:	b002      	add	sp, #8
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	ab01      	add	r3, sp, #4
 8003b42:	466a      	mov	r2, sp
 8003b44:	f7ff ffc8 	bl	8003ad8 <__swhatbuf_r>
 8003b48:	9900      	ldr	r1, [sp, #0]
 8003b4a:	4605      	mov	r5, r0
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	f7ff f89f 	bl	8002c90 <_malloc_r>
 8003b52:	b948      	cbnz	r0, 8003b68 <__smakebuf_r+0x44>
 8003b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b58:	059a      	lsls	r2, r3, #22
 8003b5a:	d4ef      	bmi.n	8003b3c <__smakebuf_r+0x18>
 8003b5c:	f023 0303 	bic.w	r3, r3, #3
 8003b60:	f043 0302 	orr.w	r3, r3, #2
 8003b64:	81a3      	strh	r3, [r4, #12]
 8003b66:	e7e3      	b.n	8003b30 <__smakebuf_r+0xc>
 8003b68:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <__smakebuf_r+0x7c>)
 8003b6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	6020      	str	r0, [r4, #0]
 8003b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b74:	81a3      	strh	r3, [r4, #12]
 8003b76:	9b00      	ldr	r3, [sp, #0]
 8003b78:	6163      	str	r3, [r4, #20]
 8003b7a:	9b01      	ldr	r3, [sp, #4]
 8003b7c:	6120      	str	r0, [r4, #16]
 8003b7e:	b15b      	cbz	r3, 8003b98 <__smakebuf_r+0x74>
 8003b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b84:	4630      	mov	r0, r6
 8003b86:	f001 f88b 	bl	8004ca0 <_isatty_r>
 8003b8a:	b128      	cbz	r0, 8003b98 <__smakebuf_r+0x74>
 8003b8c:	89a3      	ldrh	r3, [r4, #12]
 8003b8e:	f023 0303 	bic.w	r3, r3, #3
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	81a3      	strh	r3, [r4, #12]
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	431d      	orrs	r5, r3
 8003b9c:	81a5      	strh	r5, [r4, #12]
 8003b9e:	e7cd      	b.n	8003b3c <__smakebuf_r+0x18>
 8003ba0:	0800390d 	.word	0x0800390d

08003ba4 <memmove>:
 8003ba4:	4288      	cmp	r0, r1
 8003ba6:	b510      	push	{r4, lr}
 8003ba8:	eb01 0402 	add.w	r4, r1, r2
 8003bac:	d902      	bls.n	8003bb4 <memmove+0x10>
 8003bae:	4284      	cmp	r4, r0
 8003bb0:	4623      	mov	r3, r4
 8003bb2:	d807      	bhi.n	8003bc4 <memmove+0x20>
 8003bb4:	1e43      	subs	r3, r0, #1
 8003bb6:	42a1      	cmp	r1, r4
 8003bb8:	d008      	beq.n	8003bcc <memmove+0x28>
 8003bba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bc2:	e7f8      	b.n	8003bb6 <memmove+0x12>
 8003bc4:	4402      	add	r2, r0
 8003bc6:	4601      	mov	r1, r0
 8003bc8:	428a      	cmp	r2, r1
 8003bca:	d100      	bne.n	8003bce <memmove+0x2a>
 8003bcc:	bd10      	pop	{r4, pc}
 8003bce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bd6:	e7f7      	b.n	8003bc8 <memmove+0x24>

08003bd8 <__malloc_lock>:
 8003bd8:	4801      	ldr	r0, [pc, #4]	; (8003be0 <__malloc_lock+0x8>)
 8003bda:	f7ff bf69 	b.w	8003ab0 <__retarget_lock_acquire_recursive>
 8003bde:	bf00      	nop
 8003be0:	20000d10 	.word	0x20000d10

08003be4 <__malloc_unlock>:
 8003be4:	4801      	ldr	r0, [pc, #4]	; (8003bec <__malloc_unlock+0x8>)
 8003be6:	f7ff bf64 	b.w	8003ab2 <__retarget_lock_release_recursive>
 8003bea:	bf00      	nop
 8003bec:	20000d10 	.word	0x20000d10

08003bf0 <_free_r>:
 8003bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003bf2:	2900      	cmp	r1, #0
 8003bf4:	d044      	beq.n	8003c80 <_free_r+0x90>
 8003bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bfa:	9001      	str	r0, [sp, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f1a1 0404 	sub.w	r4, r1, #4
 8003c02:	bfb8      	it	lt
 8003c04:	18e4      	addlt	r4, r4, r3
 8003c06:	f7ff ffe7 	bl	8003bd8 <__malloc_lock>
 8003c0a:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <_free_r+0x94>)
 8003c0c:	9801      	ldr	r0, [sp, #4]
 8003c0e:	6813      	ldr	r3, [r2, #0]
 8003c10:	b933      	cbnz	r3, 8003c20 <_free_r+0x30>
 8003c12:	6063      	str	r3, [r4, #4]
 8003c14:	6014      	str	r4, [r2, #0]
 8003c16:	b003      	add	sp, #12
 8003c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c1c:	f7ff bfe2 	b.w	8003be4 <__malloc_unlock>
 8003c20:	42a3      	cmp	r3, r4
 8003c22:	d908      	bls.n	8003c36 <_free_r+0x46>
 8003c24:	6825      	ldr	r5, [r4, #0]
 8003c26:	1961      	adds	r1, r4, r5
 8003c28:	428b      	cmp	r3, r1
 8003c2a:	bf01      	itttt	eq
 8003c2c:	6819      	ldreq	r1, [r3, #0]
 8003c2e:	685b      	ldreq	r3, [r3, #4]
 8003c30:	1949      	addeq	r1, r1, r5
 8003c32:	6021      	streq	r1, [r4, #0]
 8003c34:	e7ed      	b.n	8003c12 <_free_r+0x22>
 8003c36:	461a      	mov	r2, r3
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	b10b      	cbz	r3, 8003c40 <_free_r+0x50>
 8003c3c:	42a3      	cmp	r3, r4
 8003c3e:	d9fa      	bls.n	8003c36 <_free_r+0x46>
 8003c40:	6811      	ldr	r1, [r2, #0]
 8003c42:	1855      	adds	r5, r2, r1
 8003c44:	42a5      	cmp	r5, r4
 8003c46:	d10b      	bne.n	8003c60 <_free_r+0x70>
 8003c48:	6824      	ldr	r4, [r4, #0]
 8003c4a:	4421      	add	r1, r4
 8003c4c:	1854      	adds	r4, r2, r1
 8003c4e:	42a3      	cmp	r3, r4
 8003c50:	6011      	str	r1, [r2, #0]
 8003c52:	d1e0      	bne.n	8003c16 <_free_r+0x26>
 8003c54:	681c      	ldr	r4, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	6053      	str	r3, [r2, #4]
 8003c5a:	440c      	add	r4, r1
 8003c5c:	6014      	str	r4, [r2, #0]
 8003c5e:	e7da      	b.n	8003c16 <_free_r+0x26>
 8003c60:	d902      	bls.n	8003c68 <_free_r+0x78>
 8003c62:	230c      	movs	r3, #12
 8003c64:	6003      	str	r3, [r0, #0]
 8003c66:	e7d6      	b.n	8003c16 <_free_r+0x26>
 8003c68:	6825      	ldr	r5, [r4, #0]
 8003c6a:	1961      	adds	r1, r4, r5
 8003c6c:	428b      	cmp	r3, r1
 8003c6e:	bf04      	itt	eq
 8003c70:	6819      	ldreq	r1, [r3, #0]
 8003c72:	685b      	ldreq	r3, [r3, #4]
 8003c74:	6063      	str	r3, [r4, #4]
 8003c76:	bf04      	itt	eq
 8003c78:	1949      	addeq	r1, r1, r5
 8003c7a:	6021      	streq	r1, [r4, #0]
 8003c7c:	6054      	str	r4, [r2, #4]
 8003c7e:	e7ca      	b.n	8003c16 <_free_r+0x26>
 8003c80:	b003      	add	sp, #12
 8003c82:	bd30      	pop	{r4, r5, pc}
 8003c84:	20000d08 	.word	0x20000d08

08003c88 <_realloc_r>:
 8003c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c8c:	4680      	mov	r8, r0
 8003c8e:	4614      	mov	r4, r2
 8003c90:	460e      	mov	r6, r1
 8003c92:	b921      	cbnz	r1, 8003c9e <_realloc_r+0x16>
 8003c94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c98:	4611      	mov	r1, r2
 8003c9a:	f7fe bff9 	b.w	8002c90 <_malloc_r>
 8003c9e:	b92a      	cbnz	r2, 8003cac <_realloc_r+0x24>
 8003ca0:	f7ff ffa6 	bl	8003bf0 <_free_r>
 8003ca4:	4625      	mov	r5, r4
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cac:	f001 f808 	bl	8004cc0 <_malloc_usable_size_r>
 8003cb0:	4284      	cmp	r4, r0
 8003cb2:	4607      	mov	r7, r0
 8003cb4:	d802      	bhi.n	8003cbc <_realloc_r+0x34>
 8003cb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003cba:	d812      	bhi.n	8003ce2 <_realloc_r+0x5a>
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	4640      	mov	r0, r8
 8003cc0:	f7fe ffe6 	bl	8002c90 <_malloc_r>
 8003cc4:	4605      	mov	r5, r0
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d0ed      	beq.n	8003ca6 <_realloc_r+0x1e>
 8003cca:	42bc      	cmp	r4, r7
 8003ccc:	4622      	mov	r2, r4
 8003cce:	4631      	mov	r1, r6
 8003cd0:	bf28      	it	cs
 8003cd2:	463a      	movcs	r2, r7
 8003cd4:	f7fe ffa6 	bl	8002c24 <memcpy>
 8003cd8:	4631      	mov	r1, r6
 8003cda:	4640      	mov	r0, r8
 8003cdc:	f7ff ff88 	bl	8003bf0 <_free_r>
 8003ce0:	e7e1      	b.n	8003ca6 <_realloc_r+0x1e>
 8003ce2:	4635      	mov	r5, r6
 8003ce4:	e7df      	b.n	8003ca6 <_realloc_r+0x1e>

08003ce6 <__ssputs_r>:
 8003ce6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cea:	688e      	ldr	r6, [r1, #8]
 8003cec:	461f      	mov	r7, r3
 8003cee:	42be      	cmp	r6, r7
 8003cf0:	680b      	ldr	r3, [r1, #0]
 8003cf2:	4682      	mov	sl, r0
 8003cf4:	460c      	mov	r4, r1
 8003cf6:	4690      	mov	r8, r2
 8003cf8:	d82c      	bhi.n	8003d54 <__ssputs_r+0x6e>
 8003cfa:	898a      	ldrh	r2, [r1, #12]
 8003cfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d00:	d026      	beq.n	8003d50 <__ssputs_r+0x6a>
 8003d02:	6965      	ldr	r5, [r4, #20]
 8003d04:	6909      	ldr	r1, [r1, #16]
 8003d06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d0a:	eba3 0901 	sub.w	r9, r3, r1
 8003d0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d12:	1c7b      	adds	r3, r7, #1
 8003d14:	444b      	add	r3, r9
 8003d16:	106d      	asrs	r5, r5, #1
 8003d18:	429d      	cmp	r5, r3
 8003d1a:	bf38      	it	cc
 8003d1c:	461d      	movcc	r5, r3
 8003d1e:	0553      	lsls	r3, r2, #21
 8003d20:	d527      	bpl.n	8003d72 <__ssputs_r+0x8c>
 8003d22:	4629      	mov	r1, r5
 8003d24:	f7fe ffb4 	bl	8002c90 <_malloc_r>
 8003d28:	4606      	mov	r6, r0
 8003d2a:	b360      	cbz	r0, 8003d86 <__ssputs_r+0xa0>
 8003d2c:	6921      	ldr	r1, [r4, #16]
 8003d2e:	464a      	mov	r2, r9
 8003d30:	f7fe ff78 	bl	8002c24 <memcpy>
 8003d34:	89a3      	ldrh	r3, [r4, #12]
 8003d36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3e:	81a3      	strh	r3, [r4, #12]
 8003d40:	6126      	str	r6, [r4, #16]
 8003d42:	6165      	str	r5, [r4, #20]
 8003d44:	444e      	add	r6, r9
 8003d46:	eba5 0509 	sub.w	r5, r5, r9
 8003d4a:	6026      	str	r6, [r4, #0]
 8003d4c:	60a5      	str	r5, [r4, #8]
 8003d4e:	463e      	mov	r6, r7
 8003d50:	42be      	cmp	r6, r7
 8003d52:	d900      	bls.n	8003d56 <__ssputs_r+0x70>
 8003d54:	463e      	mov	r6, r7
 8003d56:	6820      	ldr	r0, [r4, #0]
 8003d58:	4632      	mov	r2, r6
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	f7ff ff22 	bl	8003ba4 <memmove>
 8003d60:	68a3      	ldr	r3, [r4, #8]
 8003d62:	1b9b      	subs	r3, r3, r6
 8003d64:	60a3      	str	r3, [r4, #8]
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	4433      	add	r3, r6
 8003d6a:	6023      	str	r3, [r4, #0]
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d72:	462a      	mov	r2, r5
 8003d74:	f7ff ff88 	bl	8003c88 <_realloc_r>
 8003d78:	4606      	mov	r6, r0
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d1e0      	bne.n	8003d40 <__ssputs_r+0x5a>
 8003d7e:	6921      	ldr	r1, [r4, #16]
 8003d80:	4650      	mov	r0, sl
 8003d82:	f7ff ff35 	bl	8003bf0 <_free_r>
 8003d86:	230c      	movs	r3, #12
 8003d88:	f8ca 3000 	str.w	r3, [sl]
 8003d8c:	89a3      	ldrh	r3, [r4, #12]
 8003d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d92:	81a3      	strh	r3, [r4, #12]
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d98:	e7e9      	b.n	8003d6e <__ssputs_r+0x88>
	...

08003d9c <_svfiprintf_r>:
 8003d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da0:	4698      	mov	r8, r3
 8003da2:	898b      	ldrh	r3, [r1, #12]
 8003da4:	061b      	lsls	r3, r3, #24
 8003da6:	b09d      	sub	sp, #116	; 0x74
 8003da8:	4607      	mov	r7, r0
 8003daa:	460d      	mov	r5, r1
 8003dac:	4614      	mov	r4, r2
 8003dae:	d50e      	bpl.n	8003dce <_svfiprintf_r+0x32>
 8003db0:	690b      	ldr	r3, [r1, #16]
 8003db2:	b963      	cbnz	r3, 8003dce <_svfiprintf_r+0x32>
 8003db4:	2140      	movs	r1, #64	; 0x40
 8003db6:	f7fe ff6b 	bl	8002c90 <_malloc_r>
 8003dba:	6028      	str	r0, [r5, #0]
 8003dbc:	6128      	str	r0, [r5, #16]
 8003dbe:	b920      	cbnz	r0, 8003dca <_svfiprintf_r+0x2e>
 8003dc0:	230c      	movs	r3, #12
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dc8:	e0d0      	b.n	8003f6c <_svfiprintf_r+0x1d0>
 8003dca:	2340      	movs	r3, #64	; 0x40
 8003dcc:	616b      	str	r3, [r5, #20]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd2:	2320      	movs	r3, #32
 8003dd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ddc:	2330      	movs	r3, #48	; 0x30
 8003dde:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f84 <_svfiprintf_r+0x1e8>
 8003de2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003de6:	f04f 0901 	mov.w	r9, #1
 8003dea:	4623      	mov	r3, r4
 8003dec:	469a      	mov	sl, r3
 8003dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003df2:	b10a      	cbz	r2, 8003df8 <_svfiprintf_r+0x5c>
 8003df4:	2a25      	cmp	r2, #37	; 0x25
 8003df6:	d1f9      	bne.n	8003dec <_svfiprintf_r+0x50>
 8003df8:	ebba 0b04 	subs.w	fp, sl, r4
 8003dfc:	d00b      	beq.n	8003e16 <_svfiprintf_r+0x7a>
 8003dfe:	465b      	mov	r3, fp
 8003e00:	4622      	mov	r2, r4
 8003e02:	4629      	mov	r1, r5
 8003e04:	4638      	mov	r0, r7
 8003e06:	f7ff ff6e 	bl	8003ce6 <__ssputs_r>
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	f000 80a9 	beq.w	8003f62 <_svfiprintf_r+0x1c6>
 8003e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e12:	445a      	add	r2, fp
 8003e14:	9209      	str	r2, [sp, #36]	; 0x24
 8003e16:	f89a 3000 	ldrb.w	r3, [sl]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 80a1 	beq.w	8003f62 <_svfiprintf_r+0x1c6>
 8003e20:	2300      	movs	r3, #0
 8003e22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e2a:	f10a 0a01 	add.w	sl, sl, #1
 8003e2e:	9304      	str	r3, [sp, #16]
 8003e30:	9307      	str	r3, [sp, #28]
 8003e32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e36:	931a      	str	r3, [sp, #104]	; 0x68
 8003e38:	4654      	mov	r4, sl
 8003e3a:	2205      	movs	r2, #5
 8003e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e40:	4850      	ldr	r0, [pc, #320]	; (8003f84 <_svfiprintf_r+0x1e8>)
 8003e42:	f7fc f9c5 	bl	80001d0 <memchr>
 8003e46:	9a04      	ldr	r2, [sp, #16]
 8003e48:	b9d8      	cbnz	r0, 8003e82 <_svfiprintf_r+0xe6>
 8003e4a:	06d0      	lsls	r0, r2, #27
 8003e4c:	bf44      	itt	mi
 8003e4e:	2320      	movmi	r3, #32
 8003e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e54:	0711      	lsls	r1, r2, #28
 8003e56:	bf44      	itt	mi
 8003e58:	232b      	movmi	r3, #43	; 0x2b
 8003e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e62:	2b2a      	cmp	r3, #42	; 0x2a
 8003e64:	d015      	beq.n	8003e92 <_svfiprintf_r+0xf6>
 8003e66:	9a07      	ldr	r2, [sp, #28]
 8003e68:	4654      	mov	r4, sl
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	f04f 0c0a 	mov.w	ip, #10
 8003e70:	4621      	mov	r1, r4
 8003e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e76:	3b30      	subs	r3, #48	; 0x30
 8003e78:	2b09      	cmp	r3, #9
 8003e7a:	d94d      	bls.n	8003f18 <_svfiprintf_r+0x17c>
 8003e7c:	b1b0      	cbz	r0, 8003eac <_svfiprintf_r+0x110>
 8003e7e:	9207      	str	r2, [sp, #28]
 8003e80:	e014      	b.n	8003eac <_svfiprintf_r+0x110>
 8003e82:	eba0 0308 	sub.w	r3, r0, r8
 8003e86:	fa09 f303 	lsl.w	r3, r9, r3
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	9304      	str	r3, [sp, #16]
 8003e8e:	46a2      	mov	sl, r4
 8003e90:	e7d2      	b.n	8003e38 <_svfiprintf_r+0x9c>
 8003e92:	9b03      	ldr	r3, [sp, #12]
 8003e94:	1d19      	adds	r1, r3, #4
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	9103      	str	r1, [sp, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bfbb      	ittet	lt
 8003e9e:	425b      	neglt	r3, r3
 8003ea0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ea4:	9307      	strge	r3, [sp, #28]
 8003ea6:	9307      	strlt	r3, [sp, #28]
 8003ea8:	bfb8      	it	lt
 8003eaa:	9204      	strlt	r2, [sp, #16]
 8003eac:	7823      	ldrb	r3, [r4, #0]
 8003eae:	2b2e      	cmp	r3, #46	; 0x2e
 8003eb0:	d10c      	bne.n	8003ecc <_svfiprintf_r+0x130>
 8003eb2:	7863      	ldrb	r3, [r4, #1]
 8003eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb6:	d134      	bne.n	8003f22 <_svfiprintf_r+0x186>
 8003eb8:	9b03      	ldr	r3, [sp, #12]
 8003eba:	1d1a      	adds	r2, r3, #4
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	9203      	str	r2, [sp, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bfb8      	it	lt
 8003ec4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003ec8:	3402      	adds	r4, #2
 8003eca:	9305      	str	r3, [sp, #20]
 8003ecc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003f94 <_svfiprintf_r+0x1f8>
 8003ed0:	7821      	ldrb	r1, [r4, #0]
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	4650      	mov	r0, sl
 8003ed6:	f7fc f97b 	bl	80001d0 <memchr>
 8003eda:	b138      	cbz	r0, 8003eec <_svfiprintf_r+0x150>
 8003edc:	9b04      	ldr	r3, [sp, #16]
 8003ede:	eba0 000a 	sub.w	r0, r0, sl
 8003ee2:	2240      	movs	r2, #64	; 0x40
 8003ee4:	4082      	lsls	r2, r0
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	3401      	adds	r4, #1
 8003eea:	9304      	str	r3, [sp, #16]
 8003eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ef0:	4825      	ldr	r0, [pc, #148]	; (8003f88 <_svfiprintf_r+0x1ec>)
 8003ef2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ef6:	2206      	movs	r2, #6
 8003ef8:	f7fc f96a 	bl	80001d0 <memchr>
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d038      	beq.n	8003f72 <_svfiprintf_r+0x1d6>
 8003f00:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <_svfiprintf_r+0x1f0>)
 8003f02:	bb1b      	cbnz	r3, 8003f4c <_svfiprintf_r+0x1b0>
 8003f04:	9b03      	ldr	r3, [sp, #12]
 8003f06:	3307      	adds	r3, #7
 8003f08:	f023 0307 	bic.w	r3, r3, #7
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	9303      	str	r3, [sp, #12]
 8003f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f12:	4433      	add	r3, r6
 8003f14:	9309      	str	r3, [sp, #36]	; 0x24
 8003f16:	e768      	b.n	8003dea <_svfiprintf_r+0x4e>
 8003f18:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	2001      	movs	r0, #1
 8003f20:	e7a6      	b.n	8003e70 <_svfiprintf_r+0xd4>
 8003f22:	2300      	movs	r3, #0
 8003f24:	3401      	adds	r4, #1
 8003f26:	9305      	str	r3, [sp, #20]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f04f 0c0a 	mov.w	ip, #10
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f34:	3a30      	subs	r2, #48	; 0x30
 8003f36:	2a09      	cmp	r2, #9
 8003f38:	d903      	bls.n	8003f42 <_svfiprintf_r+0x1a6>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0c6      	beq.n	8003ecc <_svfiprintf_r+0x130>
 8003f3e:	9105      	str	r1, [sp, #20]
 8003f40:	e7c4      	b.n	8003ecc <_svfiprintf_r+0x130>
 8003f42:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f46:	4604      	mov	r4, r0
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e7f0      	b.n	8003f2e <_svfiprintf_r+0x192>
 8003f4c:	ab03      	add	r3, sp, #12
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	462a      	mov	r2, r5
 8003f52:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <_svfiprintf_r+0x1f4>)
 8003f54:	a904      	add	r1, sp, #16
 8003f56:	4638      	mov	r0, r7
 8003f58:	f3af 8000 	nop.w
 8003f5c:	1c42      	adds	r2, r0, #1
 8003f5e:	4606      	mov	r6, r0
 8003f60:	d1d6      	bne.n	8003f10 <_svfiprintf_r+0x174>
 8003f62:	89ab      	ldrh	r3, [r5, #12]
 8003f64:	065b      	lsls	r3, r3, #25
 8003f66:	f53f af2d 	bmi.w	8003dc4 <_svfiprintf_r+0x28>
 8003f6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f6c:	b01d      	add	sp, #116	; 0x74
 8003f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f72:	ab03      	add	r3, sp, #12
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	462a      	mov	r2, r5
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <_svfiprintf_r+0x1f4>)
 8003f7a:	a904      	add	r1, sp, #16
 8003f7c:	4638      	mov	r0, r7
 8003f7e:	f000 fa4b 	bl	8004418 <_printf_i>
 8003f82:	e7eb      	b.n	8003f5c <_svfiprintf_r+0x1c0>
 8003f84:	080052f4 	.word	0x080052f4
 8003f88:	080052fe 	.word	0x080052fe
 8003f8c:	00000000 	.word	0x00000000
 8003f90:	08003ce7 	.word	0x08003ce7
 8003f94:	080052fa 	.word	0x080052fa

08003f98 <_sungetc_r>:
 8003f98:	b538      	push	{r3, r4, r5, lr}
 8003f9a:	1c4b      	adds	r3, r1, #1
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	d103      	bne.n	8003fa8 <_sungetc_r+0x10>
 8003fa0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
 8003fa8:	8993      	ldrh	r3, [r2, #12]
 8003faa:	f023 0320 	bic.w	r3, r3, #32
 8003fae:	8193      	strh	r3, [r2, #12]
 8003fb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fb2:	6852      	ldr	r2, [r2, #4]
 8003fb4:	b2cd      	uxtb	r5, r1
 8003fb6:	b18b      	cbz	r3, 8003fdc <_sungetc_r+0x44>
 8003fb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	dd08      	ble.n	8003fd0 <_sungetc_r+0x38>
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	1e5a      	subs	r2, r3, #1
 8003fc2:	6022      	str	r2, [r4, #0]
 8003fc4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003fc8:	6863      	ldr	r3, [r4, #4]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	6063      	str	r3, [r4, #4]
 8003fce:	e7e9      	b.n	8003fa4 <_sungetc_r+0xc>
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	f000 fe19 	bl	8004c08 <__submore>
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	d0f1      	beq.n	8003fbe <_sungetc_r+0x26>
 8003fda:	e7e1      	b.n	8003fa0 <_sungetc_r+0x8>
 8003fdc:	6921      	ldr	r1, [r4, #16]
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	b151      	cbz	r1, 8003ff8 <_sungetc_r+0x60>
 8003fe2:	4299      	cmp	r1, r3
 8003fe4:	d208      	bcs.n	8003ff8 <_sungetc_r+0x60>
 8003fe6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003fea:	42a9      	cmp	r1, r5
 8003fec:	d104      	bne.n	8003ff8 <_sungetc_r+0x60>
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	3201      	adds	r2, #1
 8003ff2:	6023      	str	r3, [r4, #0]
 8003ff4:	6062      	str	r2, [r4, #4]
 8003ff6:	e7d5      	b.n	8003fa4 <_sungetc_r+0xc>
 8003ff8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004000:	6363      	str	r3, [r4, #52]	; 0x34
 8004002:	2303      	movs	r3, #3
 8004004:	63a3      	str	r3, [r4, #56]	; 0x38
 8004006:	4623      	mov	r3, r4
 8004008:	f803 5f46 	strb.w	r5, [r3, #70]!
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	2301      	movs	r3, #1
 8004010:	e7dc      	b.n	8003fcc <_sungetc_r+0x34>

08004012 <__ssrefill_r>:
 8004012:	b510      	push	{r4, lr}
 8004014:	460c      	mov	r4, r1
 8004016:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004018:	b169      	cbz	r1, 8004036 <__ssrefill_r+0x24>
 800401a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800401e:	4299      	cmp	r1, r3
 8004020:	d001      	beq.n	8004026 <__ssrefill_r+0x14>
 8004022:	f7ff fde5 	bl	8003bf0 <_free_r>
 8004026:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004028:	6063      	str	r3, [r4, #4]
 800402a:	2000      	movs	r0, #0
 800402c:	6360      	str	r0, [r4, #52]	; 0x34
 800402e:	b113      	cbz	r3, 8004036 <__ssrefill_r+0x24>
 8004030:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004032:	6023      	str	r3, [r4, #0]
 8004034:	bd10      	pop	{r4, pc}
 8004036:	6923      	ldr	r3, [r4, #16]
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	2300      	movs	r3, #0
 800403c:	6063      	str	r3, [r4, #4]
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	f043 0320 	orr.w	r3, r3, #32
 8004044:	81a3      	strh	r3, [r4, #12]
 8004046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800404a:	e7f3      	b.n	8004034 <__ssrefill_r+0x22>

0800404c <__ssvfiscanf_r>:
 800404c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004050:	460c      	mov	r4, r1
 8004052:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8004056:	2100      	movs	r1, #0
 8004058:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800405c:	49a6      	ldr	r1, [pc, #664]	; (80042f8 <__ssvfiscanf_r+0x2ac>)
 800405e:	91a0      	str	r1, [sp, #640]	; 0x280
 8004060:	f10d 0804 	add.w	r8, sp, #4
 8004064:	49a5      	ldr	r1, [pc, #660]	; (80042fc <__ssvfiscanf_r+0x2b0>)
 8004066:	4fa6      	ldr	r7, [pc, #664]	; (8004300 <__ssvfiscanf_r+0x2b4>)
 8004068:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004304 <__ssvfiscanf_r+0x2b8>
 800406c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004070:	4606      	mov	r6, r0
 8004072:	91a1      	str	r1, [sp, #644]	; 0x284
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	7813      	ldrb	r3, [r2, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 815a 	beq.w	8004332 <__ssvfiscanf_r+0x2e6>
 800407e:	5cf9      	ldrb	r1, [r7, r3]
 8004080:	f011 0108 	ands.w	r1, r1, #8
 8004084:	f102 0501 	add.w	r5, r2, #1
 8004088:	d019      	beq.n	80040be <__ssvfiscanf_r+0x72>
 800408a:	6863      	ldr	r3, [r4, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	dd0f      	ble.n	80040b0 <__ssvfiscanf_r+0x64>
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	781a      	ldrb	r2, [r3, #0]
 8004094:	5cba      	ldrb	r2, [r7, r2]
 8004096:	0712      	lsls	r2, r2, #28
 8004098:	d401      	bmi.n	800409e <__ssvfiscanf_r+0x52>
 800409a:	462a      	mov	r2, r5
 800409c:	e7eb      	b.n	8004076 <__ssvfiscanf_r+0x2a>
 800409e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80040a0:	3201      	adds	r2, #1
 80040a2:	9245      	str	r2, [sp, #276]	; 0x114
 80040a4:	6862      	ldr	r2, [r4, #4]
 80040a6:	3301      	adds	r3, #1
 80040a8:	3a01      	subs	r2, #1
 80040aa:	6062      	str	r2, [r4, #4]
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	e7ec      	b.n	800408a <__ssvfiscanf_r+0x3e>
 80040b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80040b2:	4621      	mov	r1, r4
 80040b4:	4630      	mov	r0, r6
 80040b6:	4798      	blx	r3
 80040b8:	2800      	cmp	r0, #0
 80040ba:	d0e9      	beq.n	8004090 <__ssvfiscanf_r+0x44>
 80040bc:	e7ed      	b.n	800409a <__ssvfiscanf_r+0x4e>
 80040be:	2b25      	cmp	r3, #37	; 0x25
 80040c0:	d012      	beq.n	80040e8 <__ssvfiscanf_r+0x9c>
 80040c2:	469a      	mov	sl, r3
 80040c4:	6863      	ldr	r3, [r4, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f340 8091 	ble.w	80041ee <__ssvfiscanf_r+0x1a2>
 80040cc:	6822      	ldr	r2, [r4, #0]
 80040ce:	7813      	ldrb	r3, [r2, #0]
 80040d0:	4553      	cmp	r3, sl
 80040d2:	f040 812e 	bne.w	8004332 <__ssvfiscanf_r+0x2e6>
 80040d6:	6863      	ldr	r3, [r4, #4]
 80040d8:	3b01      	subs	r3, #1
 80040da:	6063      	str	r3, [r4, #4]
 80040dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80040de:	3201      	adds	r2, #1
 80040e0:	3301      	adds	r3, #1
 80040e2:	6022      	str	r2, [r4, #0]
 80040e4:	9345      	str	r3, [sp, #276]	; 0x114
 80040e6:	e7d8      	b.n	800409a <__ssvfiscanf_r+0x4e>
 80040e8:	9141      	str	r1, [sp, #260]	; 0x104
 80040ea:	9143      	str	r1, [sp, #268]	; 0x10c
 80040ec:	7853      	ldrb	r3, [r2, #1]
 80040ee:	2b2a      	cmp	r3, #42	; 0x2a
 80040f0:	bf02      	ittt	eq
 80040f2:	2310      	moveq	r3, #16
 80040f4:	1c95      	addeq	r5, r2, #2
 80040f6:	9341      	streq	r3, [sp, #260]	; 0x104
 80040f8:	220a      	movs	r2, #10
 80040fa:	46aa      	mov	sl, r5
 80040fc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004100:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004104:	2b09      	cmp	r3, #9
 8004106:	d91c      	bls.n	8004142 <__ssvfiscanf_r+0xf6>
 8004108:	487e      	ldr	r0, [pc, #504]	; (8004304 <__ssvfiscanf_r+0x2b8>)
 800410a:	2203      	movs	r2, #3
 800410c:	f7fc f860 	bl	80001d0 <memchr>
 8004110:	b138      	cbz	r0, 8004122 <__ssvfiscanf_r+0xd6>
 8004112:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004114:	eba0 0009 	sub.w	r0, r0, r9
 8004118:	2301      	movs	r3, #1
 800411a:	4083      	lsls	r3, r0
 800411c:	4313      	orrs	r3, r2
 800411e:	9341      	str	r3, [sp, #260]	; 0x104
 8004120:	4655      	mov	r5, sl
 8004122:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004126:	2b78      	cmp	r3, #120	; 0x78
 8004128:	d806      	bhi.n	8004138 <__ssvfiscanf_r+0xec>
 800412a:	2b57      	cmp	r3, #87	; 0x57
 800412c:	d810      	bhi.n	8004150 <__ssvfiscanf_r+0x104>
 800412e:	2b25      	cmp	r3, #37	; 0x25
 8004130:	d0c7      	beq.n	80040c2 <__ssvfiscanf_r+0x76>
 8004132:	d857      	bhi.n	80041e4 <__ssvfiscanf_r+0x198>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d065      	beq.n	8004204 <__ssvfiscanf_r+0x1b8>
 8004138:	2303      	movs	r3, #3
 800413a:	9347      	str	r3, [sp, #284]	; 0x11c
 800413c:	230a      	movs	r3, #10
 800413e:	9342      	str	r3, [sp, #264]	; 0x108
 8004140:	e076      	b.n	8004230 <__ssvfiscanf_r+0x1e4>
 8004142:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004144:	fb02 1103 	mla	r1, r2, r3, r1
 8004148:	3930      	subs	r1, #48	; 0x30
 800414a:	9143      	str	r1, [sp, #268]	; 0x10c
 800414c:	4655      	mov	r5, sl
 800414e:	e7d4      	b.n	80040fa <__ssvfiscanf_r+0xae>
 8004150:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004154:	2a20      	cmp	r2, #32
 8004156:	d8ef      	bhi.n	8004138 <__ssvfiscanf_r+0xec>
 8004158:	a101      	add	r1, pc, #4	; (adr r1, 8004160 <__ssvfiscanf_r+0x114>)
 800415a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800415e:	bf00      	nop
 8004160:	08004213 	.word	0x08004213
 8004164:	08004139 	.word	0x08004139
 8004168:	08004139 	.word	0x08004139
 800416c:	08004271 	.word	0x08004271
 8004170:	08004139 	.word	0x08004139
 8004174:	08004139 	.word	0x08004139
 8004178:	08004139 	.word	0x08004139
 800417c:	08004139 	.word	0x08004139
 8004180:	08004139 	.word	0x08004139
 8004184:	08004139 	.word	0x08004139
 8004188:	08004139 	.word	0x08004139
 800418c:	08004287 	.word	0x08004287
 8004190:	0800426d 	.word	0x0800426d
 8004194:	080041eb 	.word	0x080041eb
 8004198:	080041eb 	.word	0x080041eb
 800419c:	080041eb 	.word	0x080041eb
 80041a0:	08004139 	.word	0x08004139
 80041a4:	08004229 	.word	0x08004229
 80041a8:	08004139 	.word	0x08004139
 80041ac:	08004139 	.word	0x08004139
 80041b0:	08004139 	.word	0x08004139
 80041b4:	08004139 	.word	0x08004139
 80041b8:	08004297 	.word	0x08004297
 80041bc:	08004265 	.word	0x08004265
 80041c0:	0800420b 	.word	0x0800420b
 80041c4:	08004139 	.word	0x08004139
 80041c8:	08004139 	.word	0x08004139
 80041cc:	08004293 	.word	0x08004293
 80041d0:	08004139 	.word	0x08004139
 80041d4:	0800426d 	.word	0x0800426d
 80041d8:	08004139 	.word	0x08004139
 80041dc:	08004139 	.word	0x08004139
 80041e0:	08004213 	.word	0x08004213
 80041e4:	3b45      	subs	r3, #69	; 0x45
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d8a6      	bhi.n	8004138 <__ssvfiscanf_r+0xec>
 80041ea:	2305      	movs	r3, #5
 80041ec:	e01f      	b.n	800422e <__ssvfiscanf_r+0x1e2>
 80041ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80041f0:	4621      	mov	r1, r4
 80041f2:	4630      	mov	r0, r6
 80041f4:	4798      	blx	r3
 80041f6:	2800      	cmp	r0, #0
 80041f8:	f43f af68 	beq.w	80040cc <__ssvfiscanf_r+0x80>
 80041fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80041fe:	2800      	cmp	r0, #0
 8004200:	f040 808d 	bne.w	800431e <__ssvfiscanf_r+0x2d2>
 8004204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004208:	e08f      	b.n	800432a <__ssvfiscanf_r+0x2de>
 800420a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800420c:	f042 0220 	orr.w	r2, r2, #32
 8004210:	9241      	str	r2, [sp, #260]	; 0x104
 8004212:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004218:	9241      	str	r2, [sp, #260]	; 0x104
 800421a:	2210      	movs	r2, #16
 800421c:	2b6f      	cmp	r3, #111	; 0x6f
 800421e:	9242      	str	r2, [sp, #264]	; 0x108
 8004220:	bf34      	ite	cc
 8004222:	2303      	movcc	r3, #3
 8004224:	2304      	movcs	r3, #4
 8004226:	e002      	b.n	800422e <__ssvfiscanf_r+0x1e2>
 8004228:	2300      	movs	r3, #0
 800422a:	9342      	str	r3, [sp, #264]	; 0x108
 800422c:	2303      	movs	r3, #3
 800422e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004230:	6863      	ldr	r3, [r4, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	dd3d      	ble.n	80042b2 <__ssvfiscanf_r+0x266>
 8004236:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004238:	0659      	lsls	r1, r3, #25
 800423a:	d404      	bmi.n	8004246 <__ssvfiscanf_r+0x1fa>
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	781a      	ldrb	r2, [r3, #0]
 8004240:	5cba      	ldrb	r2, [r7, r2]
 8004242:	0712      	lsls	r2, r2, #28
 8004244:	d43c      	bmi.n	80042c0 <__ssvfiscanf_r+0x274>
 8004246:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004248:	2b02      	cmp	r3, #2
 800424a:	dc4b      	bgt.n	80042e4 <__ssvfiscanf_r+0x298>
 800424c:	466b      	mov	r3, sp
 800424e:	4622      	mov	r2, r4
 8004250:	a941      	add	r1, sp, #260	; 0x104
 8004252:	4630      	mov	r0, r6
 8004254:	f000 fa02 	bl	800465c <_scanf_chars>
 8004258:	2801      	cmp	r0, #1
 800425a:	d06a      	beq.n	8004332 <__ssvfiscanf_r+0x2e6>
 800425c:	2802      	cmp	r0, #2
 800425e:	f47f af1c 	bne.w	800409a <__ssvfiscanf_r+0x4e>
 8004262:	e7cb      	b.n	80041fc <__ssvfiscanf_r+0x1b0>
 8004264:	2308      	movs	r3, #8
 8004266:	9342      	str	r3, [sp, #264]	; 0x108
 8004268:	2304      	movs	r3, #4
 800426a:	e7e0      	b.n	800422e <__ssvfiscanf_r+0x1e2>
 800426c:	220a      	movs	r2, #10
 800426e:	e7d5      	b.n	800421c <__ssvfiscanf_r+0x1d0>
 8004270:	4629      	mov	r1, r5
 8004272:	4640      	mov	r0, r8
 8004274:	f000 fb52 	bl	800491c <__sccl>
 8004278:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800427a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800427e:	9341      	str	r3, [sp, #260]	; 0x104
 8004280:	4605      	mov	r5, r0
 8004282:	2301      	movs	r3, #1
 8004284:	e7d3      	b.n	800422e <__ssvfiscanf_r+0x1e2>
 8004286:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800428c:	9341      	str	r3, [sp, #260]	; 0x104
 800428e:	2300      	movs	r3, #0
 8004290:	e7cd      	b.n	800422e <__ssvfiscanf_r+0x1e2>
 8004292:	2302      	movs	r3, #2
 8004294:	e7cb      	b.n	800422e <__ssvfiscanf_r+0x1e2>
 8004296:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004298:	06c3      	lsls	r3, r0, #27
 800429a:	f53f aefe 	bmi.w	800409a <__ssvfiscanf_r+0x4e>
 800429e:	9b00      	ldr	r3, [sp, #0]
 80042a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80042a2:	1d19      	adds	r1, r3, #4
 80042a4:	9100      	str	r1, [sp, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	07c0      	lsls	r0, r0, #31
 80042aa:	bf4c      	ite	mi
 80042ac:	801a      	strhmi	r2, [r3, #0]
 80042ae:	601a      	strpl	r2, [r3, #0]
 80042b0:	e6f3      	b.n	800409a <__ssvfiscanf_r+0x4e>
 80042b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80042b4:	4621      	mov	r1, r4
 80042b6:	4630      	mov	r0, r6
 80042b8:	4798      	blx	r3
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d0bb      	beq.n	8004236 <__ssvfiscanf_r+0x1ea>
 80042be:	e79d      	b.n	80041fc <__ssvfiscanf_r+0x1b0>
 80042c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80042c2:	3201      	adds	r2, #1
 80042c4:	9245      	str	r2, [sp, #276]	; 0x114
 80042c6:	6862      	ldr	r2, [r4, #4]
 80042c8:	3a01      	subs	r2, #1
 80042ca:	2a00      	cmp	r2, #0
 80042cc:	6062      	str	r2, [r4, #4]
 80042ce:	dd02      	ble.n	80042d6 <__ssvfiscanf_r+0x28a>
 80042d0:	3301      	adds	r3, #1
 80042d2:	6023      	str	r3, [r4, #0]
 80042d4:	e7b2      	b.n	800423c <__ssvfiscanf_r+0x1f0>
 80042d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80042d8:	4621      	mov	r1, r4
 80042da:	4630      	mov	r0, r6
 80042dc:	4798      	blx	r3
 80042de:	2800      	cmp	r0, #0
 80042e0:	d0ac      	beq.n	800423c <__ssvfiscanf_r+0x1f0>
 80042e2:	e78b      	b.n	80041fc <__ssvfiscanf_r+0x1b0>
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	dc0f      	bgt.n	8004308 <__ssvfiscanf_r+0x2bc>
 80042e8:	466b      	mov	r3, sp
 80042ea:	4622      	mov	r2, r4
 80042ec:	a941      	add	r1, sp, #260	; 0x104
 80042ee:	4630      	mov	r0, r6
 80042f0:	f000 fa0e 	bl	8004710 <_scanf_i>
 80042f4:	e7b0      	b.n	8004258 <__ssvfiscanf_r+0x20c>
 80042f6:	bf00      	nop
 80042f8:	08003f99 	.word	0x08003f99
 80042fc:	08004013 	.word	0x08004013
 8004300:	08005a3a 	.word	0x08005a3a
 8004304:	080052fa 	.word	0x080052fa
 8004308:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <__ssvfiscanf_r+0x2ec>)
 800430a:	2b00      	cmp	r3, #0
 800430c:	f43f aec5 	beq.w	800409a <__ssvfiscanf_r+0x4e>
 8004310:	466b      	mov	r3, sp
 8004312:	4622      	mov	r2, r4
 8004314:	a941      	add	r1, sp, #260	; 0x104
 8004316:	4630      	mov	r0, r6
 8004318:	f3af 8000 	nop.w
 800431c:	e79c      	b.n	8004258 <__ssvfiscanf_r+0x20c>
 800431e:	89a3      	ldrh	r3, [r4, #12]
 8004320:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004324:	bf18      	it	ne
 8004326:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800432a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800432e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004332:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004334:	e7f9      	b.n	800432a <__ssvfiscanf_r+0x2de>
 8004336:	bf00      	nop
 8004338:	00000000 	.word	0x00000000

0800433c <_printf_common>:
 800433c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004340:	4616      	mov	r6, r2
 8004342:	4699      	mov	r9, r3
 8004344:	688a      	ldr	r2, [r1, #8]
 8004346:	690b      	ldr	r3, [r1, #16]
 8004348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800434c:	4293      	cmp	r3, r2
 800434e:	bfb8      	it	lt
 8004350:	4613      	movlt	r3, r2
 8004352:	6033      	str	r3, [r6, #0]
 8004354:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004358:	4607      	mov	r7, r0
 800435a:	460c      	mov	r4, r1
 800435c:	b10a      	cbz	r2, 8004362 <_printf_common+0x26>
 800435e:	3301      	adds	r3, #1
 8004360:	6033      	str	r3, [r6, #0]
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	0699      	lsls	r1, r3, #26
 8004366:	bf42      	ittt	mi
 8004368:	6833      	ldrmi	r3, [r6, #0]
 800436a:	3302      	addmi	r3, #2
 800436c:	6033      	strmi	r3, [r6, #0]
 800436e:	6825      	ldr	r5, [r4, #0]
 8004370:	f015 0506 	ands.w	r5, r5, #6
 8004374:	d106      	bne.n	8004384 <_printf_common+0x48>
 8004376:	f104 0a19 	add.w	sl, r4, #25
 800437a:	68e3      	ldr	r3, [r4, #12]
 800437c:	6832      	ldr	r2, [r6, #0]
 800437e:	1a9b      	subs	r3, r3, r2
 8004380:	42ab      	cmp	r3, r5
 8004382:	dc26      	bgt.n	80043d2 <_printf_common+0x96>
 8004384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004388:	1e13      	subs	r3, r2, #0
 800438a:	6822      	ldr	r2, [r4, #0]
 800438c:	bf18      	it	ne
 800438e:	2301      	movne	r3, #1
 8004390:	0692      	lsls	r2, r2, #26
 8004392:	d42b      	bmi.n	80043ec <_printf_common+0xb0>
 8004394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004398:	4649      	mov	r1, r9
 800439a:	4638      	mov	r0, r7
 800439c:	47c0      	blx	r8
 800439e:	3001      	adds	r0, #1
 80043a0:	d01e      	beq.n	80043e0 <_printf_common+0xa4>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	6922      	ldr	r2, [r4, #16]
 80043a6:	f003 0306 	and.w	r3, r3, #6
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	bf02      	ittt	eq
 80043ae:	68e5      	ldreq	r5, [r4, #12]
 80043b0:	6833      	ldreq	r3, [r6, #0]
 80043b2:	1aed      	subeq	r5, r5, r3
 80043b4:	68a3      	ldr	r3, [r4, #8]
 80043b6:	bf0c      	ite	eq
 80043b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043bc:	2500      	movne	r5, #0
 80043be:	4293      	cmp	r3, r2
 80043c0:	bfc4      	itt	gt
 80043c2:	1a9b      	subgt	r3, r3, r2
 80043c4:	18ed      	addgt	r5, r5, r3
 80043c6:	2600      	movs	r6, #0
 80043c8:	341a      	adds	r4, #26
 80043ca:	42b5      	cmp	r5, r6
 80043cc:	d11a      	bne.n	8004404 <_printf_common+0xc8>
 80043ce:	2000      	movs	r0, #0
 80043d0:	e008      	b.n	80043e4 <_printf_common+0xa8>
 80043d2:	2301      	movs	r3, #1
 80043d4:	4652      	mov	r2, sl
 80043d6:	4649      	mov	r1, r9
 80043d8:	4638      	mov	r0, r7
 80043da:	47c0      	blx	r8
 80043dc:	3001      	adds	r0, #1
 80043de:	d103      	bne.n	80043e8 <_printf_common+0xac>
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e8:	3501      	adds	r5, #1
 80043ea:	e7c6      	b.n	800437a <_printf_common+0x3e>
 80043ec:	18e1      	adds	r1, r4, r3
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	2030      	movs	r0, #48	; 0x30
 80043f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043f6:	4422      	add	r2, r4
 80043f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004400:	3302      	adds	r3, #2
 8004402:	e7c7      	b.n	8004394 <_printf_common+0x58>
 8004404:	2301      	movs	r3, #1
 8004406:	4622      	mov	r2, r4
 8004408:	4649      	mov	r1, r9
 800440a:	4638      	mov	r0, r7
 800440c:	47c0      	blx	r8
 800440e:	3001      	adds	r0, #1
 8004410:	d0e6      	beq.n	80043e0 <_printf_common+0xa4>
 8004412:	3601      	adds	r6, #1
 8004414:	e7d9      	b.n	80043ca <_printf_common+0x8e>
	...

08004418 <_printf_i>:
 8004418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800441c:	7e0f      	ldrb	r7, [r1, #24]
 800441e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004420:	2f78      	cmp	r7, #120	; 0x78
 8004422:	4691      	mov	r9, r2
 8004424:	4680      	mov	r8, r0
 8004426:	460c      	mov	r4, r1
 8004428:	469a      	mov	sl, r3
 800442a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800442e:	d807      	bhi.n	8004440 <_printf_i+0x28>
 8004430:	2f62      	cmp	r7, #98	; 0x62
 8004432:	d80a      	bhi.n	800444a <_printf_i+0x32>
 8004434:	2f00      	cmp	r7, #0
 8004436:	f000 80d4 	beq.w	80045e2 <_printf_i+0x1ca>
 800443a:	2f58      	cmp	r7, #88	; 0x58
 800443c:	f000 80c0 	beq.w	80045c0 <_printf_i+0x1a8>
 8004440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004444:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004448:	e03a      	b.n	80044c0 <_printf_i+0xa8>
 800444a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800444e:	2b15      	cmp	r3, #21
 8004450:	d8f6      	bhi.n	8004440 <_printf_i+0x28>
 8004452:	a101      	add	r1, pc, #4	; (adr r1, 8004458 <_printf_i+0x40>)
 8004454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004458:	080044b1 	.word	0x080044b1
 800445c:	080044c5 	.word	0x080044c5
 8004460:	08004441 	.word	0x08004441
 8004464:	08004441 	.word	0x08004441
 8004468:	08004441 	.word	0x08004441
 800446c:	08004441 	.word	0x08004441
 8004470:	080044c5 	.word	0x080044c5
 8004474:	08004441 	.word	0x08004441
 8004478:	08004441 	.word	0x08004441
 800447c:	08004441 	.word	0x08004441
 8004480:	08004441 	.word	0x08004441
 8004484:	080045c9 	.word	0x080045c9
 8004488:	080044f1 	.word	0x080044f1
 800448c:	08004583 	.word	0x08004583
 8004490:	08004441 	.word	0x08004441
 8004494:	08004441 	.word	0x08004441
 8004498:	080045eb 	.word	0x080045eb
 800449c:	08004441 	.word	0x08004441
 80044a0:	080044f1 	.word	0x080044f1
 80044a4:	08004441 	.word	0x08004441
 80044a8:	08004441 	.word	0x08004441
 80044ac:	0800458b 	.word	0x0800458b
 80044b0:	682b      	ldr	r3, [r5, #0]
 80044b2:	1d1a      	adds	r2, r3, #4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	602a      	str	r2, [r5, #0]
 80044b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044c0:	2301      	movs	r3, #1
 80044c2:	e09f      	b.n	8004604 <_printf_i+0x1ec>
 80044c4:	6820      	ldr	r0, [r4, #0]
 80044c6:	682b      	ldr	r3, [r5, #0]
 80044c8:	0607      	lsls	r7, r0, #24
 80044ca:	f103 0104 	add.w	r1, r3, #4
 80044ce:	6029      	str	r1, [r5, #0]
 80044d0:	d501      	bpl.n	80044d6 <_printf_i+0xbe>
 80044d2:	681e      	ldr	r6, [r3, #0]
 80044d4:	e003      	b.n	80044de <_printf_i+0xc6>
 80044d6:	0646      	lsls	r6, r0, #25
 80044d8:	d5fb      	bpl.n	80044d2 <_printf_i+0xba>
 80044da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80044de:	2e00      	cmp	r6, #0
 80044e0:	da03      	bge.n	80044ea <_printf_i+0xd2>
 80044e2:	232d      	movs	r3, #45	; 0x2d
 80044e4:	4276      	negs	r6, r6
 80044e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ea:	485a      	ldr	r0, [pc, #360]	; (8004654 <_printf_i+0x23c>)
 80044ec:	230a      	movs	r3, #10
 80044ee:	e012      	b.n	8004516 <_printf_i+0xfe>
 80044f0:	682b      	ldr	r3, [r5, #0]
 80044f2:	6820      	ldr	r0, [r4, #0]
 80044f4:	1d19      	adds	r1, r3, #4
 80044f6:	6029      	str	r1, [r5, #0]
 80044f8:	0605      	lsls	r5, r0, #24
 80044fa:	d501      	bpl.n	8004500 <_printf_i+0xe8>
 80044fc:	681e      	ldr	r6, [r3, #0]
 80044fe:	e002      	b.n	8004506 <_printf_i+0xee>
 8004500:	0641      	lsls	r1, r0, #25
 8004502:	d5fb      	bpl.n	80044fc <_printf_i+0xe4>
 8004504:	881e      	ldrh	r6, [r3, #0]
 8004506:	4853      	ldr	r0, [pc, #332]	; (8004654 <_printf_i+0x23c>)
 8004508:	2f6f      	cmp	r7, #111	; 0x6f
 800450a:	bf0c      	ite	eq
 800450c:	2308      	moveq	r3, #8
 800450e:	230a      	movne	r3, #10
 8004510:	2100      	movs	r1, #0
 8004512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004516:	6865      	ldr	r5, [r4, #4]
 8004518:	60a5      	str	r5, [r4, #8]
 800451a:	2d00      	cmp	r5, #0
 800451c:	bfa2      	ittt	ge
 800451e:	6821      	ldrge	r1, [r4, #0]
 8004520:	f021 0104 	bicge.w	r1, r1, #4
 8004524:	6021      	strge	r1, [r4, #0]
 8004526:	b90e      	cbnz	r6, 800452c <_printf_i+0x114>
 8004528:	2d00      	cmp	r5, #0
 800452a:	d04b      	beq.n	80045c4 <_printf_i+0x1ac>
 800452c:	4615      	mov	r5, r2
 800452e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004532:	fb03 6711 	mls	r7, r3, r1, r6
 8004536:	5dc7      	ldrb	r7, [r0, r7]
 8004538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800453c:	4637      	mov	r7, r6
 800453e:	42bb      	cmp	r3, r7
 8004540:	460e      	mov	r6, r1
 8004542:	d9f4      	bls.n	800452e <_printf_i+0x116>
 8004544:	2b08      	cmp	r3, #8
 8004546:	d10b      	bne.n	8004560 <_printf_i+0x148>
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	07de      	lsls	r6, r3, #31
 800454c:	d508      	bpl.n	8004560 <_printf_i+0x148>
 800454e:	6923      	ldr	r3, [r4, #16]
 8004550:	6861      	ldr	r1, [r4, #4]
 8004552:	4299      	cmp	r1, r3
 8004554:	bfde      	ittt	le
 8004556:	2330      	movle	r3, #48	; 0x30
 8004558:	f805 3c01 	strble.w	r3, [r5, #-1]
 800455c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004560:	1b52      	subs	r2, r2, r5
 8004562:	6122      	str	r2, [r4, #16]
 8004564:	f8cd a000 	str.w	sl, [sp]
 8004568:	464b      	mov	r3, r9
 800456a:	aa03      	add	r2, sp, #12
 800456c:	4621      	mov	r1, r4
 800456e:	4640      	mov	r0, r8
 8004570:	f7ff fee4 	bl	800433c <_printf_common>
 8004574:	3001      	adds	r0, #1
 8004576:	d14a      	bne.n	800460e <_printf_i+0x1f6>
 8004578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800457c:	b004      	add	sp, #16
 800457e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	f043 0320 	orr.w	r3, r3, #32
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	4833      	ldr	r0, [pc, #204]	; (8004658 <_printf_i+0x240>)
 800458c:	2778      	movs	r7, #120	; 0x78
 800458e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	6829      	ldr	r1, [r5, #0]
 8004596:	061f      	lsls	r7, r3, #24
 8004598:	f851 6b04 	ldr.w	r6, [r1], #4
 800459c:	d402      	bmi.n	80045a4 <_printf_i+0x18c>
 800459e:	065f      	lsls	r7, r3, #25
 80045a0:	bf48      	it	mi
 80045a2:	b2b6      	uxthmi	r6, r6
 80045a4:	07df      	lsls	r7, r3, #31
 80045a6:	bf48      	it	mi
 80045a8:	f043 0320 	orrmi.w	r3, r3, #32
 80045ac:	6029      	str	r1, [r5, #0]
 80045ae:	bf48      	it	mi
 80045b0:	6023      	strmi	r3, [r4, #0]
 80045b2:	b91e      	cbnz	r6, 80045bc <_printf_i+0x1a4>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	f023 0320 	bic.w	r3, r3, #32
 80045ba:	6023      	str	r3, [r4, #0]
 80045bc:	2310      	movs	r3, #16
 80045be:	e7a7      	b.n	8004510 <_printf_i+0xf8>
 80045c0:	4824      	ldr	r0, [pc, #144]	; (8004654 <_printf_i+0x23c>)
 80045c2:	e7e4      	b.n	800458e <_printf_i+0x176>
 80045c4:	4615      	mov	r5, r2
 80045c6:	e7bd      	b.n	8004544 <_printf_i+0x12c>
 80045c8:	682b      	ldr	r3, [r5, #0]
 80045ca:	6826      	ldr	r6, [r4, #0]
 80045cc:	6961      	ldr	r1, [r4, #20]
 80045ce:	1d18      	adds	r0, r3, #4
 80045d0:	6028      	str	r0, [r5, #0]
 80045d2:	0635      	lsls	r5, r6, #24
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	d501      	bpl.n	80045dc <_printf_i+0x1c4>
 80045d8:	6019      	str	r1, [r3, #0]
 80045da:	e002      	b.n	80045e2 <_printf_i+0x1ca>
 80045dc:	0670      	lsls	r0, r6, #25
 80045de:	d5fb      	bpl.n	80045d8 <_printf_i+0x1c0>
 80045e0:	8019      	strh	r1, [r3, #0]
 80045e2:	2300      	movs	r3, #0
 80045e4:	6123      	str	r3, [r4, #16]
 80045e6:	4615      	mov	r5, r2
 80045e8:	e7bc      	b.n	8004564 <_printf_i+0x14c>
 80045ea:	682b      	ldr	r3, [r5, #0]
 80045ec:	1d1a      	adds	r2, r3, #4
 80045ee:	602a      	str	r2, [r5, #0]
 80045f0:	681d      	ldr	r5, [r3, #0]
 80045f2:	6862      	ldr	r2, [r4, #4]
 80045f4:	2100      	movs	r1, #0
 80045f6:	4628      	mov	r0, r5
 80045f8:	f7fb fdea 	bl	80001d0 <memchr>
 80045fc:	b108      	cbz	r0, 8004602 <_printf_i+0x1ea>
 80045fe:	1b40      	subs	r0, r0, r5
 8004600:	6060      	str	r0, [r4, #4]
 8004602:	6863      	ldr	r3, [r4, #4]
 8004604:	6123      	str	r3, [r4, #16]
 8004606:	2300      	movs	r3, #0
 8004608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800460c:	e7aa      	b.n	8004564 <_printf_i+0x14c>
 800460e:	6923      	ldr	r3, [r4, #16]
 8004610:	462a      	mov	r2, r5
 8004612:	4649      	mov	r1, r9
 8004614:	4640      	mov	r0, r8
 8004616:	47d0      	blx	sl
 8004618:	3001      	adds	r0, #1
 800461a:	d0ad      	beq.n	8004578 <_printf_i+0x160>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	079b      	lsls	r3, r3, #30
 8004620:	d413      	bmi.n	800464a <_printf_i+0x232>
 8004622:	68e0      	ldr	r0, [r4, #12]
 8004624:	9b03      	ldr	r3, [sp, #12]
 8004626:	4298      	cmp	r0, r3
 8004628:	bfb8      	it	lt
 800462a:	4618      	movlt	r0, r3
 800462c:	e7a6      	b.n	800457c <_printf_i+0x164>
 800462e:	2301      	movs	r3, #1
 8004630:	4632      	mov	r2, r6
 8004632:	4649      	mov	r1, r9
 8004634:	4640      	mov	r0, r8
 8004636:	47d0      	blx	sl
 8004638:	3001      	adds	r0, #1
 800463a:	d09d      	beq.n	8004578 <_printf_i+0x160>
 800463c:	3501      	adds	r5, #1
 800463e:	68e3      	ldr	r3, [r4, #12]
 8004640:	9903      	ldr	r1, [sp, #12]
 8004642:	1a5b      	subs	r3, r3, r1
 8004644:	42ab      	cmp	r3, r5
 8004646:	dcf2      	bgt.n	800462e <_printf_i+0x216>
 8004648:	e7eb      	b.n	8004622 <_printf_i+0x20a>
 800464a:	2500      	movs	r5, #0
 800464c:	f104 0619 	add.w	r6, r4, #25
 8004650:	e7f5      	b.n	800463e <_printf_i+0x226>
 8004652:	bf00      	nop
 8004654:	080059fc 	.word	0x080059fc
 8004658:	08005a0d 	.word	0x08005a0d

0800465c <_scanf_chars>:
 800465c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004660:	4615      	mov	r5, r2
 8004662:	688a      	ldr	r2, [r1, #8]
 8004664:	4680      	mov	r8, r0
 8004666:	460c      	mov	r4, r1
 8004668:	b932      	cbnz	r2, 8004678 <_scanf_chars+0x1c>
 800466a:	698a      	ldr	r2, [r1, #24]
 800466c:	2a00      	cmp	r2, #0
 800466e:	bf0c      	ite	eq
 8004670:	2201      	moveq	r2, #1
 8004672:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8004676:	608a      	str	r2, [r1, #8]
 8004678:	6822      	ldr	r2, [r4, #0]
 800467a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800470c <_scanf_chars+0xb0>
 800467e:	06d1      	lsls	r1, r2, #27
 8004680:	bf5f      	itttt	pl
 8004682:	681a      	ldrpl	r2, [r3, #0]
 8004684:	1d11      	addpl	r1, r2, #4
 8004686:	6019      	strpl	r1, [r3, #0]
 8004688:	6816      	ldrpl	r6, [r2, #0]
 800468a:	2700      	movs	r7, #0
 800468c:	69a0      	ldr	r0, [r4, #24]
 800468e:	b188      	cbz	r0, 80046b4 <_scanf_chars+0x58>
 8004690:	2801      	cmp	r0, #1
 8004692:	d107      	bne.n	80046a4 <_scanf_chars+0x48>
 8004694:	682a      	ldr	r2, [r5, #0]
 8004696:	7811      	ldrb	r1, [r2, #0]
 8004698:	6962      	ldr	r2, [r4, #20]
 800469a:	5c52      	ldrb	r2, [r2, r1]
 800469c:	b952      	cbnz	r2, 80046b4 <_scanf_chars+0x58>
 800469e:	2f00      	cmp	r7, #0
 80046a0:	d031      	beq.n	8004706 <_scanf_chars+0xaa>
 80046a2:	e022      	b.n	80046ea <_scanf_chars+0x8e>
 80046a4:	2802      	cmp	r0, #2
 80046a6:	d120      	bne.n	80046ea <_scanf_chars+0x8e>
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	f819 3003 	ldrb.w	r3, [r9, r3]
 80046b0:	071b      	lsls	r3, r3, #28
 80046b2:	d41a      	bmi.n	80046ea <_scanf_chars+0x8e>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	06da      	lsls	r2, r3, #27
 80046b8:	bf5e      	ittt	pl
 80046ba:	682b      	ldrpl	r3, [r5, #0]
 80046bc:	781b      	ldrbpl	r3, [r3, #0]
 80046be:	f806 3b01 	strbpl.w	r3, [r6], #1
 80046c2:	682a      	ldr	r2, [r5, #0]
 80046c4:	686b      	ldr	r3, [r5, #4]
 80046c6:	3201      	adds	r2, #1
 80046c8:	602a      	str	r2, [r5, #0]
 80046ca:	68a2      	ldr	r2, [r4, #8]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	3a01      	subs	r2, #1
 80046d0:	606b      	str	r3, [r5, #4]
 80046d2:	3701      	adds	r7, #1
 80046d4:	60a2      	str	r2, [r4, #8]
 80046d6:	b142      	cbz	r2, 80046ea <_scanf_chars+0x8e>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	dcd7      	bgt.n	800468c <_scanf_chars+0x30>
 80046dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80046e0:	4629      	mov	r1, r5
 80046e2:	4640      	mov	r0, r8
 80046e4:	4798      	blx	r3
 80046e6:	2800      	cmp	r0, #0
 80046e8:	d0d0      	beq.n	800468c <_scanf_chars+0x30>
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	f013 0310 	ands.w	r3, r3, #16
 80046f0:	d105      	bne.n	80046fe <_scanf_chars+0xa2>
 80046f2:	68e2      	ldr	r2, [r4, #12]
 80046f4:	3201      	adds	r2, #1
 80046f6:	60e2      	str	r2, [r4, #12]
 80046f8:	69a2      	ldr	r2, [r4, #24]
 80046fa:	b102      	cbz	r2, 80046fe <_scanf_chars+0xa2>
 80046fc:	7033      	strb	r3, [r6, #0]
 80046fe:	6923      	ldr	r3, [r4, #16]
 8004700:	443b      	add	r3, r7
 8004702:	6123      	str	r3, [r4, #16]
 8004704:	2000      	movs	r0, #0
 8004706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800470a:	bf00      	nop
 800470c:	08005a3a 	.word	0x08005a3a

08004710 <_scanf_i>:
 8004710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004714:	4698      	mov	r8, r3
 8004716:	4b74      	ldr	r3, [pc, #464]	; (80048e8 <_scanf_i+0x1d8>)
 8004718:	460c      	mov	r4, r1
 800471a:	4682      	mov	sl, r0
 800471c:	4616      	mov	r6, r2
 800471e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004722:	b087      	sub	sp, #28
 8004724:	ab03      	add	r3, sp, #12
 8004726:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800472a:	4b70      	ldr	r3, [pc, #448]	; (80048ec <_scanf_i+0x1dc>)
 800472c:	69a1      	ldr	r1, [r4, #24]
 800472e:	4a70      	ldr	r2, [pc, #448]	; (80048f0 <_scanf_i+0x1e0>)
 8004730:	2903      	cmp	r1, #3
 8004732:	bf18      	it	ne
 8004734:	461a      	movne	r2, r3
 8004736:	68a3      	ldr	r3, [r4, #8]
 8004738:	9201      	str	r2, [sp, #4]
 800473a:	1e5a      	subs	r2, r3, #1
 800473c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004740:	bf88      	it	hi
 8004742:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004746:	4627      	mov	r7, r4
 8004748:	bf82      	ittt	hi
 800474a:	eb03 0905 	addhi.w	r9, r3, r5
 800474e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004752:	60a3      	strhi	r3, [r4, #8]
 8004754:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004758:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800475c:	bf98      	it	ls
 800475e:	f04f 0900 	movls.w	r9, #0
 8004762:	6023      	str	r3, [r4, #0]
 8004764:	463d      	mov	r5, r7
 8004766:	f04f 0b00 	mov.w	fp, #0
 800476a:	6831      	ldr	r1, [r6, #0]
 800476c:	ab03      	add	r3, sp, #12
 800476e:	7809      	ldrb	r1, [r1, #0]
 8004770:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004774:	2202      	movs	r2, #2
 8004776:	f7fb fd2b 	bl	80001d0 <memchr>
 800477a:	b328      	cbz	r0, 80047c8 <_scanf_i+0xb8>
 800477c:	f1bb 0f01 	cmp.w	fp, #1
 8004780:	d159      	bne.n	8004836 <_scanf_i+0x126>
 8004782:	6862      	ldr	r2, [r4, #4]
 8004784:	b92a      	cbnz	r2, 8004792 <_scanf_i+0x82>
 8004786:	6822      	ldr	r2, [r4, #0]
 8004788:	2308      	movs	r3, #8
 800478a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800478e:	6063      	str	r3, [r4, #4]
 8004790:	6022      	str	r2, [r4, #0]
 8004792:	6822      	ldr	r2, [r4, #0]
 8004794:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004798:	6022      	str	r2, [r4, #0]
 800479a:	68a2      	ldr	r2, [r4, #8]
 800479c:	1e51      	subs	r1, r2, #1
 800479e:	60a1      	str	r1, [r4, #8]
 80047a0:	b192      	cbz	r2, 80047c8 <_scanf_i+0xb8>
 80047a2:	6832      	ldr	r2, [r6, #0]
 80047a4:	1c51      	adds	r1, r2, #1
 80047a6:	6031      	str	r1, [r6, #0]
 80047a8:	7812      	ldrb	r2, [r2, #0]
 80047aa:	f805 2b01 	strb.w	r2, [r5], #1
 80047ae:	6872      	ldr	r2, [r6, #4]
 80047b0:	3a01      	subs	r2, #1
 80047b2:	2a00      	cmp	r2, #0
 80047b4:	6072      	str	r2, [r6, #4]
 80047b6:	dc07      	bgt.n	80047c8 <_scanf_i+0xb8>
 80047b8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80047bc:	4631      	mov	r1, r6
 80047be:	4650      	mov	r0, sl
 80047c0:	4790      	blx	r2
 80047c2:	2800      	cmp	r0, #0
 80047c4:	f040 8085 	bne.w	80048d2 <_scanf_i+0x1c2>
 80047c8:	f10b 0b01 	add.w	fp, fp, #1
 80047cc:	f1bb 0f03 	cmp.w	fp, #3
 80047d0:	d1cb      	bne.n	800476a <_scanf_i+0x5a>
 80047d2:	6863      	ldr	r3, [r4, #4]
 80047d4:	b90b      	cbnz	r3, 80047da <_scanf_i+0xca>
 80047d6:	230a      	movs	r3, #10
 80047d8:	6063      	str	r3, [r4, #4]
 80047da:	6863      	ldr	r3, [r4, #4]
 80047dc:	4945      	ldr	r1, [pc, #276]	; (80048f4 <_scanf_i+0x1e4>)
 80047de:	6960      	ldr	r0, [r4, #20]
 80047e0:	1ac9      	subs	r1, r1, r3
 80047e2:	f000 f89b 	bl	800491c <__sccl>
 80047e6:	f04f 0b00 	mov.w	fp, #0
 80047ea:	68a3      	ldr	r3, [r4, #8]
 80047ec:	6822      	ldr	r2, [r4, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d03d      	beq.n	800486e <_scanf_i+0x15e>
 80047f2:	6831      	ldr	r1, [r6, #0]
 80047f4:	6960      	ldr	r0, [r4, #20]
 80047f6:	f891 c000 	ldrb.w	ip, [r1]
 80047fa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80047fe:	2800      	cmp	r0, #0
 8004800:	d035      	beq.n	800486e <_scanf_i+0x15e>
 8004802:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004806:	d124      	bne.n	8004852 <_scanf_i+0x142>
 8004808:	0510      	lsls	r0, r2, #20
 800480a:	d522      	bpl.n	8004852 <_scanf_i+0x142>
 800480c:	f10b 0b01 	add.w	fp, fp, #1
 8004810:	f1b9 0f00 	cmp.w	r9, #0
 8004814:	d003      	beq.n	800481e <_scanf_i+0x10e>
 8004816:	3301      	adds	r3, #1
 8004818:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800481c:	60a3      	str	r3, [r4, #8]
 800481e:	6873      	ldr	r3, [r6, #4]
 8004820:	3b01      	subs	r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	6073      	str	r3, [r6, #4]
 8004826:	dd1b      	ble.n	8004860 <_scanf_i+0x150>
 8004828:	6833      	ldr	r3, [r6, #0]
 800482a:	3301      	adds	r3, #1
 800482c:	6033      	str	r3, [r6, #0]
 800482e:	68a3      	ldr	r3, [r4, #8]
 8004830:	3b01      	subs	r3, #1
 8004832:	60a3      	str	r3, [r4, #8]
 8004834:	e7d9      	b.n	80047ea <_scanf_i+0xda>
 8004836:	f1bb 0f02 	cmp.w	fp, #2
 800483a:	d1ae      	bne.n	800479a <_scanf_i+0x8a>
 800483c:	6822      	ldr	r2, [r4, #0]
 800483e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004842:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004846:	d1bf      	bne.n	80047c8 <_scanf_i+0xb8>
 8004848:	2310      	movs	r3, #16
 800484a:	6063      	str	r3, [r4, #4]
 800484c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004850:	e7a2      	b.n	8004798 <_scanf_i+0x88>
 8004852:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004856:	6022      	str	r2, [r4, #0]
 8004858:	780b      	ldrb	r3, [r1, #0]
 800485a:	f805 3b01 	strb.w	r3, [r5], #1
 800485e:	e7de      	b.n	800481e <_scanf_i+0x10e>
 8004860:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004864:	4631      	mov	r1, r6
 8004866:	4650      	mov	r0, sl
 8004868:	4798      	blx	r3
 800486a:	2800      	cmp	r0, #0
 800486c:	d0df      	beq.n	800482e <_scanf_i+0x11e>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	05d9      	lsls	r1, r3, #23
 8004872:	d50d      	bpl.n	8004890 <_scanf_i+0x180>
 8004874:	42bd      	cmp	r5, r7
 8004876:	d909      	bls.n	800488c <_scanf_i+0x17c>
 8004878:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800487c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004880:	4632      	mov	r2, r6
 8004882:	4650      	mov	r0, sl
 8004884:	4798      	blx	r3
 8004886:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800488a:	464d      	mov	r5, r9
 800488c:	42bd      	cmp	r5, r7
 800488e:	d028      	beq.n	80048e2 <_scanf_i+0x1d2>
 8004890:	6822      	ldr	r2, [r4, #0]
 8004892:	f012 0210 	ands.w	r2, r2, #16
 8004896:	d113      	bne.n	80048c0 <_scanf_i+0x1b0>
 8004898:	702a      	strb	r2, [r5, #0]
 800489a:	6863      	ldr	r3, [r4, #4]
 800489c:	9e01      	ldr	r6, [sp, #4]
 800489e:	4639      	mov	r1, r7
 80048a0:	4650      	mov	r0, sl
 80048a2:	47b0      	blx	r6
 80048a4:	f8d8 3000 	ldr.w	r3, [r8]
 80048a8:	6821      	ldr	r1, [r4, #0]
 80048aa:	1d1a      	adds	r2, r3, #4
 80048ac:	f8c8 2000 	str.w	r2, [r8]
 80048b0:	f011 0f20 	tst.w	r1, #32
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	d00f      	beq.n	80048d8 <_scanf_i+0x1c8>
 80048b8:	6018      	str	r0, [r3, #0]
 80048ba:	68e3      	ldr	r3, [r4, #12]
 80048bc:	3301      	adds	r3, #1
 80048be:	60e3      	str	r3, [r4, #12]
 80048c0:	6923      	ldr	r3, [r4, #16]
 80048c2:	1bed      	subs	r5, r5, r7
 80048c4:	445d      	add	r5, fp
 80048c6:	442b      	add	r3, r5
 80048c8:	6123      	str	r3, [r4, #16]
 80048ca:	2000      	movs	r0, #0
 80048cc:	b007      	add	sp, #28
 80048ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d2:	f04f 0b00 	mov.w	fp, #0
 80048d6:	e7ca      	b.n	800486e <_scanf_i+0x15e>
 80048d8:	07ca      	lsls	r2, r1, #31
 80048da:	bf4c      	ite	mi
 80048dc:	8018      	strhmi	r0, [r3, #0]
 80048de:	6018      	strpl	r0, [r3, #0]
 80048e0:	e7eb      	b.n	80048ba <_scanf_i+0x1aa>
 80048e2:	2001      	movs	r0, #1
 80048e4:	e7f2      	b.n	80048cc <_scanf_i+0x1bc>
 80048e6:	bf00      	nop
 80048e8:	0800529c 	.word	0x0800529c
 80048ec:	08004c05 	.word	0x08004c05
 80048f0:	08004b1d 	.word	0x08004b1d
 80048f4:	08005a2e 	.word	0x08005a2e

080048f8 <_read_r>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	4d07      	ldr	r5, [pc, #28]	; (8004918 <_read_r+0x20>)
 80048fc:	4604      	mov	r4, r0
 80048fe:	4608      	mov	r0, r1
 8004900:	4611      	mov	r1, r2
 8004902:	2200      	movs	r2, #0
 8004904:	602a      	str	r2, [r5, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	f000 fa12 	bl	8004d30 <_read>
 800490c:	1c43      	adds	r3, r0, #1
 800490e:	d102      	bne.n	8004916 <_read_r+0x1e>
 8004910:	682b      	ldr	r3, [r5, #0]
 8004912:	b103      	cbz	r3, 8004916 <_read_r+0x1e>
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	bd38      	pop	{r3, r4, r5, pc}
 8004918:	20000d14 	.word	0x20000d14

0800491c <__sccl>:
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	780b      	ldrb	r3, [r1, #0]
 8004920:	4604      	mov	r4, r0
 8004922:	2b5e      	cmp	r3, #94	; 0x5e
 8004924:	bf0b      	itete	eq
 8004926:	784b      	ldrbeq	r3, [r1, #1]
 8004928:	1c4a      	addne	r2, r1, #1
 800492a:	1c8a      	addeq	r2, r1, #2
 800492c:	2100      	movne	r1, #0
 800492e:	bf08      	it	eq
 8004930:	2101      	moveq	r1, #1
 8004932:	3801      	subs	r0, #1
 8004934:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004938:	f800 1f01 	strb.w	r1, [r0, #1]!
 800493c:	42a8      	cmp	r0, r5
 800493e:	d1fb      	bne.n	8004938 <__sccl+0x1c>
 8004940:	b90b      	cbnz	r3, 8004946 <__sccl+0x2a>
 8004942:	1e50      	subs	r0, r2, #1
 8004944:	bd70      	pop	{r4, r5, r6, pc}
 8004946:	f081 0101 	eor.w	r1, r1, #1
 800494a:	54e1      	strb	r1, [r4, r3]
 800494c:	4610      	mov	r0, r2
 800494e:	4602      	mov	r2, r0
 8004950:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004954:	2d2d      	cmp	r5, #45	; 0x2d
 8004956:	d005      	beq.n	8004964 <__sccl+0x48>
 8004958:	2d5d      	cmp	r5, #93	; 0x5d
 800495a:	d016      	beq.n	800498a <__sccl+0x6e>
 800495c:	2d00      	cmp	r5, #0
 800495e:	d0f1      	beq.n	8004944 <__sccl+0x28>
 8004960:	462b      	mov	r3, r5
 8004962:	e7f2      	b.n	800494a <__sccl+0x2e>
 8004964:	7846      	ldrb	r6, [r0, #1]
 8004966:	2e5d      	cmp	r6, #93	; 0x5d
 8004968:	d0fa      	beq.n	8004960 <__sccl+0x44>
 800496a:	42b3      	cmp	r3, r6
 800496c:	dcf8      	bgt.n	8004960 <__sccl+0x44>
 800496e:	3002      	adds	r0, #2
 8004970:	461a      	mov	r2, r3
 8004972:	3201      	adds	r2, #1
 8004974:	4296      	cmp	r6, r2
 8004976:	54a1      	strb	r1, [r4, r2]
 8004978:	dcfb      	bgt.n	8004972 <__sccl+0x56>
 800497a:	1af2      	subs	r2, r6, r3
 800497c:	3a01      	subs	r2, #1
 800497e:	1c5d      	adds	r5, r3, #1
 8004980:	42b3      	cmp	r3, r6
 8004982:	bfa8      	it	ge
 8004984:	2200      	movge	r2, #0
 8004986:	18ab      	adds	r3, r5, r2
 8004988:	e7e1      	b.n	800494e <__sccl+0x32>
 800498a:	4610      	mov	r0, r2
 800498c:	e7da      	b.n	8004944 <__sccl+0x28>

0800498e <_raise_r>:
 800498e:	291f      	cmp	r1, #31
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4604      	mov	r4, r0
 8004994:	460d      	mov	r5, r1
 8004996:	d904      	bls.n	80049a2 <_raise_r+0x14>
 8004998:	2316      	movs	r3, #22
 800499a:	6003      	str	r3, [r0, #0]
 800499c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049a0:	bd38      	pop	{r3, r4, r5, pc}
 80049a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80049a4:	b112      	cbz	r2, 80049ac <_raise_r+0x1e>
 80049a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80049aa:	b94b      	cbnz	r3, 80049c0 <_raise_r+0x32>
 80049ac:	4620      	mov	r0, r4
 80049ae:	f000 f831 	bl	8004a14 <_getpid_r>
 80049b2:	462a      	mov	r2, r5
 80049b4:	4601      	mov	r1, r0
 80049b6:	4620      	mov	r0, r4
 80049b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049bc:	f000 b818 	b.w	80049f0 <_kill_r>
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d00a      	beq.n	80049da <_raise_r+0x4c>
 80049c4:	1c59      	adds	r1, r3, #1
 80049c6:	d103      	bne.n	80049d0 <_raise_r+0x42>
 80049c8:	2316      	movs	r3, #22
 80049ca:	6003      	str	r3, [r0, #0]
 80049cc:	2001      	movs	r0, #1
 80049ce:	e7e7      	b.n	80049a0 <_raise_r+0x12>
 80049d0:	2400      	movs	r4, #0
 80049d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80049d6:	4628      	mov	r0, r5
 80049d8:	4798      	blx	r3
 80049da:	2000      	movs	r0, #0
 80049dc:	e7e0      	b.n	80049a0 <_raise_r+0x12>
	...

080049e0 <raise>:
 80049e0:	4b02      	ldr	r3, [pc, #8]	; (80049ec <raise+0xc>)
 80049e2:	4601      	mov	r1, r0
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	f7ff bfd2 	b.w	800498e <_raise_r>
 80049ea:	bf00      	nop
 80049ec:	20000064 	.word	0x20000064

080049f0 <_kill_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	4d07      	ldr	r5, [pc, #28]	; (8004a10 <_kill_r+0x20>)
 80049f4:	2300      	movs	r3, #0
 80049f6:	4604      	mov	r4, r0
 80049f8:	4608      	mov	r0, r1
 80049fa:	4611      	mov	r1, r2
 80049fc:	602b      	str	r3, [r5, #0]
 80049fe:	f000 f987 	bl	8004d10 <_kill>
 8004a02:	1c43      	adds	r3, r0, #1
 8004a04:	d102      	bne.n	8004a0c <_kill_r+0x1c>
 8004a06:	682b      	ldr	r3, [r5, #0]
 8004a08:	b103      	cbz	r3, 8004a0c <_kill_r+0x1c>
 8004a0a:	6023      	str	r3, [r4, #0]
 8004a0c:	bd38      	pop	{r3, r4, r5, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000d14 	.word	0x20000d14

08004a14 <_getpid_r>:
 8004a14:	f000 b96c 	b.w	8004cf0 <_getpid>

08004a18 <_strtol_l.constprop.0>:
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1e:	d001      	beq.n	8004a24 <_strtol_l.constprop.0+0xc>
 8004a20:	2b24      	cmp	r3, #36	; 0x24
 8004a22:	d906      	bls.n	8004a32 <_strtol_l.constprop.0+0x1a>
 8004a24:	f7fe f8c2 	bl	8002bac <__errno>
 8004a28:	2316      	movs	r3, #22
 8004a2a:	6003      	str	r3, [r0, #0]
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004b18 <_strtol_l.constprop.0+0x100>
 8004a36:	460d      	mov	r5, r1
 8004a38:	462e      	mov	r6, r5
 8004a3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a3e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004a42:	f017 0708 	ands.w	r7, r7, #8
 8004a46:	d1f7      	bne.n	8004a38 <_strtol_l.constprop.0+0x20>
 8004a48:	2c2d      	cmp	r4, #45	; 0x2d
 8004a4a:	d132      	bne.n	8004ab2 <_strtol_l.constprop.0+0x9a>
 8004a4c:	782c      	ldrb	r4, [r5, #0]
 8004a4e:	2701      	movs	r7, #1
 8004a50:	1cb5      	adds	r5, r6, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d05b      	beq.n	8004b0e <_strtol_l.constprop.0+0xf6>
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d109      	bne.n	8004a6e <_strtol_l.constprop.0+0x56>
 8004a5a:	2c30      	cmp	r4, #48	; 0x30
 8004a5c:	d107      	bne.n	8004a6e <_strtol_l.constprop.0+0x56>
 8004a5e:	782c      	ldrb	r4, [r5, #0]
 8004a60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004a64:	2c58      	cmp	r4, #88	; 0x58
 8004a66:	d14d      	bne.n	8004b04 <_strtol_l.constprop.0+0xec>
 8004a68:	786c      	ldrb	r4, [r5, #1]
 8004a6a:	2310      	movs	r3, #16
 8004a6c:	3502      	adds	r5, #2
 8004a6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004a72:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004a76:	f04f 0e00 	mov.w	lr, #0
 8004a7a:	fbb8 f9f3 	udiv	r9, r8, r3
 8004a7e:	4676      	mov	r6, lr
 8004a80:	fb03 8a19 	mls	sl, r3, r9, r8
 8004a84:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004a88:	f1bc 0f09 	cmp.w	ip, #9
 8004a8c:	d816      	bhi.n	8004abc <_strtol_l.constprop.0+0xa4>
 8004a8e:	4664      	mov	r4, ip
 8004a90:	42a3      	cmp	r3, r4
 8004a92:	dd24      	ble.n	8004ade <_strtol_l.constprop.0+0xc6>
 8004a94:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8004a98:	d008      	beq.n	8004aac <_strtol_l.constprop.0+0x94>
 8004a9a:	45b1      	cmp	r9, r6
 8004a9c:	d31c      	bcc.n	8004ad8 <_strtol_l.constprop.0+0xc0>
 8004a9e:	d101      	bne.n	8004aa4 <_strtol_l.constprop.0+0x8c>
 8004aa0:	45a2      	cmp	sl, r4
 8004aa2:	db19      	blt.n	8004ad8 <_strtol_l.constprop.0+0xc0>
 8004aa4:	fb06 4603 	mla	r6, r6, r3, r4
 8004aa8:	f04f 0e01 	mov.w	lr, #1
 8004aac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ab0:	e7e8      	b.n	8004a84 <_strtol_l.constprop.0+0x6c>
 8004ab2:	2c2b      	cmp	r4, #43	; 0x2b
 8004ab4:	bf04      	itt	eq
 8004ab6:	782c      	ldrbeq	r4, [r5, #0]
 8004ab8:	1cb5      	addeq	r5, r6, #2
 8004aba:	e7ca      	b.n	8004a52 <_strtol_l.constprop.0+0x3a>
 8004abc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004ac0:	f1bc 0f19 	cmp.w	ip, #25
 8004ac4:	d801      	bhi.n	8004aca <_strtol_l.constprop.0+0xb2>
 8004ac6:	3c37      	subs	r4, #55	; 0x37
 8004ac8:	e7e2      	b.n	8004a90 <_strtol_l.constprop.0+0x78>
 8004aca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004ace:	f1bc 0f19 	cmp.w	ip, #25
 8004ad2:	d804      	bhi.n	8004ade <_strtol_l.constprop.0+0xc6>
 8004ad4:	3c57      	subs	r4, #87	; 0x57
 8004ad6:	e7db      	b.n	8004a90 <_strtol_l.constprop.0+0x78>
 8004ad8:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8004adc:	e7e6      	b.n	8004aac <_strtol_l.constprop.0+0x94>
 8004ade:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8004ae2:	d105      	bne.n	8004af0 <_strtol_l.constprop.0+0xd8>
 8004ae4:	2322      	movs	r3, #34	; 0x22
 8004ae6:	6003      	str	r3, [r0, #0]
 8004ae8:	4646      	mov	r6, r8
 8004aea:	b942      	cbnz	r2, 8004afe <_strtol_l.constprop.0+0xe6>
 8004aec:	4630      	mov	r0, r6
 8004aee:	e79e      	b.n	8004a2e <_strtol_l.constprop.0+0x16>
 8004af0:	b107      	cbz	r7, 8004af4 <_strtol_l.constprop.0+0xdc>
 8004af2:	4276      	negs	r6, r6
 8004af4:	2a00      	cmp	r2, #0
 8004af6:	d0f9      	beq.n	8004aec <_strtol_l.constprop.0+0xd4>
 8004af8:	f1be 0f00 	cmp.w	lr, #0
 8004afc:	d000      	beq.n	8004b00 <_strtol_l.constprop.0+0xe8>
 8004afe:	1e69      	subs	r1, r5, #1
 8004b00:	6011      	str	r1, [r2, #0]
 8004b02:	e7f3      	b.n	8004aec <_strtol_l.constprop.0+0xd4>
 8004b04:	2430      	movs	r4, #48	; 0x30
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1b1      	bne.n	8004a6e <_strtol_l.constprop.0+0x56>
 8004b0a:	2308      	movs	r3, #8
 8004b0c:	e7af      	b.n	8004a6e <_strtol_l.constprop.0+0x56>
 8004b0e:	2c30      	cmp	r4, #48	; 0x30
 8004b10:	d0a5      	beq.n	8004a5e <_strtol_l.constprop.0+0x46>
 8004b12:	230a      	movs	r3, #10
 8004b14:	e7ab      	b.n	8004a6e <_strtol_l.constprop.0+0x56>
 8004b16:	bf00      	nop
 8004b18:	08005a3a 	.word	0x08005a3a

08004b1c <_strtol_r>:
 8004b1c:	f7ff bf7c 	b.w	8004a18 <_strtol_l.constprop.0>

08004b20 <_strtoul_l.constprop.0>:
 8004b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b24:	4f36      	ldr	r7, [pc, #216]	; (8004c00 <_strtoul_l.constprop.0+0xe0>)
 8004b26:	4686      	mov	lr, r0
 8004b28:	460d      	mov	r5, r1
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b30:	5d3e      	ldrb	r6, [r7, r4]
 8004b32:	f016 0608 	ands.w	r6, r6, #8
 8004b36:	d1f8      	bne.n	8004b2a <_strtoul_l.constprop.0+0xa>
 8004b38:	2c2d      	cmp	r4, #45	; 0x2d
 8004b3a:	d130      	bne.n	8004b9e <_strtoul_l.constprop.0+0x7e>
 8004b3c:	782c      	ldrb	r4, [r5, #0]
 8004b3e:	2601      	movs	r6, #1
 8004b40:	1c85      	adds	r5, r0, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d057      	beq.n	8004bf6 <_strtoul_l.constprop.0+0xd6>
 8004b46:	2b10      	cmp	r3, #16
 8004b48:	d109      	bne.n	8004b5e <_strtoul_l.constprop.0+0x3e>
 8004b4a:	2c30      	cmp	r4, #48	; 0x30
 8004b4c:	d107      	bne.n	8004b5e <_strtoul_l.constprop.0+0x3e>
 8004b4e:	7828      	ldrb	r0, [r5, #0]
 8004b50:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004b54:	2858      	cmp	r0, #88	; 0x58
 8004b56:	d149      	bne.n	8004bec <_strtoul_l.constprop.0+0xcc>
 8004b58:	786c      	ldrb	r4, [r5, #1]
 8004b5a:	2310      	movs	r3, #16
 8004b5c:	3502      	adds	r5, #2
 8004b5e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004b62:	2700      	movs	r7, #0
 8004b64:	fbb8 f8f3 	udiv	r8, r8, r3
 8004b68:	fb03 f908 	mul.w	r9, r3, r8
 8004b6c:	ea6f 0909 	mvn.w	r9, r9
 8004b70:	4638      	mov	r0, r7
 8004b72:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004b76:	f1bc 0f09 	cmp.w	ip, #9
 8004b7a:	d815      	bhi.n	8004ba8 <_strtoul_l.constprop.0+0x88>
 8004b7c:	4664      	mov	r4, ip
 8004b7e:	42a3      	cmp	r3, r4
 8004b80:	dd23      	ble.n	8004bca <_strtoul_l.constprop.0+0xaa>
 8004b82:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8004b86:	d007      	beq.n	8004b98 <_strtoul_l.constprop.0+0x78>
 8004b88:	4580      	cmp	r8, r0
 8004b8a:	d31b      	bcc.n	8004bc4 <_strtoul_l.constprop.0+0xa4>
 8004b8c:	d101      	bne.n	8004b92 <_strtoul_l.constprop.0+0x72>
 8004b8e:	45a1      	cmp	r9, r4
 8004b90:	db18      	blt.n	8004bc4 <_strtoul_l.constprop.0+0xa4>
 8004b92:	fb00 4003 	mla	r0, r0, r3, r4
 8004b96:	2701      	movs	r7, #1
 8004b98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b9c:	e7e9      	b.n	8004b72 <_strtoul_l.constprop.0+0x52>
 8004b9e:	2c2b      	cmp	r4, #43	; 0x2b
 8004ba0:	bf04      	itt	eq
 8004ba2:	782c      	ldrbeq	r4, [r5, #0]
 8004ba4:	1c85      	addeq	r5, r0, #2
 8004ba6:	e7cc      	b.n	8004b42 <_strtoul_l.constprop.0+0x22>
 8004ba8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004bac:	f1bc 0f19 	cmp.w	ip, #25
 8004bb0:	d801      	bhi.n	8004bb6 <_strtoul_l.constprop.0+0x96>
 8004bb2:	3c37      	subs	r4, #55	; 0x37
 8004bb4:	e7e3      	b.n	8004b7e <_strtoul_l.constprop.0+0x5e>
 8004bb6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004bba:	f1bc 0f19 	cmp.w	ip, #25
 8004bbe:	d804      	bhi.n	8004bca <_strtoul_l.constprop.0+0xaa>
 8004bc0:	3c57      	subs	r4, #87	; 0x57
 8004bc2:	e7dc      	b.n	8004b7e <_strtoul_l.constprop.0+0x5e>
 8004bc4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004bc8:	e7e6      	b.n	8004b98 <_strtoul_l.constprop.0+0x78>
 8004bca:	1c7b      	adds	r3, r7, #1
 8004bcc:	d106      	bne.n	8004bdc <_strtoul_l.constprop.0+0xbc>
 8004bce:	2322      	movs	r3, #34	; 0x22
 8004bd0:	f8ce 3000 	str.w	r3, [lr]
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	b932      	cbnz	r2, 8004be6 <_strtoul_l.constprop.0+0xc6>
 8004bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bdc:	b106      	cbz	r6, 8004be0 <_strtoul_l.constprop.0+0xc0>
 8004bde:	4240      	negs	r0, r0
 8004be0:	2a00      	cmp	r2, #0
 8004be2:	d0f9      	beq.n	8004bd8 <_strtoul_l.constprop.0+0xb8>
 8004be4:	b107      	cbz	r7, 8004be8 <_strtoul_l.constprop.0+0xc8>
 8004be6:	1e69      	subs	r1, r5, #1
 8004be8:	6011      	str	r1, [r2, #0]
 8004bea:	e7f5      	b.n	8004bd8 <_strtoul_l.constprop.0+0xb8>
 8004bec:	2430      	movs	r4, #48	; 0x30
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1b5      	bne.n	8004b5e <_strtoul_l.constprop.0+0x3e>
 8004bf2:	2308      	movs	r3, #8
 8004bf4:	e7b3      	b.n	8004b5e <_strtoul_l.constprop.0+0x3e>
 8004bf6:	2c30      	cmp	r4, #48	; 0x30
 8004bf8:	d0a9      	beq.n	8004b4e <_strtoul_l.constprop.0+0x2e>
 8004bfa:	230a      	movs	r3, #10
 8004bfc:	e7af      	b.n	8004b5e <_strtoul_l.constprop.0+0x3e>
 8004bfe:	bf00      	nop
 8004c00:	08005a3a 	.word	0x08005a3a

08004c04 <_strtoul_r>:
 8004c04:	f7ff bf8c 	b.w	8004b20 <_strtoul_l.constprop.0>

08004c08 <__submore>:
 8004c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c14:	4299      	cmp	r1, r3
 8004c16:	d11d      	bne.n	8004c54 <__submore+0x4c>
 8004c18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c1c:	f7fe f838 	bl	8002c90 <_malloc_r>
 8004c20:	b918      	cbnz	r0, 8004c2a <__submore+0x22>
 8004c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c2e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004c30:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004c34:	6360      	str	r0, [r4, #52]	; 0x34
 8004c36:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004c3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004c3e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004c42:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004c46:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004c4a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004c4e:	6020      	str	r0, [r4, #0]
 8004c50:	2000      	movs	r0, #0
 8004c52:	e7e8      	b.n	8004c26 <__submore+0x1e>
 8004c54:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004c56:	0077      	lsls	r7, r6, #1
 8004c58:	463a      	mov	r2, r7
 8004c5a:	f7ff f815 	bl	8003c88 <_realloc_r>
 8004c5e:	4605      	mov	r5, r0
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d0de      	beq.n	8004c22 <__submore+0x1a>
 8004c64:	eb00 0806 	add.w	r8, r0, r6
 8004c68:	4601      	mov	r1, r0
 8004c6a:	4632      	mov	r2, r6
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	f7fd ffd9 	bl	8002c24 <memcpy>
 8004c72:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004c76:	f8c4 8000 	str.w	r8, [r4]
 8004c7a:	e7e9      	b.n	8004c50 <__submore+0x48>

08004c7c <_fstat_r>:
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	4d07      	ldr	r5, [pc, #28]	; (8004c9c <_fstat_r+0x20>)
 8004c80:	2300      	movs	r3, #0
 8004c82:	4604      	mov	r4, r0
 8004c84:	4608      	mov	r0, r1
 8004c86:	4611      	mov	r1, r2
 8004c88:	602b      	str	r3, [r5, #0]
 8004c8a:	f000 f829 	bl	8004ce0 <_fstat>
 8004c8e:	1c43      	adds	r3, r0, #1
 8004c90:	d102      	bne.n	8004c98 <_fstat_r+0x1c>
 8004c92:	682b      	ldr	r3, [r5, #0]
 8004c94:	b103      	cbz	r3, 8004c98 <_fstat_r+0x1c>
 8004c96:	6023      	str	r3, [r4, #0]
 8004c98:	bd38      	pop	{r3, r4, r5, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000d14 	.word	0x20000d14

08004ca0 <_isatty_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4d06      	ldr	r5, [pc, #24]	; (8004cbc <_isatty_r+0x1c>)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4608      	mov	r0, r1
 8004caa:	602b      	str	r3, [r5, #0]
 8004cac:	f000 f828 	bl	8004d00 <_isatty>
 8004cb0:	1c43      	adds	r3, r0, #1
 8004cb2:	d102      	bne.n	8004cba <_isatty_r+0x1a>
 8004cb4:	682b      	ldr	r3, [r5, #0]
 8004cb6:	b103      	cbz	r3, 8004cba <_isatty_r+0x1a>
 8004cb8:	6023      	str	r3, [r4, #0]
 8004cba:	bd38      	pop	{r3, r4, r5, pc}
 8004cbc:	20000d14 	.word	0x20000d14

08004cc0 <_malloc_usable_size_r>:
 8004cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cc4:	1f18      	subs	r0, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	bfbc      	itt	lt
 8004cca:	580b      	ldrlt	r3, [r1, r0]
 8004ccc:	18c0      	addlt	r0, r0, r3
 8004cce:	4770      	bx	lr

08004cd0 <_close>:
 8004cd0:	4b02      	ldr	r3, [pc, #8]	; (8004cdc <_close+0xc>)
 8004cd2:	2258      	movs	r2, #88	; 0x58
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cda:	4770      	bx	lr
 8004cdc:	20000d14 	.word	0x20000d14

08004ce0 <_fstat>:
 8004ce0:	4b02      	ldr	r3, [pc, #8]	; (8004cec <_fstat+0xc>)
 8004ce2:	2258      	movs	r2, #88	; 0x58
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cea:	4770      	bx	lr
 8004cec:	20000d14 	.word	0x20000d14

08004cf0 <_getpid>:
 8004cf0:	4b02      	ldr	r3, [pc, #8]	; (8004cfc <_getpid+0xc>)
 8004cf2:	2258      	movs	r2, #88	; 0x58
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cfa:	4770      	bx	lr
 8004cfc:	20000d14 	.word	0x20000d14

08004d00 <_isatty>:
 8004d00:	4b02      	ldr	r3, [pc, #8]	; (8004d0c <_isatty+0xc>)
 8004d02:	2258      	movs	r2, #88	; 0x58
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	2000      	movs	r0, #0
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000d14 	.word	0x20000d14

08004d10 <_kill>:
 8004d10:	4b02      	ldr	r3, [pc, #8]	; (8004d1c <_kill+0xc>)
 8004d12:	2258      	movs	r2, #88	; 0x58
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d1a:	4770      	bx	lr
 8004d1c:	20000d14 	.word	0x20000d14

08004d20 <_lseek>:
 8004d20:	4b02      	ldr	r3, [pc, #8]	; (8004d2c <_lseek+0xc>)
 8004d22:	2258      	movs	r2, #88	; 0x58
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d2a:	4770      	bx	lr
 8004d2c:	20000d14 	.word	0x20000d14

08004d30 <_read>:
 8004d30:	4b02      	ldr	r3, [pc, #8]	; (8004d3c <_read+0xc>)
 8004d32:	2258      	movs	r2, #88	; 0x58
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d3a:	4770      	bx	lr
 8004d3c:	20000d14 	.word	0x20000d14

08004d40 <_sbrk>:
 8004d40:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <_sbrk+0x14>)
 8004d42:	4905      	ldr	r1, [pc, #20]	; (8004d58 <_sbrk+0x18>)
 8004d44:	6813      	ldr	r3, [r2, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	bf08      	it	eq
 8004d4a:	460b      	moveq	r3, r1
 8004d4c:	4418      	add	r0, r3
 8004d4e:	6010      	str	r0, [r2, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	4770      	bx	lr
 8004d54:	20000d18 	.word	0x20000d18
 8004d58:	20000d20 	.word	0x20000d20

08004d5c <_write>:
 8004d5c:	4b02      	ldr	r3, [pc, #8]	; (8004d68 <_write+0xc>)
 8004d5e:	2258      	movs	r2, #88	; 0x58
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d66:	4770      	bx	lr
 8004d68:	20000d14 	.word	0x20000d14

08004d6c <_exit>:
 8004d6c:	e7fe      	b.n	8004d6c <_exit>
 8004d6e:	bf00      	nop

08004d70 <_init>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	bf00      	nop
 8004d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d76:	bc08      	pop	{r3}
 8004d78:	469e      	mov	lr, r3
 8004d7a:	4770      	bx	lr

08004d7c <_fini>:
 8004d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7e:	bf00      	nop
 8004d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d82:	bc08      	pop	{r3}
 8004d84:	469e      	mov	lr, r3
 8004d86:	4770      	bx	lr
