
Debug/mcu_echo.elf:     file format elf32-littlearm
Debug/mcu_echo.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000895

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x000012c0 memsz 0x000012c0 flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x080012c0 align 2**16
         filesz 0x00000068 memsz 0x00000898 flags rw-
    LOAD off    0x00000898 vaddr 0x20000898 paddr 0x08001328 align 2**16
         filesz 0x00000000 memsz 0x00000600 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001080  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001240  08001240  00011240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012b0  080012b0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080012b0  080012b0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012b0  080012b0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080012b0  080012b0  000112b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080012b8  080012b8  000112b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080012c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000830  20000068  08001328  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000898  08001328  00020898  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000888d  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff4  00000000  00000000  00028923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000255  00000000  00000000  0002a917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000370  00000000  00000000  0002ab70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000c0  00000000  00000000  0002aee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000031fe  00000000  00000000  0002afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001782  00000000  00000000  0002e19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000003c  00000000  00000000  0002f920  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000618  00000000  00000000  0002f95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000117e  00000000  00000000  0002ff74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 000001f5  00000000  00000000  000310f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  000312e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001c0 l    d  .text	00000000 .text
08001240 l    d  .rodata	00000000 .rodata
080012b0 l    d  .ARM.extab	00000000 .ARM.extab
080012b0 l    d  .ARM	00000000 .ARM
080012b0 l    d  .preinit_array	00000000 .preinit_array
080012b0 l    d  .init_array	00000000 .init_array
080012b8 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000068 l    d  .bss	00000000 .bss
20000898 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 startup_stm32l4s5xx.o
f1e0f85f l       *ABS*	00000000 BootRAM
080008ac l       .text	00000000 LoopCopyDataInit
080008a6 l       .text	00000000 CopyDataInit
080008be l       .text	00000000 LoopFillZerobss
080008ba l       .text	00000000 FillZerobss
080008ca l       .text	00000000 LoopForever
080008e4 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 crtstuff.c
08001228 l     O .text	00000000 __EH_FRAME_BEGIN__
08000270 l     F .text	00000000 __do_global_dtors_aux
20000068 l     O .bss	00000000 completed.1
080012b8 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000294 l     F .text	00000000 frame_dummy
2000006c l     O .bss	00000000 object.0
080012b0 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mcu_echo.c
080002b0 l     F .text	00000018 send
080002c8 l     F .text	00000018 receive
00000000 l    df *ABS*	00000000 uart.c
08000458 l     F .text	00000064 uart_pin_setup
080004bc l     F .text	000000a4 uart_enable
00000000 l    df *ABS*	00000000 system_stm32l4xx.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
0800103c l     F .text	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrk.c
20000894 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000008 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
080012bc l       .fini_array	00000000 __fini_array_end
080012b8 l       .fini_array	00000000 __fini_array_start
080012b4 l       .init_array	00000000 __init_array_end
080012b0 l       .preinit_array	00000000 __preinit_array_end
080012b0 l       .init_array	00000000 __init_array_start
080012b0 l       .preinit_array	00000000 __preinit_array_start
080008e4  w    F .text	00000002 RTC_Alarm_IRQHandler
080011fc g     F .text	00000010 _malloc_usable_size_r
080008e4  w    F .text	00000002 EXTI2_IRQHandler
080008e4  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
080008e4  w    F .text	00000002 TIM8_CC_IRQHandler
080008e4  w    F .text	00000002 DebugMon_Handler
080008e4  w    F .text	00000002 TIM1_CC_IRQHandler
080008e4  w    F .text	00000002 TSC_IRQHandler
080008e4  w    F .text	00000002 HardFault_Handler
080011f0 g     F .text	0000000c __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
08000560 g     F .text	0000003c uart_baud_gen
080008e4  w    F .text	00000002 SysTick_Handler
08000f70 g     F .text	00000034 memmove
080008e4  w    F .text	00000002 TAMP_STAMP_IRQHandler
080012c0 g       *ABS*	00000000 _sidata
080008e4  w    F .text	00000002 PendSV_Handler
080008e4  w    F .text	00000002 NMI_Handler
080012b0 g       .ARM	00000000 __exidx_end
080008e4  w    F .text	00000002 EXTI3_IRQHandler
08000414 g     F .text	00000044 uart_receive
080003c4 g     F .text	00000050 uart_send
080008e4  w    F .text	00000002 LPTIM2_IRQHandler
080008e4  w    F .text	00000002 DFSDM1_FLT1_IRQHandler
20000890 g     O .bss	00000004 errno
08001240 g       .text	00000000 _etext
20000068 g       .bss	00000000 _sbss
080008e4  w    F .text	00000002 GFXMMU_IRQHandler
080008e4  w    F .text	00000002 I2C3_ER_IRQHandler
080008e4  w    F .text	00000002 DFSDM1_FLT2_IRQHandler
08000f54 g     F .text	0000001c memcpy
20000084 g     O .bss	00000800 msg_buffer
08000a38 g     F .text	000001fc _svfprintf_r
080008e4  w    F .text	00000002 EXTI0_IRQHandler
080008e4  w    F .text	00000002 I2C2_EV_IRQHandler
080008e4  w    F .text	00000002 CAN1_RX0_IRQHandler
080008e4  w    F .text	00000002 FPU_IRQHandler
20000000 g     O .data	00000004 SystemCoreClock
080008e4  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
080008e4  w    F .text	00000002 UsageFault_Handler
080008e4  w    F .text	00000002 LTDC_ER_IRQHandler
20000068 g       .bss	00000000 __bss_start__
20000000 g       .data	00000000 _sdata
080008e4  w    F .text	00000002 SPI1_IRQHandler
080008e4  w    F .text	00000002 OCTOSPI1_IRQHandler
080011c4 g     F .text	00000020 _sbrk_r
080008e4  w    F .text	00000002 TIM6_DAC_IRQHandler
080008e4  w    F .text	00000002 DCMI_IRQHandler
080008e4  w    F .text	00000002 TIM8_UP_IRQHandler
080012b0 g       .ARM	00000000 __exidx_start
08001164 g     F .text	0000005e _realloc_r
080008e8 g     F .text	00000048 __libc_init_array
080008e4  w    F .text	00000002 OCTOSPI2_IRQHandler
080008e4  w    F .text	00000002 DMA2_Channel2_IRQHandler
080008e4  w    F .text	00000002 DMA1_Channel4_IRQHandler
080008e4  w    F .text	00000002 SAI2_IRQHandler
080008e4  w    F .text	00000002 ADC1_IRQHandler
0800120c g     F .text	0000001c _sbrk
080008e4  w    F .text	00000002 DFSDM1_FLT3_IRQHandler
08001228 g     F .text	00000000 _init
080008e4  w    F .text	00000002 USART3_IRQHandler
20000898 g       .bss	00000000 _ebss
080008e4  w    F .text	00000002 DMA1_Channel7_IRQHandler
08000894  w    F .text	00000038 Reset_Handler
080008e4  w    F .text	00000002 CAN1_RX1_IRQHandler
080008e4  w    F .text	00000002 UART5_IRQHandler
20000884 g     O .bss	00000001 __lock___malloc_recursive_mutex
080005b4 g     F .text	00000040 led_on
080008e4  w    F .text	00000002 TIM4_IRQHandler
080008e4  w    F .text	00000002 DMA2_Channel1_IRQHandler
20000898 g       ._user_heap_stack	00000000 end
080008e4  w    F .text	00000002 I2C1_EV_IRQHandler
08000982 g     F .text	00000002 __retarget_lock_release_recursive
08000984 g     F .text	000000b4 __ssputs_r
080008e4  w    F .text	00000002 DMAMUX1_OVR_IRQHandler
080008e4  w    F .text	00000002 DMA1_Channel6_IRQHandler
0800059c g     F .text	00000016 uart_init
080008e4  w    F .text	00000002 UART4_IRQHandler
080008e4  w    F .text	00000002 DMA2_Channel4_IRQHandler
080001d0 g     F .text	00000000 memchr
20000898 g       .bss	00000000 __bss_end__
08000fa4 g     F .text	00000098 _free_r
080008e4  w    F .text	00000002 TIM3_IRQHandler
080008e4  w    F .text	00000002 RCC_IRQHandler
00000200 g       *ABS*	00000000 _Min_Heap_Size
080008e4  w    F .text	00000002 DMA1_Channel1_IRQHandler
080008e4 g       .text	00000002 Default_Handler
080008e4  w    F .text	00000002 DMA2_Channel7_IRQHandler
080008e4  w    F .text	00000002 EXTI15_10_IRQHandler
080006f8 g     F .text	0000019c set_sysclk_to_120
080008e4  w    F .text	00000002 TIM7_IRQHandler
080008e4  w    F .text	00000002 SDMMC1_IRQHandler
080008e4  w    F .text	00000002 TIM5_IRQHandler
080008e4  w    F .text	00000002 I2C3_EV_IRQHandler
080008e4  w    F .text	00000002 EXTI9_5_IRQHandler
080008e4  w    F .text	00000002 RTC_WKUP_IRQHandler
080008e4  w    F .text	00000002 LTDC_IRQHandler
080011e4 g     F .text	0000000c __malloc_lock
080008e4  w    F .text	00000002 PVD_PVM_IRQHandler
080008e4  w    F .text	00000002 SPI2_IRQHandler
08000980 g     F .text	00000002 __retarget_lock_acquire_recursive
08000930 g     F .text	00000010 memset
080008e4  w    F .text	00000002 MemManage_Handler
080002e0 g     F .text	000000e4 main
080008e4  w    F .text	00000002 CAN1_TX_IRQHandler
080008e4  w    F .text	00000002 SVC_Handler
080008e4  w    F .text	00000002 DMA2_Channel5_IRQHandler
0800107c g     F .text	000000e8 _malloc_r
080008e4  w    F .text	00000002 DMA1_Channel5_IRQHandler
080008e4  w    F .text	00000002 EXTI4_IRQHandler
080006ac g     F .text	0000004c SystemInit
080008e4  w    F .text	00000002 RNG_IRQHandler
08001234 g     F .text	00000000 _fini
080008e4  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08000940 g     F .text	00000040 sprintf
080005f4 g     F .text	00000040 led_off
080008e4  w    F .text	00000002 DMA1_Channel3_IRQHandler
080008e4  w    F .text	00000002 COMP_IRQHandler
08000c34 g     F .text	000000da _printf_common
20000004 g     O .data	00000004 _impure_ptr
080008e4  w    F .text	00000002 HASH_CRS_IRQHandler
08000a38 g     F .text	000001fc _svfiprintf_r
080008e4  w    F .text	00000002 WWDG_IRQHandler
080008e4  w    F .text	00000002 I2C4_EV_IRQHandler
080008e4  w    F .text	00000002 LPUART1_IRQHandler
080008e4  w    F .text	00000002 DMA2_Channel6_IRQHandler
080008e4  w    F .text	00000002 TIM2_IRQHandler
08000634 g     F .text	00000078 led_init
080008e4  w    F .text	00000002 DMA2D_IRQHandler
200a0000 g       .isr_vector	00000000 _estack
080008e4  w    F .text	00000002 EXTI1_IRQHandler
20000068 g       .data	00000000 _edata
080008e4  w    F .text	00000002 AES_IRQHandler
080008e4  w    F .text	00000002 USART2_IRQHandler
080008e4  w    F .text	00000002 DFSDM1_FLT0_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
080008e4  w    F .text	00000002 I2C2_ER_IRQHandler
080008e4  w    F .text	00000002 DMA1_Channel2_IRQHandler
08000940 g     F .text	00000040 siprintf
080008e4  w    F .text	00000002 TIM8_BRK_IRQHandler
080008e4  w    F .text	00000002 CAN1_SCE_IRQHandler
080008e4  w    F .text	00000002 FLASH_IRQHandler
080008e4  w    F .text	00000002 BusFault_Handler
080008e4  w    F .text	00000002 USART1_IRQHandler
080001c0 g     F .text	00000010 strlen
080008e4  w    F .text	00000002 OTG_FS_IRQHandler
08000d10 g     F .text	00000244 _printf_i
080008e4  w    F .text	00000002 SPI3_IRQHandler
2000088c g     O .bss	00000004 __malloc_sbrk_start
080008e4  w    F .text	00000002 I2C1_ER_IRQHandler
080008e4  w    F .text	00000002 FMC_IRQHandler
20000888 g     O .bss	00000004 __malloc_free_list
080008e4  w    F .text	00000002 LPTIM1_IRQHandler
080008e4  w    F .text	00000002 I2C4_ER_IRQHandler
080008e4  w    F .text	00000002 SAI1_IRQHandler
080008e4  w    F .text	00000002 DMA2_Channel3_IRQHandler
080008e4  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

080001c0 <strlen>:
 80001c0:	4603      	mov	r3, r0
 80001c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001c6:	2a00      	cmp	r2, #0
 80001c8:	d1fb      	bne.n	80001c2 <strlen+0x2>
 80001ca:	1a18      	subs	r0, r3, r0
 80001cc:	3801      	subs	r0, #1
 80001ce:	4770      	bx	lr

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__do_global_dtors_aux>:
 8000270:	b510      	push	{r4, lr}
 8000272:	4c05      	ldr	r4, [pc, #20]	; (8000288 <__do_global_dtors_aux+0x18>)
 8000274:	7823      	ldrb	r3, [r4, #0]
 8000276:	b933      	cbnz	r3, 8000286 <__do_global_dtors_aux+0x16>
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <__do_global_dtors_aux+0x1c>)
 800027a:	b113      	cbz	r3, 8000282 <__do_global_dtors_aux+0x12>
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <__do_global_dtors_aux+0x20>)
 800027e:	f3af 8000 	nop.w
 8000282:	2301      	movs	r3, #1
 8000284:	7023      	strb	r3, [r4, #0]
 8000286:	bd10      	pop	{r4, pc}
 8000288:	20000068 	.word	0x20000068
 800028c:	00000000 	.word	0x00000000
 8000290:	08001228 	.word	0x08001228

08000294 <frame_dummy>:
 8000294:	b508      	push	{r3, lr}
 8000296:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <frame_dummy+0x10>)
 8000298:	b11b      	cbz	r3, 80002a2 <frame_dummy+0xe>
 800029a:	4903      	ldr	r1, [pc, #12]	; (80002a8 <frame_dummy+0x14>)
 800029c:	4803      	ldr	r0, [pc, #12]	; (80002ac <frame_dummy+0x18>)
 800029e:	f3af 8000 	nop.w
 80002a2:	bd08      	pop	{r3, pc}
 80002a4:	00000000 	.word	0x00000000
 80002a8:	2000006c 	.word	0x2000006c
 80002ac:	08001228 	.word	0x08001228

080002b0 <send>:
	}
	return msg;
}

// Send size bytes at data pointer, using method defined by USE_DMA macro
static void send(void * data, size_t size) {
 80002b0:	b500      	push	{lr}
 80002b2:	b083      	sub	sp, #12
 80002b4:	9001      	str	r0, [sp, #4]
 80002b6:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_tx_start(data, size);
		uart_tx_wait();
	} else {
	*/
		uart_send(data, size);
 80002b8:	9900      	ldr	r1, [sp, #0]
 80002ba:	9801      	ldr	r0, [sp, #4]
 80002bc:	f000 f882 	bl	80003c4 <uart_send>
	//}
}
 80002c0:	bf00      	nop
 80002c2:	b003      	add	sp, #12
 80002c4:	f85d fb04 	ldr.w	pc, [sp], #4

080002c8 <receive>:

// Receive size bytes at buffer pointer, using method defined by USE_DMA macro
static void receive(void * buffer, size_t size) {
 80002c8:	b500      	push	{lr}
 80002ca:	b083      	sub	sp, #12
 80002cc:	9001      	str	r0, [sp, #4]
 80002ce:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_rx_start(buffer, size);
		uart_rx_wait();
	} else {
	*/
		uart_receive(buffer, size);
 80002d0:	9900      	ldr	r1, [sp, #0]
 80002d2:	9801      	ldr	r0, [sp, #4]
 80002d4:	f000 f89e 	bl	8000414 <uart_receive>
	//}
}
 80002d8:	bf00      	nop
 80002da:	b003      	add	sp, #12
 80002dc:	f85d fb04 	ldr.w	pc, [sp], #4

080002e0 <main>:

int main(void) {
 80002e0:	b500      	push	{lr}
 80002e2:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
	char debug_msg[BUFFERSIZE] = {0};
 80002e6:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
 80002ea:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	3304      	adds	r3, #4
 80002f4:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fb18 	bl	8000930 <memset>
	char * stripped_msg;
	size_t received_size=0;
 8000300:	2300      	movs	r3, #0
 8000302:	f8cd 3808 	str.w	r3, [sp, #2056]	; 0x808
	int discard_cali = 0; // Discard baud calibration character after first communication
 8000306:	2300      	movs	r3, #0
 8000308:	f8cd 380c 	str.w	r3, [sp, #2060]	; 0x80c

	uart_init();
 800030c:	f000 f946 	bl	800059c <uart_init>
	led_init();
 8000310:	f000 f990 	bl	8000634 <led_init>
	//uart_dma_init();

	while(1) {
		if (discard_cali) {
 8000314:	f8dd 380c 	ldr.w	r3, [sp, #2060]	; 0x80c
 8000318:	2b00      	cmp	r3, #0
 800031a:	d007      	beq.n	800032c <main+0x4c>
			// Discard Auto Baud calibration character
			receive(msg_buffer, 1);
 800031c:	2101      	movs	r1, #1
 800031e:	4827      	ldr	r0, [pc, #156]	; (80003bc <main+0xdc>)
 8000320:	f7ff ffd2 	bl	80002c8 <receive>
			memset(msg_buffer, 0, 1);
 8000324:	4b25      	ldr	r3, [pc, #148]	; (80003bc <main+0xdc>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
 800032a:	e002      	b.n	8000332 <main+0x52>
		} else {
			discard_cali = 1;
 800032c:	2301      	movs	r3, #1
 800032e:	f8cd 380c 	str.w	r3, [sp, #2060]	; 0x80c
		}

		// Read received buffer size
		led_on(LD1);
 8000332:	2000      	movs	r0, #0
 8000334:	f000 f93e 	bl	80005b4 <led_on>
		receive(msg_buffer, sizeof(uint32_t));
 8000338:	2104      	movs	r1, #4
 800033a:	4820      	ldr	r0, [pc, #128]	; (80003bc <main+0xdc>)
 800033c:	f7ff ffc4 	bl	80002c8 <receive>
		received_size = READSIZE(msg_buffer);
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <main+0xdc>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f8cd 3808 	str.w	r3, [sp, #2056]	; 0x808
		memset(msg_buffer, 0, sizeof(uint32_t));
 8000348:	2204      	movs	r2, #4
 800034a:	2100      	movs	r1, #0
 800034c:	481b      	ldr	r0, [pc, #108]	; (80003bc <main+0xdc>)
 800034e:	f000 faef 	bl	8000930 <memset>
		led_off(LD1);
 8000352:	2000      	movs	r0, #0
 8000354:	f000 f94e 	bl	80005f4 <led_off>

		// Send back buffer content
		if (received_size > BUFFERSIZE) {
 8000358:	f8dd 3808 	ldr.w	r3, [sp, #2056]	; 0x808
 800035c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000360:	d912      	bls.n	8000388 <main+0xa8>
			// Message too large
			sprintf(debug_msg, "Attempting to read %u bytes larger than buffer size %d.\n", (unsigned int)received_size, BUFFERSIZE);
 8000362:	a801      	add	r0, sp, #4
 8000364:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000368:	f8dd 2808 	ldr.w	r2, [sp, #2056]	; 0x808
 800036c:	4914      	ldr	r1, [pc, #80]	; (80003c0 <main+0xe0>)
 800036e:	f000 fae7 	bl	8000940 <siprintf>
			send(debug_msg, strlen(debug_msg));
 8000372:	ab01      	add	r3, sp, #4
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ff23 	bl	80001c0 <strlen>
 800037a:	4602      	mov	r2, r0
 800037c:	ab01      	add	r3, sp, #4
 800037e:	4611      	mov	r1, r2
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ff95 	bl	80002b0 <send>
 8000386:	e7c5      	b.n	8000314 <main+0x34>
		} else {
			// Read message
			receive(msg_buffer, received_size);
 8000388:	f8dd 1808 	ldr.w	r1, [sp, #2056]	; 0x808
 800038c:	480b      	ldr	r0, [pc, #44]	; (80003bc <main+0xdc>)
 800038e:	f7ff ff9b 	bl	80002c8 <receive>

			// Echo message
			stripped_msg = msg_buffer;
 8000392:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <main+0xdc>)
 8000394:	f8cd 3804 	str.w	r3, [sp, #2052]	; 0x804
			send(stripped_msg, strlen(stripped_msg));
 8000398:	f8dd 0804 	ldr.w	r0, [sp, #2052]	; 0x804
 800039c:	f7ff ff10 	bl	80001c0 <strlen>
 80003a0:	4603      	mov	r3, r0
 80003a2:	4619      	mov	r1, r3
 80003a4:	f8dd 0804 	ldr.w	r0, [sp, #2052]	; 0x804
 80003a8:	f7ff ff82 	bl	80002b0 <send>
			memset(msg_buffer, 0, received_size);
 80003ac:	f8dd 2808 	ldr.w	r2, [sp, #2056]	; 0x808
 80003b0:	2100      	movs	r1, #0
 80003b2:	4802      	ldr	r0, [pc, #8]	; (80003bc <main+0xdc>)
 80003b4:	f000 fabc 	bl	8000930 <memset>
		if (discard_cali) {
 80003b8:	e7ac      	b.n	8000314 <main+0x34>
 80003ba:	bf00      	nop
 80003bc:	20000084 	.word	0x20000084
 80003c0:	08001240 	.word	0x08001240

080003c4 <uart_send>:
#include "uart.h"

char msg_buffer[BUFFERSIZE] = {0};

// Send content of pointer through uart
void uart_send(void * data, size_t size) {
 80003c4:	b084      	sub	sp, #16
 80003c6:	9001      	str	r0, [sp, #4]
 80003c8:	9100      	str	r1, [sp, #0]
	for (size_t i=0; i<size; i++){
 80003ca:	2300      	movs	r3, #0
 80003cc:	9303      	str	r3, [sp, #12]
 80003ce:	e00f      	b.n	80003f0 <uart_send+0x2c>
		// Wait until TXE bit is set
		while(!(UART4->ISR & (1 << 7)));
 80003d0:	bf00      	nop
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <uart_send+0x4c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0f9      	beq.n	80003d2 <uart_send+0xe>
		// Send character
		UART4->TDR = ((char *)data)[i];
 80003de:	9a01      	ldr	r2, [sp, #4]
 80003e0:	9b03      	ldr	r3, [sp, #12]
 80003e2:	4413      	add	r3, r2
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <uart_send+0x4c>)
 80003e8:	851a      	strh	r2, [r3, #40]	; 0x28
	for (size_t i=0; i<size; i++){
 80003ea:	9b03      	ldr	r3, [sp, #12]
 80003ec:	3301      	adds	r3, #1
 80003ee:	9303      	str	r3, [sp, #12]
 80003f0:	9a03      	ldr	r2, [sp, #12]
 80003f2:	9b00      	ldr	r3, [sp, #0]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d3eb      	bcc.n	80003d0 <uart_send+0xc>
	}
	// Wait for character transmit complete - TC bit
	while(!(UART4->ISR & (1 << 6))) {};
 80003f8:	bf00      	nop
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <uart_send+0x4c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000402:	2b00      	cmp	r3, #0
 8000404:	d0f9      	beq.n	80003fa <uart_send+0x36>
}
 8000406:	bf00      	nop
 8000408:	bf00      	nop
 800040a:	b004      	add	sp, #16
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40004c00 	.word	0x40004c00

08000414 <uart_receive>:

// Receive size bytes of content from uart and write it to buffer
void uart_receive(void * buffer, size_t size)  {
 8000414:	b084      	sub	sp, #16
 8000416:	9001      	str	r0, [sp, #4]
 8000418:	9100      	str	r1, [sp, #0]
	for (size_t i=0; i < size; i++) {
 800041a:	2300      	movs	r3, #0
 800041c:	9303      	str	r3, [sp, #12]
 800041e:	e011      	b.n	8000444 <uart_receive+0x30>
		// Wait until RXNE bit is set
		while(!(UART4->ISR & (1 << 5)));
 8000420:	bf00      	nop
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <uart_receive+0x40>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 0320 	and.w	r3, r3, #32
 800042a:	2b00      	cmp	r3, #0
 800042c:	d0f9      	beq.n	8000422 <uart_receive+0xe>
		// Receive character
		((char *)buffer)[i] = UART4->RDR;
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <uart_receive+0x40>)
 8000430:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000432:	b299      	uxth	r1, r3
 8000434:	9a01      	ldr	r2, [sp, #4]
 8000436:	9b03      	ldr	r3, [sp, #12]
 8000438:	4413      	add	r3, r2
 800043a:	b2ca      	uxtb	r2, r1
 800043c:	701a      	strb	r2, [r3, #0]
	for (size_t i=0; i < size; i++) {
 800043e:	9b03      	ldr	r3, [sp, #12]
 8000440:	3301      	adds	r3, #1
 8000442:	9303      	str	r3, [sp, #12]
 8000444:	9a03      	ldr	r2, [sp, #12]
 8000446:	9b00      	ldr	r3, [sp, #0]
 8000448:	429a      	cmp	r2, r3
 800044a:	d3e9      	bcc.n	8000420 <uart_receive+0xc>
	}

}
 800044c:	bf00      	nop
 800044e:	bf00      	nop
 8000450:	b004      	add	sp, #16
 8000452:	4770      	bx	lr
 8000454:	40004c00 	.word	0x40004c00

08000458 <uart_pin_setup>:

// Setup GPIO A2 and A3 pins for UART
static void uart_pin_setup(void) {
    // Enable GPIOA clock, bit 0 on AHB2ENR
    RCC->AHB2ENR |= (1 << 0);
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <uart_pin_setup+0x60>)
 800045a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045c:	4a16      	ldr	r2, [pc, #88]	; (80004b8 <uart_pin_setup+0x60>)
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	64d3      	str	r3, [r2, #76]	; 0x4c

    // Set pin modes as alternate mode 7 (PA0 and PA1)
    // UART4 TX and RX pins are PA0 (D1) and PA1(D0) respectively 
    GPIOA->MODER &= ~(0xFU << 0);
 8000464:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800046e:	f023 030f 	bic.w	r3, r3, #15
 8000472:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xAU << 0);
 8000474:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800047e:	f043 030a 	orr.w	r3, r3, #10
 8000482:	6013      	str	r3, [r2, #0]

    // Set pin modes as high speed
    GPIOA->OSPEEDR |= 0x0000000F;
 8000484:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800048e:	f043 030f 	orr.w	r3, r3, #15
 8000492:	6093      	str	r3, [r2, #8]

    // Choose AF8 for UART4 in Alternate Function registers
    GPIOA->AFR[0] |= (0x8U << 0); // for pin A0
 8000494:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000498:	6a1b      	ldr	r3, [r3, #32]
 800049a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800049e:	f043 0308 	orr.w	r3, r3, #8
 80004a2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x8U << 4); // for pin A1
 80004a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004a8:	6a1b      	ldr	r3, [r3, #32]
 80004aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004b2:	6213      	str	r3, [r2, #32]
}
 80004b4:	bf00      	nop
 80004b6:	4770      	bx	lr
 80004b8:	40021000 	.word	0x40021000

080004bc <uart_enable>:

// Initialize UART 4
static void uart_enable(void) {
    // enable UART4 clock
    RCC->APB1ENR1 |= (1 << 19);
 80004bc:	4b26      	ldr	r3, [pc, #152]	; (8000558 <uart_enable+0x9c>)
 80004be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004c0:	4a25      	ldr	r2, [pc, #148]	; (8000558 <uart_enable+0x9c>)
 80004c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004c6:	6593      	str	r3, [r2, #88]	; 0x58

	// Select Sysclk as UART4 Source
	// RCC->CCIPR |= (1U << 6);

    // Disable uart4 - UE, bit 0
    UART4->CR1 &= ~(1 << 0);
 80004c8:	4b24      	ldr	r3, [pc, #144]	; (800055c <uart_enable+0xa0>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a23      	ldr	r2, [pc, #140]	; (800055c <uart_enable+0xa0>)
 80004ce:	f023 0301 	bic.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]

	// Disable FIFO mode
	UART4->CR1 &= ~(1<<20);
 80004d4:	4b21      	ldr	r3, [pc, #132]	; (800055c <uart_enable+0xa0>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a20      	ldr	r2, [pc, #128]	; (800055c <uart_enable+0xa0>)
 80004da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80004de:	6013      	str	r3, [r2, #0]

	// Set word size to 8
	UART4->CR1 &= ~(1U<<12 | 1U<<28);
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <uart_enable+0xa0>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a1d      	ldr	r2, [pc, #116]	; (800055c <uart_enable+0xa0>)
 80004e6:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80004ea:	6013      	str	r3, [r2, #0]

	// OVER8 = 0
	UART4->CR1 &= ~(1<<15);
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <uart_enable+0xa0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a1a      	ldr	r2, [pc, #104]	; (800055c <uart_enable+0xa0>)
 80004f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80004f6:	6013      	str	r3, [r2, #0]

	// For STM32L4S5: Sysclk = 120 Mhz (Sysclk/2), Baudrate = 115200, OVER8 = 0
	// USARTDIV = (1+OVER8) * fCK / baud
	// USARTDIV = 120Mhz / 115200 = 1041.67 ~ 1042
    UART4->BRR = 1042U;
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <uart_enable+0xa0>)
 80004fa:	f240 4212 	movw	r2, #1042	; 0x412
 80004fe:	60da      	str	r2, [r3, #12]

	// Set stop bits to 1
	UART4->CR2 &= ~(0xF << 12);
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <uart_enable+0xa0>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	4a15      	ldr	r2, [pc, #84]	; (800055c <uart_enable+0xa0>)
 8000506:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800050a:	6053      	str	r3, [r2, #4]

	// Disable parity
	UART4->CR1 &= ~(1<<10);
 800050c:	4b13      	ldr	r3, [pc, #76]	; (800055c <uart_enable+0xa0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a12      	ldr	r2, [pc, #72]	; (800055c <uart_enable+0xa0>)
 8000512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]

	// Set Auto Baud detection to 0x55 frame detection
	UART4->CR2 |= (3U<<21);
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <uart_enable+0xa0>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	4a0f      	ldr	r2, [pc, #60]	; (800055c <uart_enable+0xa0>)
 800051e:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8000522:	6053      	str	r3, [r2, #4]
	
	// Enable Auto Baud detection
	UART4->CR2 |= (1<<20);
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <uart_enable+0xa0>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <uart_enable+0xa0>)
 800052a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052e:	6053      	str	r3, [r2, #4]

    // UART4 TX enable, TE bit 3
    UART4->CR1 |= (1 << 3);
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <uart_enable+0xa0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a09      	ldr	r2, [pc, #36]	; (800055c <uart_enable+0xa0>)
 8000536:	f043 0308 	orr.w	r3, r3, #8
 800053a:	6013      	str	r3, [r2, #0]

    // UART4 RX enable, RE bit 2
    UART4->CR1 |= (1 << 2);
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <uart_enable+0xa0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a06      	ldr	r2, [pc, #24]	; (800055c <uart_enable+0xa0>)
 8000542:	f043 0304 	orr.w	r3, r3, #4
 8000546:	6013      	str	r3, [r2, #0]

    // Enable uart4 - UE, bit 0
    UART4->CR1 |= (1 << 0);
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <uart_enable+0xa0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a03      	ldr	r2, [pc, #12]	; (800055c <uart_enable+0xa0>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6013      	str	r3, [r2, #0]
}	
 8000554:	bf00      	nop
 8000556:	4770      	bx	lr
 8000558:	40021000 	.word	0x40021000
 800055c:	40004c00 	.word	0x40004c00

08000560 <uart_baud_gen>:

void uart_baud_gen(void) {
 8000560:	b500      	push	{lr}
 8000562:	b085      	sub	sp, #20
	char temp[8] = {0};
 8000564:	2300      	movs	r3, #0
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	2300      	movs	r3, #0
 800056a:	9302      	str	r3, [sp, #8]
	volatile uint32_t * brr = &(UART4->BRR);
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <uart_baud_gen+0x34>)
 800056e:	9303      	str	r3, [sp, #12]
	uart_receive(temp, 1);
 8000570:	ab01      	add	r3, sp, #4
 8000572:	2101      	movs	r1, #1
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ff4d 	bl	8000414 <uart_receive>
	// Wait for auto baud generation to complete- ABRF bit
	while(!(UART4->ISR & (1 << 15))) {};
 800057a:	bf00      	nop
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <uart_baud_gen+0x38>)
 800057e:	69db      	ldr	r3, [r3, #28]
 8000580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0f9      	beq.n	800057c <uart_baud_gen+0x1c>
}
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	b005      	add	sp, #20
 800058e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000592:	bf00      	nop
 8000594:	40004c0c 	.word	0x40004c0c
 8000598:	40004c00 	.word	0x40004c00

0800059c <uart_init>:

void uart_init(void)
{
 800059c:	b508      	push	{r3, lr}
	// Set system clock
	set_sysclk_to_120();
 800059e:	f000 f8ab 	bl	80006f8 <set_sysclk_to_120>

	uart_pin_setup();
 80005a2:	f7ff ff59 	bl	8000458 <uart_pin_setup>
	uart_enable();
 80005a6:	f7ff ff89 	bl	80004bc <uart_enable>
	uart_baud_gen();
 80005aa:	f7ff ffd9 	bl	8000560 <uart_baud_gen>
}
 80005ae:	bf00      	nop
 80005b0:	bd08      	pop	{r3, pc}
	...

080005b4 <led_on>:

// Turn on LED
void led_on(led l) {
 80005b4:	b082      	sub	sp, #8
 80005b6:	4603      	mov	r3, r0
 80005b8:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (l) {
 80005bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <led_on+0x16>
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d009      	beq.n	80005dc <led_on+0x28>
			break;
		case LD2:
			GPIOB->ODR |= (1U<<14);
			break;
		default:
			break;
 80005c8:	e00f      	b.n	80005ea <led_on+0x36>
			GPIOA->ODR |= (1U<<5);
 80005ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005d4:	f043 0320 	orr.w	r3, r3, #32
 80005d8:	6153      	str	r3, [r2, #20]
			break;
 80005da:	e006      	b.n	80005ea <led_on+0x36>
			GPIOB->ODR |= (1U<<14);
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <led_on+0x3c>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <led_on+0x3c>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6153      	str	r3, [r2, #20]
			break;
 80005e8:	bf00      	nop
	}
}
 80005ea:	bf00      	nop
 80005ec:	b002      	add	sp, #8
 80005ee:	4770      	bx	lr
 80005f0:	48000400 	.word	0x48000400

080005f4 <led_off>:

// Turn off LED
void led_off(led l) {
 80005f4:	b082      	sub	sp, #8
 80005f6:	4603      	mov	r3, r0
 80005f8:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (l) {
 80005fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d002      	beq.n	800060a <led_off+0x16>
 8000604:	2b01      	cmp	r3, #1
 8000606:	d009      	beq.n	800061c <led_off+0x28>
			break;
		case LD2:
			GPIOB->ODR &= ~(1U<<14);
			break;
		default:
			break;
 8000608:	e00f      	b.n	800062a <led_off+0x36>
			GPIOA->ODR &= ~(1U<<5);
 800060a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000614:	f023 0320 	bic.w	r3, r3, #32
 8000618:	6153      	str	r3, [r2, #20]
			break;
 800061a:	e006      	b.n	800062a <led_off+0x36>
			GPIOB->ODR &= ~(1U<<14);
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <led_off+0x3c>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	4a03      	ldr	r2, [pc, #12]	; (8000630 <led_off+0x3c>)
 8000622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000626:	6153      	str	r3, [r2, #20]
			break;
 8000628:	bf00      	nop
	}
}
 800062a:	bf00      	nop
 800062c:	b002      	add	sp, #8
 800062e:	4770      	bx	lr
 8000630:	48000400 	.word	0x48000400

08000634 <led_init>:
}

// Setup LED GPIO
void led_init(void) {
	// Enable GPIOA and GPIOB clock
	RCC->AHB2ENR |= (1U << 0);
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <led_init+0x70>)
 8000636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000638:	4a1a      	ldr	r2, [pc, #104]	; (80006a4 <led_init+0x70>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (1U << 1);
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <led_init+0x70>)
 8000642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000644:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <led_init+0x70>)
 8000646:	f043 0302 	orr.w	r3, r3, #2
 800064a:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Turn on output mode on A5 and B14
	GPIOA->MODER &= ~(0xFU << 10);
 800064c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000656:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800065a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 10);
 800065c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800066a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0xFU << 28);
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <led_init+0x74>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <led_init+0x74>)
 8000672:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000676:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 28);
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <led_init+0x74>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <led_init+0x74>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6013      	str	r3, [r2, #0]

	// Turn off LEDs
	GPIOA->ODR &= ~(1U<<5);
 8000684:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800068e:	f023 0320 	bic.w	r3, r3, #32
 8000692:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~(1U<<14);
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <led_init+0x74>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a03      	ldr	r2, [pc, #12]	; (80006a8 <led_init+0x74>)
 800069a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800069e:	6153      	str	r3, [r2, #20]
}
 80006a0:	bf00      	nop
 80006a2:	4770      	bx	lr
 80006a4:	40021000 	.word	0x40021000
 80006a8:	48000400 	.word	0x48000400

080006ac <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <SystemInit+0x44>)
 80006ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <SystemInit+0x44>)
 80006b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  	// Set MSION bit
	RCC->CR |= 1U<<0;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <SystemInit+0x48>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <SystemInit+0x48>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

	// Reset HSEON, CSSON, PLLON, and HSEBYP bit
	RCC->CR &= ~((1U<<16) | (1U<<19) | (1U<<24) | (1U<<18));
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <SystemInit+0x48>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <SystemInit+0x48>)
 80006ce:	f023 7386 	bic.w	r3, r3, #17563648	; 0x10c0000
 80006d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006d6:	6013      	str	r3, [r2, #0]
	// Reset RCC clock configuration
	RCC->CFGR = 0x00000000;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <SystemInit+0x48>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
	RCC->PLLCFGR = 0x00001000;	
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <SystemInit+0x48>)
 80006e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006e4:	60da      	str	r2, [r3, #12]
	// Disable all clock interrupts
	RCC->CIER = 0x00000000;
 80006e6:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <SystemInit+0x48>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
}
 80006ec:	bf00      	nop
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00
 80006f4:	40021000 	.word	0x40021000

080006f8 <set_sysclk_to_120>:
}

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

// Set system clock to 120 MHz and perform other initialization tasks
void set_sysclk_to_120(void) {
 80006f8:	b088      	sub	sp, #32
	// Actual bit values for PLL fields
	uint32_t pllm = PLL_M-1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	9307      	str	r3, [sp, #28]
	uint32_t plln = PLL_N;
 80006fe:	2314      	movs	r3, #20
 8000700:	9306      	str	r3, [sp, #24]
	uint32_t pllr = PLL_R/2 - 1;
 8000702:	2303      	movs	r3, #3
 8000704:	9305      	str	r3, [sp, #20]
	volatile uint32_t * cr = &(RCC->CR);
 8000706:	4b5b      	ldr	r3, [pc, #364]	; (8000874 <set_sysclk_to_120+0x17c>)
 8000708:	9304      	str	r3, [sp, #16]
	volatile uint32_t * bdcr = &(RCC->BDCR);
 800070a:	4b5b      	ldr	r3, [pc, #364]	; (8000878 <set_sysclk_to_120+0x180>)
 800070c:	9303      	str	r3, [sp, #12]
	volatile uint32_t * pllcfgr = &(RCC->PLLCFGR);
 800070e:	4b5b      	ldr	r3, [pc, #364]	; (800087c <set_sysclk_to_120+0x184>)
 8000710:	9302      	str	r3, [sp, #8]
	volatile uint32_t * cfgr = &(RCC->CFGR);
 8000712:	4b5b      	ldr	r3, [pc, #364]	; (8000880 <set_sysclk_to_120+0x188>)
 8000714:	9301      	str	r3, [sp, #4]
	volatile uint32_t * pwrcr = &(PWR->CR1);
 8000716:	4b5b      	ldr	r3, [pc, #364]	; (8000884 <set_sysclk_to_120+0x18c>)
 8000718:	9300      	str	r3, [sp, #0]

	// Enable power interface clock
	RCC->APB1ENR1 |= 1U<<28;
 800071a:	4b56      	ldr	r3, [pc, #344]	; (8000874 <set_sysclk_to_120+0x17c>)
 800071c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071e:	4a55      	ldr	r2, [pc, #340]	; (8000874 <set_sysclk_to_120+0x17c>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	6593      	str	r3, [r2, #88]	; 0x58
	// Select power range 1
	PWR->CR1 |= 1<<9;
 8000726:	4b57      	ldr	r3, [pc, #348]	; (8000884 <set_sysclk_to_120+0x18c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a56      	ldr	r2, [pc, #344]	; (8000884 <set_sysclk_to_120+0x18c>)
 800072c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000730:	6013      	str	r3, [r2, #0]
	// R1MODE bit - boost mode
	PWR->CR5 &= ~(1<<8);
 8000732:	4b54      	ldr	r3, [pc, #336]	; (8000884 <set_sysclk_to_120+0x18c>)
 8000734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000738:	4a52      	ldr	r2, [pc, #328]	; (8000884 <set_sysclk_to_120+0x18c>)
 800073a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800073e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	// Disable BDCR write protection
	PWR->CR1 |= 1U<<8;
 8000742:	4b50      	ldr	r3, [pc, #320]	; (8000884 <set_sysclk_to_120+0x18c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a4f      	ldr	r2, [pc, #316]	; (8000884 <set_sysclk_to_120+0x18c>)
 8000748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074c:	6013      	str	r3, [r2, #0]
	// Unreset BDCR
	// RCC->BDCR &= ~(1U<<16);
	// Enable LSE (for MSI PLL)
	RCC->BDCR |= 1U<<0;
 800074e:	4b49      	ldr	r3, [pc, #292]	; (8000874 <set_sysclk_to_120+0x17c>)
 8000750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000754:	4a47      	ldr	r2, [pc, #284]	; (8000874 <set_sysclk_to_120+0x17c>)
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	// Wait for LSE to be ready
	while(!(RCC->BDCR &(1U<<1)));
 800075e:	bf00      	nop
 8000760:	4b44      	ldr	r3, [pc, #272]	; (8000874 <set_sysclk_to_120+0x17c>)
 8000762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	2b00      	cmp	r3, #0
 800076c:	d0f8      	beq.n	8000760 <set_sysclk_to_120+0x68>

	// Enable MSI
	RCC->CR |= 1U<<0;
 800076e:	4b41      	ldr	r3, [pc, #260]	; (8000874 <set_sysclk_to_120+0x17c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a40      	ldr	r2, [pc, #256]	; (8000874 <set_sysclk_to_120+0x17c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 800077a:	bf00      	nop
 800077c:	4b3d      	ldr	r3, [pc, #244]	; (8000874 <set_sysclk_to_120+0x17c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f003 0302 	and.w	r3, r3, #2
 8000784:	2b00      	cmp	r3, #0
 8000786:	d0f9      	beq.n	800077c <set_sysclk_to_120+0x84>
	// Set MSI clock to 48 Mhz
	RCC->CR |= 1U<<3; // Select CR register value
 8000788:	4b3a      	ldr	r3, [pc, #232]	; (8000874 <set_sysclk_to_120+0x17c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a39      	ldr	r2, [pc, #228]	; (8000874 <set_sysclk_to_120+0x17c>)
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	6013      	str	r3, [r2, #0]
	RCC->CR &= ~(0xFF << 4);
 8000794:	4b37      	ldr	r3, [pc, #220]	; (8000874 <set_sysclk_to_120+0x17c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a36      	ldr	r2, [pc, #216]	; (8000874 <set_sysclk_to_120+0x17c>)
 800079a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800079e:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 80007a0:	bf00      	nop
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <set_sysclk_to_120+0x17c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d0f9      	beq.n	80007a2 <set_sysclk_to_120+0xaa>
	RCC->CR |= 11 << 4;
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <set_sysclk_to_120+0x17c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a30      	ldr	r2, [pc, #192]	; (8000874 <set_sysclk_to_120+0x17c>)
 80007b4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80007b8:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 80007ba:	bf00      	nop
 80007bc:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <set_sysclk_to_120+0x17c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f003 0302 	and.w	r3, r3, #2
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d0f9      	beq.n	80007bc <set_sysclk_to_120+0xc4>
	// Enable MSI PLL
	RCC->CR |= 1U<<2;
 80007c8:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <set_sysclk_to_120+0x17c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a29      	ldr	r2, [pc, #164]	; (8000874 <set_sysclk_to_120+0x17c>)
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	6013      	str	r3, [r2, #0]

	// Set AHB Prescaler - 8
	RCC->CFGR |= (0<<4);
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <set_sysclk_to_120+0x17c>)
 80007d6:	4a27      	ldr	r2, [pc, #156]	; (8000874 <set_sysclk_to_120+0x17c>)
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	6093      	str	r3, [r2, #8]
	// Set APB1 low speed prescaler - 1
	RCC->CFGR |= (0<<8);
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <set_sysclk_to_120+0x17c>)
 80007de:	4a25      	ldr	r2, [pc, #148]	; (8000874 <set_sysclk_to_120+0x17c>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	6093      	str	r3, [r2, #8]
	// Set APB2 high speed prescaler - 1
	RCC->CFGR |= (0<<11);
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <set_sysclk_to_120+0x17c>)
 80007e6:	4a23      	ldr	r2, [pc, #140]	; (8000874 <set_sysclk_to_120+0x17c>)
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	6093      	str	r3, [r2, #8]

	// Disable PLL
	RCC->CR &= ~(1U<<24);
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <set_sysclk_to_120+0x17c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a20      	ldr	r2, [pc, #128]	; (8000874 <set_sysclk_to_120+0x17c>)
 80007f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80007f6:	6013      	str	r3, [r2, #0]
	// Wait for PLL to unlock
	while((RCC->CR & (1U<<25)));
 80007f8:	bf00      	nop
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <set_sysclk_to_120+0x17c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000802:	2b00      	cmp	r3, #0
 8000804:	d1f9      	bne.n	80007fa <set_sysclk_to_120+0x102>
	// Set PLL dividers, and source to MSI
	RCC->PLLCFGR = (pllm <<4) | (plln<<8) | (pllr<<25) | (1 << 0);
 8000806:	9b07      	ldr	r3, [sp, #28]
 8000808:	011a      	lsls	r2, r3, #4
 800080a:	9b06      	ldr	r3, [sp, #24]
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	431a      	orrs	r2, r3
 8000810:	9b05      	ldr	r3, [sp, #20]
 8000812:	065b      	lsls	r3, r3, #25
 8000814:	4313      	orrs	r3, r2
 8000816:	4a17      	ldr	r2, [pc, #92]	; (8000874 <set_sysclk_to_120+0x17c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	60d3      	str	r3, [r2, #12]
	// Enable main PLL
	RCC->CR |= 1U<<24;
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <set_sysclk_to_120+0x17c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a14      	ldr	r2, [pc, #80]	; (8000874 <set_sysclk_to_120+0x17c>)
 8000824:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000828:	6013      	str	r3, [r2, #0]
	// Set R EN bit
	RCC->PLLCFGR |= (1U << 24);
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <set_sysclk_to_120+0x17c>)
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	4a11      	ldr	r2, [pc, #68]	; (8000874 <set_sysclk_to_120+0x17c>)
 8000830:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000834:	60d3      	str	r3, [r2, #12]
	// Wait until PLL is ready
	while((RCC->CR & (1 << 25)));
 8000836:	bf00      	nop
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <set_sysclk_to_120+0x17c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1f9      	bne.n	8000838 <set_sysclk_to_120+0x140>

	// Flash: Prefetch enable, instruction cache enable, data cache enable, latency to 5 wait states (Depends on CPU clock, refer to table 12 in RM0432)
	FLASH->ACR = (1U << 8) | (1U << 9) | (1U << 10) | (5 << 0);
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <set_sysclk_to_120+0x190>)
 8000846:	f240 7205 	movw	r2, #1797	; 0x705
 800084a:	601a      	str	r2, [r3, #0]

	// Select main PLL as system clock source
	RCC->CFGR |= 3U<<0;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <set_sysclk_to_120+0x17c>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	4a08      	ldr	r2, [pc, #32]	; (8000874 <set_sysclk_to_120+0x17c>)
 8000852:	f043 0303 	orr.w	r3, r3, #3
 8000856:	6093      	str	r3, [r2, #8]
	// Wait until main PLL is set as clock
	while (!((RCC->CFGR % 8) == 3));
 8000858:	bf00      	nop
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <set_sysclk_to_120+0x17c>)
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	2b03      	cmp	r3, #3
 8000864:	d1f9      	bne.n	800085a <set_sysclk_to_120+0x162>

	// Update SystemCoreClock variable
	SystemCoreClock = 120000000;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <set_sysclk_to_120+0x194>)
 8000868:	4a09      	ldr	r2, [pc, #36]	; (8000890 <set_sysclk_to_120+0x198>)
 800086a:	601a      	str	r2, [r3, #0]
}
 800086c:	bf00      	nop
 800086e:	b008      	add	sp, #32
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000
 8000878:	40021090 	.word	0x40021090
 800087c:	4002100c 	.word	0x4002100c
 8000880:	40021008 	.word	0x40021008
 8000884:	40007000 	.word	0x40007000
 8000888:	40022000 	.word	0x40022000
 800088c:	20000000 	.word	0x20000000
 8000890:	07270e00 	.word	0x07270e00

08000894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000898:	f7ff ff08 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	; (80008d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <LoopForever+0xe>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	; (80008e0 <LoopForever+0x16>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c2:	f000 f811 	bl	80008e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008c6:	f7ff fd0b 	bl	80002e0 <main>

080008ca <LoopForever>:

LoopForever:
    b LoopForever
 80008ca:	e7fe      	b.n	80008ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008cc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008d8:	080012c0 	.word	0x080012c0
  ldr r2, =_sbss
 80008dc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008e0:	20000898 	.word	0x20000898

080008e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_IRQHandler>
	...

080008e8 <__libc_init_array>:
 80008e8:	b570      	push	{r4, r5, r6, lr}
 80008ea:	4d0d      	ldr	r5, [pc, #52]	; (8000920 <__libc_init_array+0x38>)
 80008ec:	4c0d      	ldr	r4, [pc, #52]	; (8000924 <__libc_init_array+0x3c>)
 80008ee:	1b64      	subs	r4, r4, r5
 80008f0:	10a4      	asrs	r4, r4, #2
 80008f2:	2600      	movs	r6, #0
 80008f4:	42a6      	cmp	r6, r4
 80008f6:	d109      	bne.n	800090c <__libc_init_array+0x24>
 80008f8:	4d0b      	ldr	r5, [pc, #44]	; (8000928 <__libc_init_array+0x40>)
 80008fa:	4c0c      	ldr	r4, [pc, #48]	; (800092c <__libc_init_array+0x44>)
 80008fc:	f000 fc94 	bl	8001228 <_init>
 8000900:	1b64      	subs	r4, r4, r5
 8000902:	10a4      	asrs	r4, r4, #2
 8000904:	2600      	movs	r6, #0
 8000906:	42a6      	cmp	r6, r4
 8000908:	d105      	bne.n	8000916 <__libc_init_array+0x2e>
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000910:	4798      	blx	r3
 8000912:	3601      	adds	r6, #1
 8000914:	e7ee      	b.n	80008f4 <__libc_init_array+0xc>
 8000916:	f855 3b04 	ldr.w	r3, [r5], #4
 800091a:	4798      	blx	r3
 800091c:	3601      	adds	r6, #1
 800091e:	e7f2      	b.n	8000906 <__libc_init_array+0x1e>
 8000920:	080012b0 	.word	0x080012b0
 8000924:	080012b0 	.word	0x080012b0
 8000928:	080012b0 	.word	0x080012b0
 800092c:	080012b4 	.word	0x080012b4

08000930 <memset>:
 8000930:	4402      	add	r2, r0
 8000932:	4603      	mov	r3, r0
 8000934:	4293      	cmp	r3, r2
 8000936:	d100      	bne.n	800093a <memset+0xa>
 8000938:	4770      	bx	lr
 800093a:	f803 1b01 	strb.w	r1, [r3], #1
 800093e:	e7f9      	b.n	8000934 <memset+0x4>

08000940 <siprintf>:
 8000940:	b40e      	push	{r1, r2, r3}
 8000942:	b500      	push	{lr}
 8000944:	b09c      	sub	sp, #112	; 0x70
 8000946:	ab1d      	add	r3, sp, #116	; 0x74
 8000948:	9002      	str	r0, [sp, #8]
 800094a:	9006      	str	r0, [sp, #24]
 800094c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <siprintf+0x38>)
 8000952:	9107      	str	r1, [sp, #28]
 8000954:	9104      	str	r1, [sp, #16]
 8000956:	4909      	ldr	r1, [pc, #36]	; (800097c <siprintf+0x3c>)
 8000958:	f853 2b04 	ldr.w	r2, [r3], #4
 800095c:	9105      	str	r1, [sp, #20]
 800095e:	6800      	ldr	r0, [r0, #0]
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	a902      	add	r1, sp, #8
 8000964:	f000 f868 	bl	8000a38 <_svfiprintf_r>
 8000968:	9b02      	ldr	r3, [sp, #8]
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	b01c      	add	sp, #112	; 0x70
 8000970:	f85d eb04 	ldr.w	lr, [sp], #4
 8000974:	b003      	add	sp, #12
 8000976:	4770      	bx	lr
 8000978:	20000004 	.word	0x20000004
 800097c:	ffff0208 	.word	0xffff0208

08000980 <__retarget_lock_acquire_recursive>:
 8000980:	4770      	bx	lr

08000982 <__retarget_lock_release_recursive>:
 8000982:	4770      	bx	lr

08000984 <__ssputs_r>:
 8000984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000988:	688e      	ldr	r6, [r1, #8]
 800098a:	461f      	mov	r7, r3
 800098c:	42be      	cmp	r6, r7
 800098e:	680b      	ldr	r3, [r1, #0]
 8000990:	4682      	mov	sl, r0
 8000992:	460c      	mov	r4, r1
 8000994:	4690      	mov	r8, r2
 8000996:	d82c      	bhi.n	80009f2 <__ssputs_r+0x6e>
 8000998:	898a      	ldrh	r2, [r1, #12]
 800099a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800099e:	d026      	beq.n	80009ee <__ssputs_r+0x6a>
 80009a0:	6965      	ldr	r5, [r4, #20]
 80009a2:	6909      	ldr	r1, [r1, #16]
 80009a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80009a8:	eba3 0901 	sub.w	r9, r3, r1
 80009ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80009b0:	1c7b      	adds	r3, r7, #1
 80009b2:	444b      	add	r3, r9
 80009b4:	106d      	asrs	r5, r5, #1
 80009b6:	429d      	cmp	r5, r3
 80009b8:	bf38      	it	cc
 80009ba:	461d      	movcc	r5, r3
 80009bc:	0553      	lsls	r3, r2, #21
 80009be:	d527      	bpl.n	8000a10 <__ssputs_r+0x8c>
 80009c0:	4629      	mov	r1, r5
 80009c2:	f000 fb5b 	bl	800107c <_malloc_r>
 80009c6:	4606      	mov	r6, r0
 80009c8:	b360      	cbz	r0, 8000a24 <__ssputs_r+0xa0>
 80009ca:	6921      	ldr	r1, [r4, #16]
 80009cc:	464a      	mov	r2, r9
 80009ce:	f000 fac1 	bl	8000f54 <memcpy>
 80009d2:	89a3      	ldrh	r3, [r4, #12]
 80009d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80009d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009dc:	81a3      	strh	r3, [r4, #12]
 80009de:	6126      	str	r6, [r4, #16]
 80009e0:	6165      	str	r5, [r4, #20]
 80009e2:	444e      	add	r6, r9
 80009e4:	eba5 0509 	sub.w	r5, r5, r9
 80009e8:	6026      	str	r6, [r4, #0]
 80009ea:	60a5      	str	r5, [r4, #8]
 80009ec:	463e      	mov	r6, r7
 80009ee:	42be      	cmp	r6, r7
 80009f0:	d900      	bls.n	80009f4 <__ssputs_r+0x70>
 80009f2:	463e      	mov	r6, r7
 80009f4:	6820      	ldr	r0, [r4, #0]
 80009f6:	4632      	mov	r2, r6
 80009f8:	4641      	mov	r1, r8
 80009fa:	f000 fab9 	bl	8000f70 <memmove>
 80009fe:	68a3      	ldr	r3, [r4, #8]
 8000a00:	1b9b      	subs	r3, r3, r6
 8000a02:	60a3      	str	r3, [r4, #8]
 8000a04:	6823      	ldr	r3, [r4, #0]
 8000a06:	4433      	add	r3, r6
 8000a08:	6023      	str	r3, [r4, #0]
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a10:	462a      	mov	r2, r5
 8000a12:	f000 fba7 	bl	8001164 <_realloc_r>
 8000a16:	4606      	mov	r6, r0
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	d1e0      	bne.n	80009de <__ssputs_r+0x5a>
 8000a1c:	6921      	ldr	r1, [r4, #16]
 8000a1e:	4650      	mov	r0, sl
 8000a20:	f000 fac0 	bl	8000fa4 <_free_r>
 8000a24:	230c      	movs	r3, #12
 8000a26:	f8ca 3000 	str.w	r3, [sl]
 8000a2a:	89a3      	ldrh	r3, [r4, #12]
 8000a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a30:	81a3      	strh	r3, [r4, #12]
 8000a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a36:	e7e9      	b.n	8000a0c <__ssputs_r+0x88>

08000a38 <_svfiprintf_r>:
 8000a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a3c:	4698      	mov	r8, r3
 8000a3e:	898b      	ldrh	r3, [r1, #12]
 8000a40:	061b      	lsls	r3, r3, #24
 8000a42:	b09d      	sub	sp, #116	; 0x74
 8000a44:	4607      	mov	r7, r0
 8000a46:	460d      	mov	r5, r1
 8000a48:	4614      	mov	r4, r2
 8000a4a:	d50e      	bpl.n	8000a6a <_svfiprintf_r+0x32>
 8000a4c:	690b      	ldr	r3, [r1, #16]
 8000a4e:	b963      	cbnz	r3, 8000a6a <_svfiprintf_r+0x32>
 8000a50:	2140      	movs	r1, #64	; 0x40
 8000a52:	f000 fb13 	bl	800107c <_malloc_r>
 8000a56:	6028      	str	r0, [r5, #0]
 8000a58:	6128      	str	r0, [r5, #16]
 8000a5a:	b920      	cbnz	r0, 8000a66 <_svfiprintf_r+0x2e>
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	e0d0      	b.n	8000c08 <_svfiprintf_r+0x1d0>
 8000a66:	2340      	movs	r3, #64	; 0x40
 8000a68:	616b      	str	r3, [r5, #20]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8000a6e:	2320      	movs	r3, #32
 8000a70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a74:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a78:	2330      	movs	r3, #48	; 0x30
 8000a7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000c20 <_svfiprintf_r+0x1e8>
 8000a7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a82:	f04f 0901 	mov.w	r9, #1
 8000a86:	4623      	mov	r3, r4
 8000a88:	469a      	mov	sl, r3
 8000a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a8e:	b10a      	cbz	r2, 8000a94 <_svfiprintf_r+0x5c>
 8000a90:	2a25      	cmp	r2, #37	; 0x25
 8000a92:	d1f9      	bne.n	8000a88 <_svfiprintf_r+0x50>
 8000a94:	ebba 0b04 	subs.w	fp, sl, r4
 8000a98:	d00b      	beq.n	8000ab2 <_svfiprintf_r+0x7a>
 8000a9a:	465b      	mov	r3, fp
 8000a9c:	4622      	mov	r2, r4
 8000a9e:	4629      	mov	r1, r5
 8000aa0:	4638      	mov	r0, r7
 8000aa2:	f7ff ff6f 	bl	8000984 <__ssputs_r>
 8000aa6:	3001      	adds	r0, #1
 8000aa8:	f000 80a9 	beq.w	8000bfe <_svfiprintf_r+0x1c6>
 8000aac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000aae:	445a      	add	r2, fp
 8000ab0:	9209      	str	r2, [sp, #36]	; 0x24
 8000ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 80a1 	beq.w	8000bfe <_svfiprintf_r+0x1c6>
 8000abc:	2300      	movs	r3, #0
 8000abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ac6:	f10a 0a01 	add.w	sl, sl, #1
 8000aca:	9304      	str	r3, [sp, #16]
 8000acc:	9307      	str	r3, [sp, #28]
 8000ace:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ad2:	931a      	str	r3, [sp, #104]	; 0x68
 8000ad4:	4654      	mov	r4, sl
 8000ad6:	2205      	movs	r2, #5
 8000ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000adc:	4850      	ldr	r0, [pc, #320]	; (8000c20 <_svfiprintf_r+0x1e8>)
 8000ade:	f7ff fb77 	bl	80001d0 <memchr>
 8000ae2:	9a04      	ldr	r2, [sp, #16]
 8000ae4:	b9d8      	cbnz	r0, 8000b1e <_svfiprintf_r+0xe6>
 8000ae6:	06d0      	lsls	r0, r2, #27
 8000ae8:	bf44      	itt	mi
 8000aea:	2320      	movmi	r3, #32
 8000aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000af0:	0711      	lsls	r1, r2, #28
 8000af2:	bf44      	itt	mi
 8000af4:	232b      	movmi	r3, #43	; 0x2b
 8000af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000afa:	f89a 3000 	ldrb.w	r3, [sl]
 8000afe:	2b2a      	cmp	r3, #42	; 0x2a
 8000b00:	d015      	beq.n	8000b2e <_svfiprintf_r+0xf6>
 8000b02:	9a07      	ldr	r2, [sp, #28]
 8000b04:	4654      	mov	r4, sl
 8000b06:	2000      	movs	r0, #0
 8000b08:	f04f 0c0a 	mov.w	ip, #10
 8000b0c:	4621      	mov	r1, r4
 8000b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b12:	3b30      	subs	r3, #48	; 0x30
 8000b14:	2b09      	cmp	r3, #9
 8000b16:	d94d      	bls.n	8000bb4 <_svfiprintf_r+0x17c>
 8000b18:	b1b0      	cbz	r0, 8000b48 <_svfiprintf_r+0x110>
 8000b1a:	9207      	str	r2, [sp, #28]
 8000b1c:	e014      	b.n	8000b48 <_svfiprintf_r+0x110>
 8000b1e:	eba0 0308 	sub.w	r3, r0, r8
 8000b22:	fa09 f303 	lsl.w	r3, r9, r3
 8000b26:	4313      	orrs	r3, r2
 8000b28:	9304      	str	r3, [sp, #16]
 8000b2a:	46a2      	mov	sl, r4
 8000b2c:	e7d2      	b.n	8000ad4 <_svfiprintf_r+0x9c>
 8000b2e:	9b03      	ldr	r3, [sp, #12]
 8000b30:	1d19      	adds	r1, r3, #4
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	9103      	str	r1, [sp, #12]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	bfbb      	ittet	lt
 8000b3a:	425b      	neglt	r3, r3
 8000b3c:	f042 0202 	orrlt.w	r2, r2, #2
 8000b40:	9307      	strge	r3, [sp, #28]
 8000b42:	9307      	strlt	r3, [sp, #28]
 8000b44:	bfb8      	it	lt
 8000b46:	9204      	strlt	r2, [sp, #16]
 8000b48:	7823      	ldrb	r3, [r4, #0]
 8000b4a:	2b2e      	cmp	r3, #46	; 0x2e
 8000b4c:	d10c      	bne.n	8000b68 <_svfiprintf_r+0x130>
 8000b4e:	7863      	ldrb	r3, [r4, #1]
 8000b50:	2b2a      	cmp	r3, #42	; 0x2a
 8000b52:	d134      	bne.n	8000bbe <_svfiprintf_r+0x186>
 8000b54:	9b03      	ldr	r3, [sp, #12]
 8000b56:	1d1a      	adds	r2, r3, #4
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	9203      	str	r2, [sp, #12]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	bfb8      	it	lt
 8000b60:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000b64:	3402      	adds	r4, #2
 8000b66:	9305      	str	r3, [sp, #20]
 8000b68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000c30 <_svfiprintf_r+0x1f8>
 8000b6c:	7821      	ldrb	r1, [r4, #0]
 8000b6e:	2203      	movs	r2, #3
 8000b70:	4650      	mov	r0, sl
 8000b72:	f7ff fb2d 	bl	80001d0 <memchr>
 8000b76:	b138      	cbz	r0, 8000b88 <_svfiprintf_r+0x150>
 8000b78:	9b04      	ldr	r3, [sp, #16]
 8000b7a:	eba0 000a 	sub.w	r0, r0, sl
 8000b7e:	2240      	movs	r2, #64	; 0x40
 8000b80:	4082      	lsls	r2, r0
 8000b82:	4313      	orrs	r3, r2
 8000b84:	3401      	adds	r4, #1
 8000b86:	9304      	str	r3, [sp, #16]
 8000b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b8c:	4825      	ldr	r0, [pc, #148]	; (8000c24 <_svfiprintf_r+0x1ec>)
 8000b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b92:	2206      	movs	r2, #6
 8000b94:	f7ff fb1c 	bl	80001d0 <memchr>
 8000b98:	2800      	cmp	r0, #0
 8000b9a:	d038      	beq.n	8000c0e <_svfiprintf_r+0x1d6>
 8000b9c:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <_svfiprintf_r+0x1f0>)
 8000b9e:	bb1b      	cbnz	r3, 8000be8 <_svfiprintf_r+0x1b0>
 8000ba0:	9b03      	ldr	r3, [sp, #12]
 8000ba2:	3307      	adds	r3, #7
 8000ba4:	f023 0307 	bic.w	r3, r3, #7
 8000ba8:	3308      	adds	r3, #8
 8000baa:	9303      	str	r3, [sp, #12]
 8000bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000bae:	4433      	add	r3, r6
 8000bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8000bb2:	e768      	b.n	8000a86 <_svfiprintf_r+0x4e>
 8000bb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8000bb8:	460c      	mov	r4, r1
 8000bba:	2001      	movs	r0, #1
 8000bbc:	e7a6      	b.n	8000b0c <_svfiprintf_r+0xd4>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	3401      	adds	r4, #1
 8000bc2:	9305      	str	r3, [sp, #20]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f04f 0c0a 	mov.w	ip, #10
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bd0:	3a30      	subs	r2, #48	; 0x30
 8000bd2:	2a09      	cmp	r2, #9
 8000bd4:	d903      	bls.n	8000bde <_svfiprintf_r+0x1a6>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d0c6      	beq.n	8000b68 <_svfiprintf_r+0x130>
 8000bda:	9105      	str	r1, [sp, #20]
 8000bdc:	e7c4      	b.n	8000b68 <_svfiprintf_r+0x130>
 8000bde:	fb0c 2101 	mla	r1, ip, r1, r2
 8000be2:	4604      	mov	r4, r0
 8000be4:	2301      	movs	r3, #1
 8000be6:	e7f0      	b.n	8000bca <_svfiprintf_r+0x192>
 8000be8:	ab03      	add	r3, sp, #12
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	462a      	mov	r2, r5
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <_svfiprintf_r+0x1f4>)
 8000bf0:	a904      	add	r1, sp, #16
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	f3af 8000 	nop.w
 8000bf8:	1c42      	adds	r2, r0, #1
 8000bfa:	4606      	mov	r6, r0
 8000bfc:	d1d6      	bne.n	8000bac <_svfiprintf_r+0x174>
 8000bfe:	89ab      	ldrh	r3, [r5, #12]
 8000c00:	065b      	lsls	r3, r3, #25
 8000c02:	f53f af2d 	bmi.w	8000a60 <_svfiprintf_r+0x28>
 8000c06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c08:	b01d      	add	sp, #116	; 0x74
 8000c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c0e:	ab03      	add	r3, sp, #12
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	462a      	mov	r2, r5
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <_svfiprintf_r+0x1f4>)
 8000c16:	a904      	add	r1, sp, #16
 8000c18:	4638      	mov	r0, r7
 8000c1a:	f000 f879 	bl	8000d10 <_printf_i>
 8000c1e:	e7eb      	b.n	8000bf8 <_svfiprintf_r+0x1c0>
 8000c20:	08001279 	.word	0x08001279
 8000c24:	08001283 	.word	0x08001283
 8000c28:	00000000 	.word	0x00000000
 8000c2c:	08000985 	.word	0x08000985
 8000c30:	0800127f 	.word	0x0800127f

08000c34 <_printf_common>:
 8000c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c38:	4616      	mov	r6, r2
 8000c3a:	4699      	mov	r9, r3
 8000c3c:	688a      	ldr	r2, [r1, #8]
 8000c3e:	690b      	ldr	r3, [r1, #16]
 8000c40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c44:	4293      	cmp	r3, r2
 8000c46:	bfb8      	it	lt
 8000c48:	4613      	movlt	r3, r2
 8000c4a:	6033      	str	r3, [r6, #0]
 8000c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c50:	4607      	mov	r7, r0
 8000c52:	460c      	mov	r4, r1
 8000c54:	b10a      	cbz	r2, 8000c5a <_printf_common+0x26>
 8000c56:	3301      	adds	r3, #1
 8000c58:	6033      	str	r3, [r6, #0]
 8000c5a:	6823      	ldr	r3, [r4, #0]
 8000c5c:	0699      	lsls	r1, r3, #26
 8000c5e:	bf42      	ittt	mi
 8000c60:	6833      	ldrmi	r3, [r6, #0]
 8000c62:	3302      	addmi	r3, #2
 8000c64:	6033      	strmi	r3, [r6, #0]
 8000c66:	6825      	ldr	r5, [r4, #0]
 8000c68:	f015 0506 	ands.w	r5, r5, #6
 8000c6c:	d106      	bne.n	8000c7c <_printf_common+0x48>
 8000c6e:	f104 0a19 	add.w	sl, r4, #25
 8000c72:	68e3      	ldr	r3, [r4, #12]
 8000c74:	6832      	ldr	r2, [r6, #0]
 8000c76:	1a9b      	subs	r3, r3, r2
 8000c78:	42ab      	cmp	r3, r5
 8000c7a:	dc26      	bgt.n	8000cca <_printf_common+0x96>
 8000c7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c80:	1e13      	subs	r3, r2, #0
 8000c82:	6822      	ldr	r2, [r4, #0]
 8000c84:	bf18      	it	ne
 8000c86:	2301      	movne	r3, #1
 8000c88:	0692      	lsls	r2, r2, #26
 8000c8a:	d42b      	bmi.n	8000ce4 <_printf_common+0xb0>
 8000c8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c90:	4649      	mov	r1, r9
 8000c92:	4638      	mov	r0, r7
 8000c94:	47c0      	blx	r8
 8000c96:	3001      	adds	r0, #1
 8000c98:	d01e      	beq.n	8000cd8 <_printf_common+0xa4>
 8000c9a:	6823      	ldr	r3, [r4, #0]
 8000c9c:	6922      	ldr	r2, [r4, #16]
 8000c9e:	f003 0306 	and.w	r3, r3, #6
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf02      	ittt	eq
 8000ca6:	68e5      	ldreq	r5, [r4, #12]
 8000ca8:	6833      	ldreq	r3, [r6, #0]
 8000caa:	1aed      	subeq	r5, r5, r3
 8000cac:	68a3      	ldr	r3, [r4, #8]
 8000cae:	bf0c      	ite	eq
 8000cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000cb4:	2500      	movne	r5, #0
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	bfc4      	itt	gt
 8000cba:	1a9b      	subgt	r3, r3, r2
 8000cbc:	18ed      	addgt	r5, r5, r3
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	341a      	adds	r4, #26
 8000cc2:	42b5      	cmp	r5, r6
 8000cc4:	d11a      	bne.n	8000cfc <_printf_common+0xc8>
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	e008      	b.n	8000cdc <_printf_common+0xa8>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	4652      	mov	r2, sl
 8000cce:	4649      	mov	r1, r9
 8000cd0:	4638      	mov	r0, r7
 8000cd2:	47c0      	blx	r8
 8000cd4:	3001      	adds	r0, #1
 8000cd6:	d103      	bne.n	8000ce0 <_printf_common+0xac>
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce0:	3501      	adds	r5, #1
 8000ce2:	e7c6      	b.n	8000c72 <_printf_common+0x3e>
 8000ce4:	18e1      	adds	r1, r4, r3
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	2030      	movs	r0, #48	; 0x30
 8000cea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000cee:	4422      	add	r2, r4
 8000cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000cf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	e7c7      	b.n	8000c8c <_printf_common+0x58>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	4622      	mov	r2, r4
 8000d00:	4649      	mov	r1, r9
 8000d02:	4638      	mov	r0, r7
 8000d04:	47c0      	blx	r8
 8000d06:	3001      	adds	r0, #1
 8000d08:	d0e6      	beq.n	8000cd8 <_printf_common+0xa4>
 8000d0a:	3601      	adds	r6, #1
 8000d0c:	e7d9      	b.n	8000cc2 <_printf_common+0x8e>
	...

08000d10 <_printf_i>:
 8000d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d14:	7e0f      	ldrb	r7, [r1, #24]
 8000d16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d18:	2f78      	cmp	r7, #120	; 0x78
 8000d1a:	4691      	mov	r9, r2
 8000d1c:	4680      	mov	r8, r0
 8000d1e:	460c      	mov	r4, r1
 8000d20:	469a      	mov	sl, r3
 8000d22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000d26:	d807      	bhi.n	8000d38 <_printf_i+0x28>
 8000d28:	2f62      	cmp	r7, #98	; 0x62
 8000d2a:	d80a      	bhi.n	8000d42 <_printf_i+0x32>
 8000d2c:	2f00      	cmp	r7, #0
 8000d2e:	f000 80d4 	beq.w	8000eda <_printf_i+0x1ca>
 8000d32:	2f58      	cmp	r7, #88	; 0x58
 8000d34:	f000 80c0 	beq.w	8000eb8 <_printf_i+0x1a8>
 8000d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d40:	e03a      	b.n	8000db8 <_printf_i+0xa8>
 8000d42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d46:	2b15      	cmp	r3, #21
 8000d48:	d8f6      	bhi.n	8000d38 <_printf_i+0x28>
 8000d4a:	a101      	add	r1, pc, #4	; (adr r1, 8000d50 <_printf_i+0x40>)
 8000d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d50:	08000da9 	.word	0x08000da9
 8000d54:	08000dbd 	.word	0x08000dbd
 8000d58:	08000d39 	.word	0x08000d39
 8000d5c:	08000d39 	.word	0x08000d39
 8000d60:	08000d39 	.word	0x08000d39
 8000d64:	08000d39 	.word	0x08000d39
 8000d68:	08000dbd 	.word	0x08000dbd
 8000d6c:	08000d39 	.word	0x08000d39
 8000d70:	08000d39 	.word	0x08000d39
 8000d74:	08000d39 	.word	0x08000d39
 8000d78:	08000d39 	.word	0x08000d39
 8000d7c:	08000ec1 	.word	0x08000ec1
 8000d80:	08000de9 	.word	0x08000de9
 8000d84:	08000e7b 	.word	0x08000e7b
 8000d88:	08000d39 	.word	0x08000d39
 8000d8c:	08000d39 	.word	0x08000d39
 8000d90:	08000ee3 	.word	0x08000ee3
 8000d94:	08000d39 	.word	0x08000d39
 8000d98:	08000de9 	.word	0x08000de9
 8000d9c:	08000d39 	.word	0x08000d39
 8000da0:	08000d39 	.word	0x08000d39
 8000da4:	08000e83 	.word	0x08000e83
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	1d1a      	adds	r2, r3, #4
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	602a      	str	r2, [r5, #0]
 8000db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000db4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000db8:	2301      	movs	r3, #1
 8000dba:	e09f      	b.n	8000efc <_printf_i+0x1ec>
 8000dbc:	6820      	ldr	r0, [r4, #0]
 8000dbe:	682b      	ldr	r3, [r5, #0]
 8000dc0:	0607      	lsls	r7, r0, #24
 8000dc2:	f103 0104 	add.w	r1, r3, #4
 8000dc6:	6029      	str	r1, [r5, #0]
 8000dc8:	d501      	bpl.n	8000dce <_printf_i+0xbe>
 8000dca:	681e      	ldr	r6, [r3, #0]
 8000dcc:	e003      	b.n	8000dd6 <_printf_i+0xc6>
 8000dce:	0646      	lsls	r6, r0, #25
 8000dd0:	d5fb      	bpl.n	8000dca <_printf_i+0xba>
 8000dd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000dd6:	2e00      	cmp	r6, #0
 8000dd8:	da03      	bge.n	8000de2 <_printf_i+0xd2>
 8000dda:	232d      	movs	r3, #45	; 0x2d
 8000ddc:	4276      	negs	r6, r6
 8000dde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000de2:	485a      	ldr	r0, [pc, #360]	; (8000f4c <_printf_i+0x23c>)
 8000de4:	230a      	movs	r3, #10
 8000de6:	e012      	b.n	8000e0e <_printf_i+0xfe>
 8000de8:	682b      	ldr	r3, [r5, #0]
 8000dea:	6820      	ldr	r0, [r4, #0]
 8000dec:	1d19      	adds	r1, r3, #4
 8000dee:	6029      	str	r1, [r5, #0]
 8000df0:	0605      	lsls	r5, r0, #24
 8000df2:	d501      	bpl.n	8000df8 <_printf_i+0xe8>
 8000df4:	681e      	ldr	r6, [r3, #0]
 8000df6:	e002      	b.n	8000dfe <_printf_i+0xee>
 8000df8:	0641      	lsls	r1, r0, #25
 8000dfa:	d5fb      	bpl.n	8000df4 <_printf_i+0xe4>
 8000dfc:	881e      	ldrh	r6, [r3, #0]
 8000dfe:	4853      	ldr	r0, [pc, #332]	; (8000f4c <_printf_i+0x23c>)
 8000e00:	2f6f      	cmp	r7, #111	; 0x6f
 8000e02:	bf0c      	ite	eq
 8000e04:	2308      	moveq	r3, #8
 8000e06:	230a      	movne	r3, #10
 8000e08:	2100      	movs	r1, #0
 8000e0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e0e:	6865      	ldr	r5, [r4, #4]
 8000e10:	60a5      	str	r5, [r4, #8]
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	bfa2      	ittt	ge
 8000e16:	6821      	ldrge	r1, [r4, #0]
 8000e18:	f021 0104 	bicge.w	r1, r1, #4
 8000e1c:	6021      	strge	r1, [r4, #0]
 8000e1e:	b90e      	cbnz	r6, 8000e24 <_printf_i+0x114>
 8000e20:	2d00      	cmp	r5, #0
 8000e22:	d04b      	beq.n	8000ebc <_printf_i+0x1ac>
 8000e24:	4615      	mov	r5, r2
 8000e26:	fbb6 f1f3 	udiv	r1, r6, r3
 8000e2a:	fb03 6711 	mls	r7, r3, r1, r6
 8000e2e:	5dc7      	ldrb	r7, [r0, r7]
 8000e30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000e34:	4637      	mov	r7, r6
 8000e36:	42bb      	cmp	r3, r7
 8000e38:	460e      	mov	r6, r1
 8000e3a:	d9f4      	bls.n	8000e26 <_printf_i+0x116>
 8000e3c:	2b08      	cmp	r3, #8
 8000e3e:	d10b      	bne.n	8000e58 <_printf_i+0x148>
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	07de      	lsls	r6, r3, #31
 8000e44:	d508      	bpl.n	8000e58 <_printf_i+0x148>
 8000e46:	6923      	ldr	r3, [r4, #16]
 8000e48:	6861      	ldr	r1, [r4, #4]
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	bfde      	ittt	le
 8000e4e:	2330      	movle	r3, #48	; 0x30
 8000e50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000e54:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000e58:	1b52      	subs	r2, r2, r5
 8000e5a:	6122      	str	r2, [r4, #16]
 8000e5c:	f8cd a000 	str.w	sl, [sp]
 8000e60:	464b      	mov	r3, r9
 8000e62:	aa03      	add	r2, sp, #12
 8000e64:	4621      	mov	r1, r4
 8000e66:	4640      	mov	r0, r8
 8000e68:	f7ff fee4 	bl	8000c34 <_printf_common>
 8000e6c:	3001      	adds	r0, #1
 8000e6e:	d14a      	bne.n	8000f06 <_printf_i+0x1f6>
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e74:	b004      	add	sp, #16
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	6823      	ldr	r3, [r4, #0]
 8000e7c:	f043 0320 	orr.w	r3, r3, #32
 8000e80:	6023      	str	r3, [r4, #0]
 8000e82:	4833      	ldr	r0, [pc, #204]	; (8000f50 <_printf_i+0x240>)
 8000e84:	2778      	movs	r7, #120	; 0x78
 8000e86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	6829      	ldr	r1, [r5, #0]
 8000e8e:	061f      	lsls	r7, r3, #24
 8000e90:	f851 6b04 	ldr.w	r6, [r1], #4
 8000e94:	d402      	bmi.n	8000e9c <_printf_i+0x18c>
 8000e96:	065f      	lsls	r7, r3, #25
 8000e98:	bf48      	it	mi
 8000e9a:	b2b6      	uxthmi	r6, r6
 8000e9c:	07df      	lsls	r7, r3, #31
 8000e9e:	bf48      	it	mi
 8000ea0:	f043 0320 	orrmi.w	r3, r3, #32
 8000ea4:	6029      	str	r1, [r5, #0]
 8000ea6:	bf48      	it	mi
 8000ea8:	6023      	strmi	r3, [r4, #0]
 8000eaa:	b91e      	cbnz	r6, 8000eb4 <_printf_i+0x1a4>
 8000eac:	6823      	ldr	r3, [r4, #0]
 8000eae:	f023 0320 	bic.w	r3, r3, #32
 8000eb2:	6023      	str	r3, [r4, #0]
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	e7a7      	b.n	8000e08 <_printf_i+0xf8>
 8000eb8:	4824      	ldr	r0, [pc, #144]	; (8000f4c <_printf_i+0x23c>)
 8000eba:	e7e4      	b.n	8000e86 <_printf_i+0x176>
 8000ebc:	4615      	mov	r5, r2
 8000ebe:	e7bd      	b.n	8000e3c <_printf_i+0x12c>
 8000ec0:	682b      	ldr	r3, [r5, #0]
 8000ec2:	6826      	ldr	r6, [r4, #0]
 8000ec4:	6961      	ldr	r1, [r4, #20]
 8000ec6:	1d18      	adds	r0, r3, #4
 8000ec8:	6028      	str	r0, [r5, #0]
 8000eca:	0635      	lsls	r5, r6, #24
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	d501      	bpl.n	8000ed4 <_printf_i+0x1c4>
 8000ed0:	6019      	str	r1, [r3, #0]
 8000ed2:	e002      	b.n	8000eda <_printf_i+0x1ca>
 8000ed4:	0670      	lsls	r0, r6, #25
 8000ed6:	d5fb      	bpl.n	8000ed0 <_printf_i+0x1c0>
 8000ed8:	8019      	strh	r1, [r3, #0]
 8000eda:	2300      	movs	r3, #0
 8000edc:	6123      	str	r3, [r4, #16]
 8000ede:	4615      	mov	r5, r2
 8000ee0:	e7bc      	b.n	8000e5c <_printf_i+0x14c>
 8000ee2:	682b      	ldr	r3, [r5, #0]
 8000ee4:	1d1a      	adds	r2, r3, #4
 8000ee6:	602a      	str	r2, [r5, #0]
 8000ee8:	681d      	ldr	r5, [r3, #0]
 8000eea:	6862      	ldr	r2, [r4, #4]
 8000eec:	2100      	movs	r1, #0
 8000eee:	4628      	mov	r0, r5
 8000ef0:	f7ff f96e 	bl	80001d0 <memchr>
 8000ef4:	b108      	cbz	r0, 8000efa <_printf_i+0x1ea>
 8000ef6:	1b40      	subs	r0, r0, r5
 8000ef8:	6060      	str	r0, [r4, #4]
 8000efa:	6863      	ldr	r3, [r4, #4]
 8000efc:	6123      	str	r3, [r4, #16]
 8000efe:	2300      	movs	r3, #0
 8000f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f04:	e7aa      	b.n	8000e5c <_printf_i+0x14c>
 8000f06:	6923      	ldr	r3, [r4, #16]
 8000f08:	462a      	mov	r2, r5
 8000f0a:	4649      	mov	r1, r9
 8000f0c:	4640      	mov	r0, r8
 8000f0e:	47d0      	blx	sl
 8000f10:	3001      	adds	r0, #1
 8000f12:	d0ad      	beq.n	8000e70 <_printf_i+0x160>
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	079b      	lsls	r3, r3, #30
 8000f18:	d413      	bmi.n	8000f42 <_printf_i+0x232>
 8000f1a:	68e0      	ldr	r0, [r4, #12]
 8000f1c:	9b03      	ldr	r3, [sp, #12]
 8000f1e:	4298      	cmp	r0, r3
 8000f20:	bfb8      	it	lt
 8000f22:	4618      	movlt	r0, r3
 8000f24:	e7a6      	b.n	8000e74 <_printf_i+0x164>
 8000f26:	2301      	movs	r3, #1
 8000f28:	4632      	mov	r2, r6
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	4640      	mov	r0, r8
 8000f2e:	47d0      	blx	sl
 8000f30:	3001      	adds	r0, #1
 8000f32:	d09d      	beq.n	8000e70 <_printf_i+0x160>
 8000f34:	3501      	adds	r5, #1
 8000f36:	68e3      	ldr	r3, [r4, #12]
 8000f38:	9903      	ldr	r1, [sp, #12]
 8000f3a:	1a5b      	subs	r3, r3, r1
 8000f3c:	42ab      	cmp	r3, r5
 8000f3e:	dcf2      	bgt.n	8000f26 <_printf_i+0x216>
 8000f40:	e7eb      	b.n	8000f1a <_printf_i+0x20a>
 8000f42:	2500      	movs	r5, #0
 8000f44:	f104 0619 	add.w	r6, r4, #25
 8000f48:	e7f5      	b.n	8000f36 <_printf_i+0x226>
 8000f4a:	bf00      	nop
 8000f4c:	0800128a 	.word	0x0800128a
 8000f50:	0800129b 	.word	0x0800129b

08000f54 <memcpy>:
 8000f54:	440a      	add	r2, r1
 8000f56:	4291      	cmp	r1, r2
 8000f58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f5c:	d100      	bne.n	8000f60 <memcpy+0xc>
 8000f5e:	4770      	bx	lr
 8000f60:	b510      	push	{r4, lr}
 8000f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f6a:	4291      	cmp	r1, r2
 8000f6c:	d1f9      	bne.n	8000f62 <memcpy+0xe>
 8000f6e:	bd10      	pop	{r4, pc}

08000f70 <memmove>:
 8000f70:	4288      	cmp	r0, r1
 8000f72:	b510      	push	{r4, lr}
 8000f74:	eb01 0402 	add.w	r4, r1, r2
 8000f78:	d902      	bls.n	8000f80 <memmove+0x10>
 8000f7a:	4284      	cmp	r4, r0
 8000f7c:	4623      	mov	r3, r4
 8000f7e:	d807      	bhi.n	8000f90 <memmove+0x20>
 8000f80:	1e43      	subs	r3, r0, #1
 8000f82:	42a1      	cmp	r1, r4
 8000f84:	d008      	beq.n	8000f98 <memmove+0x28>
 8000f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f8e:	e7f8      	b.n	8000f82 <memmove+0x12>
 8000f90:	4402      	add	r2, r0
 8000f92:	4601      	mov	r1, r0
 8000f94:	428a      	cmp	r2, r1
 8000f96:	d100      	bne.n	8000f9a <memmove+0x2a>
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000f9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000fa2:	e7f7      	b.n	8000f94 <memmove+0x24>

08000fa4 <_free_r>:
 8000fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000fa6:	2900      	cmp	r1, #0
 8000fa8:	d044      	beq.n	8001034 <_free_r+0x90>
 8000faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fae:	9001      	str	r0, [sp, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8000fb6:	bfb8      	it	lt
 8000fb8:	18e4      	addlt	r4, r4, r3
 8000fba:	f000 f913 	bl	80011e4 <__malloc_lock>
 8000fbe:	4a1e      	ldr	r2, [pc, #120]	; (8001038 <_free_r+0x94>)
 8000fc0:	9801      	ldr	r0, [sp, #4]
 8000fc2:	6813      	ldr	r3, [r2, #0]
 8000fc4:	b933      	cbnz	r3, 8000fd4 <_free_r+0x30>
 8000fc6:	6063      	str	r3, [r4, #4]
 8000fc8:	6014      	str	r4, [r2, #0]
 8000fca:	b003      	add	sp, #12
 8000fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000fd0:	f000 b90e 	b.w	80011f0 <__malloc_unlock>
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <_free_r+0x46>
 8000fd8:	6825      	ldr	r5, [r4, #0]
 8000fda:	1961      	adds	r1, r4, r5
 8000fdc:	428b      	cmp	r3, r1
 8000fde:	bf01      	itttt	eq
 8000fe0:	6819      	ldreq	r1, [r3, #0]
 8000fe2:	685b      	ldreq	r3, [r3, #4]
 8000fe4:	1949      	addeq	r1, r1, r5
 8000fe6:	6021      	streq	r1, [r4, #0]
 8000fe8:	e7ed      	b.n	8000fc6 <_free_r+0x22>
 8000fea:	461a      	mov	r2, r3
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	b10b      	cbz	r3, 8000ff4 <_free_r+0x50>
 8000ff0:	42a3      	cmp	r3, r4
 8000ff2:	d9fa      	bls.n	8000fea <_free_r+0x46>
 8000ff4:	6811      	ldr	r1, [r2, #0]
 8000ff6:	1855      	adds	r5, r2, r1
 8000ff8:	42a5      	cmp	r5, r4
 8000ffa:	d10b      	bne.n	8001014 <_free_r+0x70>
 8000ffc:	6824      	ldr	r4, [r4, #0]
 8000ffe:	4421      	add	r1, r4
 8001000:	1854      	adds	r4, r2, r1
 8001002:	42a3      	cmp	r3, r4
 8001004:	6011      	str	r1, [r2, #0]
 8001006:	d1e0      	bne.n	8000fca <_free_r+0x26>
 8001008:	681c      	ldr	r4, [r3, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	6053      	str	r3, [r2, #4]
 800100e:	440c      	add	r4, r1
 8001010:	6014      	str	r4, [r2, #0]
 8001012:	e7da      	b.n	8000fca <_free_r+0x26>
 8001014:	d902      	bls.n	800101c <_free_r+0x78>
 8001016:	230c      	movs	r3, #12
 8001018:	6003      	str	r3, [r0, #0]
 800101a:	e7d6      	b.n	8000fca <_free_r+0x26>
 800101c:	6825      	ldr	r5, [r4, #0]
 800101e:	1961      	adds	r1, r4, r5
 8001020:	428b      	cmp	r3, r1
 8001022:	bf04      	itt	eq
 8001024:	6819      	ldreq	r1, [r3, #0]
 8001026:	685b      	ldreq	r3, [r3, #4]
 8001028:	6063      	str	r3, [r4, #4]
 800102a:	bf04      	itt	eq
 800102c:	1949      	addeq	r1, r1, r5
 800102e:	6021      	streq	r1, [r4, #0]
 8001030:	6054      	str	r4, [r2, #4]
 8001032:	e7ca      	b.n	8000fca <_free_r+0x26>
 8001034:	b003      	add	sp, #12
 8001036:	bd30      	pop	{r4, r5, pc}
 8001038:	20000888 	.word	0x20000888

0800103c <sbrk_aligned>:
 800103c:	b570      	push	{r4, r5, r6, lr}
 800103e:	4e0e      	ldr	r6, [pc, #56]	; (8001078 <sbrk_aligned+0x3c>)
 8001040:	460c      	mov	r4, r1
 8001042:	6831      	ldr	r1, [r6, #0]
 8001044:	4605      	mov	r5, r0
 8001046:	b911      	cbnz	r1, 800104e <sbrk_aligned+0x12>
 8001048:	f000 f8bc 	bl	80011c4 <_sbrk_r>
 800104c:	6030      	str	r0, [r6, #0]
 800104e:	4621      	mov	r1, r4
 8001050:	4628      	mov	r0, r5
 8001052:	f000 f8b7 	bl	80011c4 <_sbrk_r>
 8001056:	1c43      	adds	r3, r0, #1
 8001058:	d00a      	beq.n	8001070 <sbrk_aligned+0x34>
 800105a:	1cc4      	adds	r4, r0, #3
 800105c:	f024 0403 	bic.w	r4, r4, #3
 8001060:	42a0      	cmp	r0, r4
 8001062:	d007      	beq.n	8001074 <sbrk_aligned+0x38>
 8001064:	1a21      	subs	r1, r4, r0
 8001066:	4628      	mov	r0, r5
 8001068:	f000 f8ac 	bl	80011c4 <_sbrk_r>
 800106c:	3001      	adds	r0, #1
 800106e:	d101      	bne.n	8001074 <sbrk_aligned+0x38>
 8001070:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001074:	4620      	mov	r0, r4
 8001076:	bd70      	pop	{r4, r5, r6, pc}
 8001078:	2000088c 	.word	0x2000088c

0800107c <_malloc_r>:
 800107c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001080:	1ccd      	adds	r5, r1, #3
 8001082:	f025 0503 	bic.w	r5, r5, #3
 8001086:	3508      	adds	r5, #8
 8001088:	2d0c      	cmp	r5, #12
 800108a:	bf38      	it	cc
 800108c:	250c      	movcc	r5, #12
 800108e:	2d00      	cmp	r5, #0
 8001090:	4607      	mov	r7, r0
 8001092:	db01      	blt.n	8001098 <_malloc_r+0x1c>
 8001094:	42a9      	cmp	r1, r5
 8001096:	d905      	bls.n	80010a4 <_malloc_r+0x28>
 8001098:	230c      	movs	r3, #12
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	2600      	movs	r6, #0
 800109e:	4630      	mov	r0, r6
 80010a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010a4:	4e2e      	ldr	r6, [pc, #184]	; (8001160 <_malloc_r+0xe4>)
 80010a6:	f000 f89d 	bl	80011e4 <__malloc_lock>
 80010aa:	6833      	ldr	r3, [r6, #0]
 80010ac:	461c      	mov	r4, r3
 80010ae:	bb34      	cbnz	r4, 80010fe <_malloc_r+0x82>
 80010b0:	4629      	mov	r1, r5
 80010b2:	4638      	mov	r0, r7
 80010b4:	f7ff ffc2 	bl	800103c <sbrk_aligned>
 80010b8:	1c43      	adds	r3, r0, #1
 80010ba:	4604      	mov	r4, r0
 80010bc:	d14d      	bne.n	800115a <_malloc_r+0xde>
 80010be:	6834      	ldr	r4, [r6, #0]
 80010c0:	4626      	mov	r6, r4
 80010c2:	2e00      	cmp	r6, #0
 80010c4:	d140      	bne.n	8001148 <_malloc_r+0xcc>
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	4631      	mov	r1, r6
 80010ca:	4638      	mov	r0, r7
 80010cc:	eb04 0803 	add.w	r8, r4, r3
 80010d0:	f000 f878 	bl	80011c4 <_sbrk_r>
 80010d4:	4580      	cmp	r8, r0
 80010d6:	d13a      	bne.n	800114e <_malloc_r+0xd2>
 80010d8:	6823      	ldr	r3, [r4, #0]
 80010da:	3503      	adds	r5, #3
 80010dc:	1aed      	subs	r5, r5, r3
 80010de:	f025 0503 	bic.w	r5, r5, #3
 80010e2:	3508      	adds	r5, #8
 80010e4:	2d0c      	cmp	r5, #12
 80010e6:	bf38      	it	cc
 80010e8:	250c      	movcc	r5, #12
 80010ea:	4629      	mov	r1, r5
 80010ec:	4638      	mov	r0, r7
 80010ee:	f7ff ffa5 	bl	800103c <sbrk_aligned>
 80010f2:	3001      	adds	r0, #1
 80010f4:	d02b      	beq.n	800114e <_malloc_r+0xd2>
 80010f6:	6823      	ldr	r3, [r4, #0]
 80010f8:	442b      	add	r3, r5
 80010fa:	6023      	str	r3, [r4, #0]
 80010fc:	e00e      	b.n	800111c <_malloc_r+0xa0>
 80010fe:	6822      	ldr	r2, [r4, #0]
 8001100:	1b52      	subs	r2, r2, r5
 8001102:	d41e      	bmi.n	8001142 <_malloc_r+0xc6>
 8001104:	2a0b      	cmp	r2, #11
 8001106:	d916      	bls.n	8001136 <_malloc_r+0xba>
 8001108:	1961      	adds	r1, r4, r5
 800110a:	42a3      	cmp	r3, r4
 800110c:	6025      	str	r5, [r4, #0]
 800110e:	bf18      	it	ne
 8001110:	6059      	strne	r1, [r3, #4]
 8001112:	6863      	ldr	r3, [r4, #4]
 8001114:	bf08      	it	eq
 8001116:	6031      	streq	r1, [r6, #0]
 8001118:	5162      	str	r2, [r4, r5]
 800111a:	604b      	str	r3, [r1, #4]
 800111c:	4638      	mov	r0, r7
 800111e:	f104 060b 	add.w	r6, r4, #11
 8001122:	f000 f865 	bl	80011f0 <__malloc_unlock>
 8001126:	f026 0607 	bic.w	r6, r6, #7
 800112a:	1d23      	adds	r3, r4, #4
 800112c:	1af2      	subs	r2, r6, r3
 800112e:	d0b6      	beq.n	800109e <_malloc_r+0x22>
 8001130:	1b9b      	subs	r3, r3, r6
 8001132:	50a3      	str	r3, [r4, r2]
 8001134:	e7b3      	b.n	800109e <_malloc_r+0x22>
 8001136:	6862      	ldr	r2, [r4, #4]
 8001138:	42a3      	cmp	r3, r4
 800113a:	bf0c      	ite	eq
 800113c:	6032      	streq	r2, [r6, #0]
 800113e:	605a      	strne	r2, [r3, #4]
 8001140:	e7ec      	b.n	800111c <_malloc_r+0xa0>
 8001142:	4623      	mov	r3, r4
 8001144:	6864      	ldr	r4, [r4, #4]
 8001146:	e7b2      	b.n	80010ae <_malloc_r+0x32>
 8001148:	4634      	mov	r4, r6
 800114a:	6876      	ldr	r6, [r6, #4]
 800114c:	e7b9      	b.n	80010c2 <_malloc_r+0x46>
 800114e:	230c      	movs	r3, #12
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4638      	mov	r0, r7
 8001154:	f000 f84c 	bl	80011f0 <__malloc_unlock>
 8001158:	e7a1      	b.n	800109e <_malloc_r+0x22>
 800115a:	6025      	str	r5, [r4, #0]
 800115c:	e7de      	b.n	800111c <_malloc_r+0xa0>
 800115e:	bf00      	nop
 8001160:	20000888 	.word	0x20000888

08001164 <_realloc_r>:
 8001164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001168:	4680      	mov	r8, r0
 800116a:	4614      	mov	r4, r2
 800116c:	460e      	mov	r6, r1
 800116e:	b921      	cbnz	r1, 800117a <_realloc_r+0x16>
 8001170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001174:	4611      	mov	r1, r2
 8001176:	f7ff bf81 	b.w	800107c <_malloc_r>
 800117a:	b92a      	cbnz	r2, 8001188 <_realloc_r+0x24>
 800117c:	f7ff ff12 	bl	8000fa4 <_free_r>
 8001180:	4625      	mov	r5, r4
 8001182:	4628      	mov	r0, r5
 8001184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001188:	f000 f838 	bl	80011fc <_malloc_usable_size_r>
 800118c:	4284      	cmp	r4, r0
 800118e:	4607      	mov	r7, r0
 8001190:	d802      	bhi.n	8001198 <_realloc_r+0x34>
 8001192:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001196:	d812      	bhi.n	80011be <_realloc_r+0x5a>
 8001198:	4621      	mov	r1, r4
 800119a:	4640      	mov	r0, r8
 800119c:	f7ff ff6e 	bl	800107c <_malloc_r>
 80011a0:	4605      	mov	r5, r0
 80011a2:	2800      	cmp	r0, #0
 80011a4:	d0ed      	beq.n	8001182 <_realloc_r+0x1e>
 80011a6:	42bc      	cmp	r4, r7
 80011a8:	4622      	mov	r2, r4
 80011aa:	4631      	mov	r1, r6
 80011ac:	bf28      	it	cs
 80011ae:	463a      	movcs	r2, r7
 80011b0:	f7ff fed0 	bl	8000f54 <memcpy>
 80011b4:	4631      	mov	r1, r6
 80011b6:	4640      	mov	r0, r8
 80011b8:	f7ff fef4 	bl	8000fa4 <_free_r>
 80011bc:	e7e1      	b.n	8001182 <_realloc_r+0x1e>
 80011be:	4635      	mov	r5, r6
 80011c0:	e7df      	b.n	8001182 <_realloc_r+0x1e>
	...

080011c4 <_sbrk_r>:
 80011c4:	b538      	push	{r3, r4, r5, lr}
 80011c6:	4d06      	ldr	r5, [pc, #24]	; (80011e0 <_sbrk_r+0x1c>)
 80011c8:	2300      	movs	r3, #0
 80011ca:	4604      	mov	r4, r0
 80011cc:	4608      	mov	r0, r1
 80011ce:	602b      	str	r3, [r5, #0]
 80011d0:	f000 f81c 	bl	800120c <_sbrk>
 80011d4:	1c43      	adds	r3, r0, #1
 80011d6:	d102      	bne.n	80011de <_sbrk_r+0x1a>
 80011d8:	682b      	ldr	r3, [r5, #0]
 80011da:	b103      	cbz	r3, 80011de <_sbrk_r+0x1a>
 80011dc:	6023      	str	r3, [r4, #0]
 80011de:	bd38      	pop	{r3, r4, r5, pc}
 80011e0:	20000890 	.word	0x20000890

080011e4 <__malloc_lock>:
 80011e4:	4801      	ldr	r0, [pc, #4]	; (80011ec <__malloc_lock+0x8>)
 80011e6:	f7ff bbcb 	b.w	8000980 <__retarget_lock_acquire_recursive>
 80011ea:	bf00      	nop
 80011ec:	20000884 	.word	0x20000884

080011f0 <__malloc_unlock>:
 80011f0:	4801      	ldr	r0, [pc, #4]	; (80011f8 <__malloc_unlock+0x8>)
 80011f2:	f7ff bbc6 	b.w	8000982 <__retarget_lock_release_recursive>
 80011f6:	bf00      	nop
 80011f8:	20000884 	.word	0x20000884

080011fc <_malloc_usable_size_r>:
 80011fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001200:	1f18      	subs	r0, r3, #4
 8001202:	2b00      	cmp	r3, #0
 8001204:	bfbc      	itt	lt
 8001206:	580b      	ldrlt	r3, [r1, r0]
 8001208:	18c0      	addlt	r0, r0, r3
 800120a:	4770      	bx	lr

0800120c <_sbrk>:
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <_sbrk+0x14>)
 800120e:	4905      	ldr	r1, [pc, #20]	; (8001224 <_sbrk+0x18>)
 8001210:	6813      	ldr	r3, [r2, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	bf08      	it	eq
 8001216:	460b      	moveq	r3, r1
 8001218:	4418      	add	r0, r3
 800121a:	6010      	str	r0, [r2, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	4770      	bx	lr
 8001220:	20000894 	.word	0x20000894
 8001224:	20000898 	.word	0x20000898

08001228 <_init>:
 8001228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122a:	bf00      	nop
 800122c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800122e:	bc08      	pop	{r3}
 8001230:	469e      	mov	lr, r3
 8001232:	4770      	bx	lr

08001234 <_fini>:
 8001234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001236:	bf00      	nop
 8001238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123a:	bc08      	pop	{r3}
 800123c:	469e      	mov	lr, r3
 800123e:	4770      	bx	lr
