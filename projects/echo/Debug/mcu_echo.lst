
Debug/mcu_echo.elf:     file format elf32-littlearm
Debug/mcu_echo.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080008ad

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x000012d8 memsz 0x000012d8 flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x080012d8 align 2**16
         filesz 0x00000068 memsz 0x00000898 flags rw-
    LOAD off    0x00000898 vaddr 0x20000898 paddr 0x08001340 align 2**16
         filesz 0x00000000 memsz 0x00000600 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001098  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001258  08001258  00011258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012c8  080012c8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080012c8  080012c8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012c8  080012c8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080012c8  080012c8  000112c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080012d0  080012d0  000112d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080012d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000830  20000068  08001340  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000898  08001340  00020898  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000888d  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff4  00000000  00000000  00028923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000255  00000000  00000000  0002a917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000370  00000000  00000000  0002ab70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000c0  00000000  00000000  0002aee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003204  00000000  00000000  0002afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001782  00000000  00000000  0002e1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000003c  00000000  00000000  0002f926  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000618  00000000  00000000  0002f964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000117e  00000000  00000000  0002ff7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 000001f5  00000000  00000000  000310fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  000312ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001c0 l    d  .text	00000000 .text
08001258 l    d  .rodata	00000000 .rodata
080012c8 l    d  .ARM.extab	00000000 .ARM.extab
080012c8 l    d  .ARM	00000000 .ARM
080012c8 l    d  .preinit_array	00000000 .preinit_array
080012c8 l    d  .init_array	00000000 .init_array
080012d0 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000068 l    d  .bss	00000000 .bss
20000898 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 startup_stm32l4s5xx.o
f1e0f85f l       *ABS*	00000000 BootRAM
080008c4 l       .text	00000000 LoopCopyDataInit
080008be l       .text	00000000 CopyDataInit
080008d6 l       .text	00000000 LoopFillZerobss
080008d2 l       .text	00000000 FillZerobss
080008e2 l       .text	00000000 LoopForever
080008fc l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 crtstuff.c
08001240 l     O .text	00000000 __EH_FRAME_BEGIN__
08000270 l     F .text	00000000 __do_global_dtors_aux
20000068 l     O .bss	00000000 completed.1
080012d0 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000294 l     F .text	00000000 frame_dummy
2000006c l     O .bss	00000000 object.0
080012c8 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mcu_echo.c
080002b0 l     F .text	00000018 send
080002c8 l     F .text	00000018 receive
00000000 l    df *ABS*	00000000 uart.c
08000458 l     F .text	00000064 uart_pin_setup
080004bc l     F .text	000000b4 uart_enable
00000000 l    df *ABS*	00000000 system_stm32l4xx.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
08001054 l     F .text	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrk.c
20000894 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000008 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
080012d4 l       .fini_array	00000000 __fini_array_end
080012d0 l       .fini_array	00000000 __fini_array_start
080012cc l       .init_array	00000000 __init_array_end
080012c8 l       .preinit_array	00000000 __preinit_array_end
080012c8 l       .init_array	00000000 __init_array_start
080012c8 l       .preinit_array	00000000 __preinit_array_start
080008fc  w    F .text	00000002 RTC_Alarm_IRQHandler
08001214 g     F .text	00000010 _malloc_usable_size_r
080008fc  w    F .text	00000002 EXTI2_IRQHandler
080008fc  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
080008fc  w    F .text	00000002 TIM8_CC_IRQHandler
080008fc  w    F .text	00000002 DebugMon_Handler
080008fc  w    F .text	00000002 TIM1_CC_IRQHandler
080008fc  w    F .text	00000002 TSC_IRQHandler
080008fc  w    F .text	00000002 HardFault_Handler
08001208 g     F .text	0000000c __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
08000570 g     F .text	0000003c uart_baud_gen
080008fc  w    F .text	00000002 SysTick_Handler
08000f88 g     F .text	00000034 memmove
080008fc  w    F .text	00000002 TAMP_STAMP_IRQHandler
080012d8 g       *ABS*	00000000 _sidata
080008fc  w    F .text	00000002 PendSV_Handler
080008fc  w    F .text	00000002 NMI_Handler
080012c8 g       .ARM	00000000 __exidx_end
080008fc  w    F .text	00000002 EXTI3_IRQHandler
08000414 g     F .text	00000044 uart_receive
080003c4 g     F .text	00000050 uart_send
080008fc  w    F .text	00000002 LPTIM2_IRQHandler
080008fc  w    F .text	00000002 DFSDM1_FLT1_IRQHandler
20000890 g     O .bss	00000004 errno
08001258 g       .text	00000000 _etext
20000068 g       .bss	00000000 _sbss
080008fc  w    F .text	00000002 GFXMMU_IRQHandler
080008fc  w    F .text	00000002 I2C3_ER_IRQHandler
080008fc  w    F .text	00000002 DFSDM1_FLT2_IRQHandler
08000f6c g     F .text	0000001c memcpy
20000084 g     O .bss	00000800 msg_buffer
08000a50 g     F .text	000001fc _svfprintf_r
080008fc  w    F .text	00000002 EXTI0_IRQHandler
080008fc  w    F .text	00000002 I2C2_EV_IRQHandler
080008fc  w    F .text	00000002 CAN1_RX0_IRQHandler
080008fc  w    F .text	00000002 FPU_IRQHandler
20000000 g     O .data	00000004 SystemCoreClock
080008fc  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
080008fc  w    F .text	00000002 UsageFault_Handler
080008fc  w    F .text	00000002 LTDC_ER_IRQHandler
20000068 g       .bss	00000000 __bss_start__
20000000 g       .data	00000000 _sdata
080008fc  w    F .text	00000002 SPI1_IRQHandler
080008fc  w    F .text	00000002 OCTOSPI1_IRQHandler
080011dc g     F .text	00000020 _sbrk_r
080008fc  w    F .text	00000002 TIM6_DAC_IRQHandler
080008fc  w    F .text	00000002 DCMI_IRQHandler
080008fc  w    F .text	00000002 TIM8_UP_IRQHandler
080012c8 g       .ARM	00000000 __exidx_start
0800117c g     F .text	0000005e _realloc_r
08000900 g     F .text	00000048 __libc_init_array
080008fc  w    F .text	00000002 OCTOSPI2_IRQHandler
080008fc  w    F .text	00000002 DMA2_Channel2_IRQHandler
080008fc  w    F .text	00000002 DMA1_Channel4_IRQHandler
080008fc  w    F .text	00000002 SAI2_IRQHandler
080008fc  w    F .text	00000002 ADC1_IRQHandler
08001224 g     F .text	0000001c _sbrk
080008fc  w    F .text	00000002 DFSDM1_FLT3_IRQHandler
08001240 g     F .text	00000000 _init
080008fc  w    F .text	00000002 USART3_IRQHandler
20000898 g       .bss	00000000 _ebss
080008fc  w    F .text	00000002 DMA1_Channel7_IRQHandler
080008ac  w    F .text	00000038 Reset_Handler
080008fc  w    F .text	00000002 CAN1_RX1_IRQHandler
080008fc  w    F .text	00000002 UART5_IRQHandler
20000884 g     O .bss	00000001 __lock___malloc_recursive_mutex
080005c4 g     F .text	00000040 led_on
080008fc  w    F .text	00000002 TIM4_IRQHandler
080008fc  w    F .text	00000002 DMA2_Channel1_IRQHandler
20000898 g       ._user_heap_stack	00000000 end
080008fc  w    F .text	00000002 I2C1_EV_IRQHandler
0800099a g     F .text	00000002 __retarget_lock_release_recursive
0800099c g     F .text	000000b4 __ssputs_r
080008fc  w    F .text	00000002 DMAMUX1_OVR_IRQHandler
080008fc  w    F .text	00000002 DMA1_Channel6_IRQHandler
080005ac g     F .text	00000016 uart_init
080008fc  w    F .text	00000002 UART4_IRQHandler
080008fc  w    F .text	00000002 DMA2_Channel4_IRQHandler
080001d0 g     F .text	00000000 memchr
20000898 g       .bss	00000000 __bss_end__
08000fbc g     F .text	00000098 _free_r
080008fc  w    F .text	00000002 TIM3_IRQHandler
080008fc  w    F .text	00000002 RCC_IRQHandler
00000200 g       *ABS*	00000000 _Min_Heap_Size
080008fc  w    F .text	00000002 DMA1_Channel1_IRQHandler
080008fc g       .text	00000002 Default_Handler
080008fc  w    F .text	00000002 DMA2_Channel7_IRQHandler
080008fc  w    F .text	00000002 EXTI15_10_IRQHandler
08000708 g     F .text	000001a4 set_sysclk_to_120
080008fc  w    F .text	00000002 TIM7_IRQHandler
080008fc  w    F .text	00000002 SDMMC1_IRQHandler
080008fc  w    F .text	00000002 TIM5_IRQHandler
080008fc  w    F .text	00000002 I2C3_EV_IRQHandler
080008fc  w    F .text	00000002 EXTI9_5_IRQHandler
080008fc  w    F .text	00000002 RTC_WKUP_IRQHandler
080008fc  w    F .text	00000002 LTDC_IRQHandler
080011fc g     F .text	0000000c __malloc_lock
080008fc  w    F .text	00000002 PVD_PVM_IRQHandler
080008fc  w    F .text	00000002 SPI2_IRQHandler
08000998 g     F .text	00000002 __retarget_lock_acquire_recursive
08000948 g     F .text	00000010 memset
080008fc  w    F .text	00000002 MemManage_Handler
080002e0 g     F .text	000000e4 main
080008fc  w    F .text	00000002 CAN1_TX_IRQHandler
080008fc  w    F .text	00000002 SVC_Handler
080008fc  w    F .text	00000002 DMA2_Channel5_IRQHandler
08001094 g     F .text	000000e8 _malloc_r
080008fc  w    F .text	00000002 DMA1_Channel5_IRQHandler
080008fc  w    F .text	00000002 EXTI4_IRQHandler
080006bc g     F .text	0000004c SystemInit
080008fc  w    F .text	00000002 RNG_IRQHandler
0800124c g     F .text	00000000 _fini
080008fc  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08000958 g     F .text	00000040 sprintf
08000604 g     F .text	00000040 led_off
080008fc  w    F .text	00000002 DMA1_Channel3_IRQHandler
080008fc  w    F .text	00000002 COMP_IRQHandler
08000c4c g     F .text	000000da _printf_common
20000004 g     O .data	00000004 _impure_ptr
080008fc  w    F .text	00000002 HASH_CRS_IRQHandler
08000a50 g     F .text	000001fc _svfiprintf_r
080008fc  w    F .text	00000002 WWDG_IRQHandler
080008fc  w    F .text	00000002 I2C4_EV_IRQHandler
080008fc  w    F .text	00000002 LPUART1_IRQHandler
080008fc  w    F .text	00000002 DMA2_Channel6_IRQHandler
080008fc  w    F .text	00000002 TIM2_IRQHandler
08000644 g     F .text	00000078 led_init
080008fc  w    F .text	00000002 DMA2D_IRQHandler
200a0000 g       .isr_vector	00000000 _estack
080008fc  w    F .text	00000002 EXTI1_IRQHandler
20000068 g       .data	00000000 _edata
080008fc  w    F .text	00000002 AES_IRQHandler
080008fc  w    F .text	00000002 USART2_IRQHandler
080008fc  w    F .text	00000002 DFSDM1_FLT0_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
080008fc  w    F .text	00000002 I2C2_ER_IRQHandler
080008fc  w    F .text	00000002 DMA1_Channel2_IRQHandler
08000958 g     F .text	00000040 siprintf
080008fc  w    F .text	00000002 TIM8_BRK_IRQHandler
080008fc  w    F .text	00000002 CAN1_SCE_IRQHandler
080008fc  w    F .text	00000002 FLASH_IRQHandler
080008fc  w    F .text	00000002 BusFault_Handler
080008fc  w    F .text	00000002 USART1_IRQHandler
080001c0 g     F .text	00000010 strlen
080008fc  w    F .text	00000002 OTG_FS_IRQHandler
08000d28 g     F .text	00000244 _printf_i
080008fc  w    F .text	00000002 SPI3_IRQHandler
2000088c g     O .bss	00000004 __malloc_sbrk_start
080008fc  w    F .text	00000002 I2C1_ER_IRQHandler
080008fc  w    F .text	00000002 FMC_IRQHandler
20000888 g     O .bss	00000004 __malloc_free_list
080008fc  w    F .text	00000002 LPTIM1_IRQHandler
080008fc  w    F .text	00000002 I2C4_ER_IRQHandler
080008fc  w    F .text	00000002 SAI1_IRQHandler
080008fc  w    F .text	00000002 DMA2_Channel3_IRQHandler
080008fc  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

080001c0 <strlen>:
 80001c0:	4603      	mov	r3, r0
 80001c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001c6:	2a00      	cmp	r2, #0
 80001c8:	d1fb      	bne.n	80001c2 <strlen+0x2>
 80001ca:	1a18      	subs	r0, r3, r0
 80001cc:	3801      	subs	r0, #1
 80001ce:	4770      	bx	lr

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__do_global_dtors_aux>:
 8000270:	b510      	push	{r4, lr}
 8000272:	4c05      	ldr	r4, [pc, #20]	; (8000288 <__do_global_dtors_aux+0x18>)
 8000274:	7823      	ldrb	r3, [r4, #0]
 8000276:	b933      	cbnz	r3, 8000286 <__do_global_dtors_aux+0x16>
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <__do_global_dtors_aux+0x1c>)
 800027a:	b113      	cbz	r3, 8000282 <__do_global_dtors_aux+0x12>
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <__do_global_dtors_aux+0x20>)
 800027e:	f3af 8000 	nop.w
 8000282:	2301      	movs	r3, #1
 8000284:	7023      	strb	r3, [r4, #0]
 8000286:	bd10      	pop	{r4, pc}
 8000288:	20000068 	.word	0x20000068
 800028c:	00000000 	.word	0x00000000
 8000290:	08001240 	.word	0x08001240

08000294 <frame_dummy>:
 8000294:	b508      	push	{r3, lr}
 8000296:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <frame_dummy+0x10>)
 8000298:	b11b      	cbz	r3, 80002a2 <frame_dummy+0xe>
 800029a:	4903      	ldr	r1, [pc, #12]	; (80002a8 <frame_dummy+0x14>)
 800029c:	4803      	ldr	r0, [pc, #12]	; (80002ac <frame_dummy+0x18>)
 800029e:	f3af 8000 	nop.w
 80002a2:	bd08      	pop	{r3, pc}
 80002a4:	00000000 	.word	0x00000000
 80002a8:	2000006c 	.word	0x2000006c
 80002ac:	08001240 	.word	0x08001240

080002b0 <send>:
	}
	return msg;
}

// Send size bytes at data pointer, using method defined by USE_DMA macro
static void send(void * data, size_t size) {
 80002b0:	b500      	push	{lr}
 80002b2:	b083      	sub	sp, #12
 80002b4:	9001      	str	r0, [sp, #4]
 80002b6:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_tx_start(data, size);
		uart_tx_wait();
	} else {
	*/
		uart_send(data, size);
 80002b8:	9900      	ldr	r1, [sp, #0]
 80002ba:	9801      	ldr	r0, [sp, #4]
 80002bc:	f000 f882 	bl	80003c4 <uart_send>
	//}
}
 80002c0:	bf00      	nop
 80002c2:	b003      	add	sp, #12
 80002c4:	f85d fb04 	ldr.w	pc, [sp], #4

080002c8 <receive>:

// Receive size bytes at buffer pointer, using method defined by USE_DMA macro
static void receive(void * buffer, size_t size) {
 80002c8:	b500      	push	{lr}
 80002ca:	b083      	sub	sp, #12
 80002cc:	9001      	str	r0, [sp, #4]
 80002ce:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_rx_start(buffer, size);
		uart_rx_wait();
	} else {
	*/
		uart_receive(buffer, size);
 80002d0:	9900      	ldr	r1, [sp, #0]
 80002d2:	9801      	ldr	r0, [sp, #4]
 80002d4:	f000 f89e 	bl	8000414 <uart_receive>
	//}
}
 80002d8:	bf00      	nop
 80002da:	b003      	add	sp, #12
 80002dc:	f85d fb04 	ldr.w	pc, [sp], #4

080002e0 <main>:

int main(void) {
 80002e0:	b500      	push	{lr}
 80002e2:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
	char debug_msg[BUFFERSIZE] = {0};
 80002e6:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
 80002ea:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	3304      	adds	r3, #4
 80002f4:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fb24 	bl	8000948 <memset>
	char * stripped_msg;
	size_t received_size=0;
 8000300:	2300      	movs	r3, #0
 8000302:	f8cd 3808 	str.w	r3, [sp, #2056]	; 0x808
	int discard_cali = 0; // Discard baud calibration character after first communication
 8000306:	2300      	movs	r3, #0
 8000308:	f8cd 380c 	str.w	r3, [sp, #2060]	; 0x80c

	uart_init();
 800030c:	f000 f94e 	bl	80005ac <uart_init>
	led_init();
 8000310:	f000 f998 	bl	8000644 <led_init>
	//uart_dma_init();

	while(1) {
		if (discard_cali) {
 8000314:	f8dd 380c 	ldr.w	r3, [sp, #2060]	; 0x80c
 8000318:	2b00      	cmp	r3, #0
 800031a:	d007      	beq.n	800032c <main+0x4c>
			// Discard Auto Baud calibration character
			receive(msg_buffer, 1);
 800031c:	2101      	movs	r1, #1
 800031e:	4827      	ldr	r0, [pc, #156]	; (80003bc <main+0xdc>)
 8000320:	f7ff ffd2 	bl	80002c8 <receive>
			memset(msg_buffer, 0, 1);
 8000324:	4b25      	ldr	r3, [pc, #148]	; (80003bc <main+0xdc>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
 800032a:	e002      	b.n	8000332 <main+0x52>
		} else {
			discard_cali = 1;
 800032c:	2301      	movs	r3, #1
 800032e:	f8cd 380c 	str.w	r3, [sp, #2060]	; 0x80c
		}

		// Read received buffer size
		led_on(LD1);
 8000332:	2000      	movs	r0, #0
 8000334:	f000 f946 	bl	80005c4 <led_on>
		receive(msg_buffer, sizeof(uint32_t));
 8000338:	2104      	movs	r1, #4
 800033a:	4820      	ldr	r0, [pc, #128]	; (80003bc <main+0xdc>)
 800033c:	f7ff ffc4 	bl	80002c8 <receive>
		received_size = READSIZE(msg_buffer);
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <main+0xdc>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f8cd 3808 	str.w	r3, [sp, #2056]	; 0x808
		memset(msg_buffer, 0, sizeof(uint32_t));
 8000348:	2204      	movs	r2, #4
 800034a:	2100      	movs	r1, #0
 800034c:	481b      	ldr	r0, [pc, #108]	; (80003bc <main+0xdc>)
 800034e:	f000 fafb 	bl	8000948 <memset>
		led_off(LD1);
 8000352:	2000      	movs	r0, #0
 8000354:	f000 f956 	bl	8000604 <led_off>

		// Send back buffer content
		if (received_size > BUFFERSIZE) {
 8000358:	f8dd 3808 	ldr.w	r3, [sp, #2056]	; 0x808
 800035c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000360:	d912      	bls.n	8000388 <main+0xa8>
			// Message too large
			sprintf(debug_msg, "Attempting to read %u bytes larger than buffer size %d.\n", (unsigned int)received_size, BUFFERSIZE);
 8000362:	a801      	add	r0, sp, #4
 8000364:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000368:	f8dd 2808 	ldr.w	r2, [sp, #2056]	; 0x808
 800036c:	4914      	ldr	r1, [pc, #80]	; (80003c0 <main+0xe0>)
 800036e:	f000 faf3 	bl	8000958 <siprintf>
			send(debug_msg, strlen(debug_msg));
 8000372:	ab01      	add	r3, sp, #4
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ff23 	bl	80001c0 <strlen>
 800037a:	4602      	mov	r2, r0
 800037c:	ab01      	add	r3, sp, #4
 800037e:	4611      	mov	r1, r2
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ff95 	bl	80002b0 <send>
 8000386:	e7c5      	b.n	8000314 <main+0x34>
		} else {
			// Read message
			receive(msg_buffer, received_size);
 8000388:	f8dd 1808 	ldr.w	r1, [sp, #2056]	; 0x808
 800038c:	480b      	ldr	r0, [pc, #44]	; (80003bc <main+0xdc>)
 800038e:	f7ff ff9b 	bl	80002c8 <receive>

			// Echo message
			stripped_msg = msg_buffer;
 8000392:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <main+0xdc>)
 8000394:	f8cd 3804 	str.w	r3, [sp, #2052]	; 0x804
			send(stripped_msg, strlen(stripped_msg));
 8000398:	f8dd 0804 	ldr.w	r0, [sp, #2052]	; 0x804
 800039c:	f7ff ff10 	bl	80001c0 <strlen>
 80003a0:	4603      	mov	r3, r0
 80003a2:	4619      	mov	r1, r3
 80003a4:	f8dd 0804 	ldr.w	r0, [sp, #2052]	; 0x804
 80003a8:	f7ff ff82 	bl	80002b0 <send>
			memset(msg_buffer, 0, received_size);
 80003ac:	f8dd 2808 	ldr.w	r2, [sp, #2056]	; 0x808
 80003b0:	2100      	movs	r1, #0
 80003b2:	4802      	ldr	r0, [pc, #8]	; (80003bc <main+0xdc>)
 80003b4:	f000 fac8 	bl	8000948 <memset>
		if (discard_cali) {
 80003b8:	e7ac      	b.n	8000314 <main+0x34>
 80003ba:	bf00      	nop
 80003bc:	20000084 	.word	0x20000084
 80003c0:	08001258 	.word	0x08001258

080003c4 <uart_send>:
#include "uart.h"

char msg_buffer[BUFFERSIZE] = {0};

// Send content of pointer through uart
void uart_send(void * data, size_t size) {
 80003c4:	b084      	sub	sp, #16
 80003c6:	9001      	str	r0, [sp, #4]
 80003c8:	9100      	str	r1, [sp, #0]
	for (size_t i=0; i<size; i++){
 80003ca:	2300      	movs	r3, #0
 80003cc:	9303      	str	r3, [sp, #12]
 80003ce:	e00f      	b.n	80003f0 <uart_send+0x2c>
		// Wait until TXE bit is set
		while(!(UART4->ISR & (1 << 7)));
 80003d0:	bf00      	nop
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <uart_send+0x4c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0f9      	beq.n	80003d2 <uart_send+0xe>
		// Send character
		UART4->TDR = ((char *)data)[i];
 80003de:	9a01      	ldr	r2, [sp, #4]
 80003e0:	9b03      	ldr	r3, [sp, #12]
 80003e2:	4413      	add	r3, r2
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <uart_send+0x4c>)
 80003e8:	851a      	strh	r2, [r3, #40]	; 0x28
	for (size_t i=0; i<size; i++){
 80003ea:	9b03      	ldr	r3, [sp, #12]
 80003ec:	3301      	adds	r3, #1
 80003ee:	9303      	str	r3, [sp, #12]
 80003f0:	9a03      	ldr	r2, [sp, #12]
 80003f2:	9b00      	ldr	r3, [sp, #0]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d3eb      	bcc.n	80003d0 <uart_send+0xc>
	}
	// Wait for character transmit complete - TC bit
	while(!(UART4->ISR & (1 << 6))) {};
 80003f8:	bf00      	nop
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <uart_send+0x4c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000402:	2b00      	cmp	r3, #0
 8000404:	d0f9      	beq.n	80003fa <uart_send+0x36>
}
 8000406:	bf00      	nop
 8000408:	bf00      	nop
 800040a:	b004      	add	sp, #16
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40004c00 	.word	0x40004c00

08000414 <uart_receive>:

// Receive size bytes of content from uart and write it to buffer
void uart_receive(void * buffer, size_t size)  {
 8000414:	b084      	sub	sp, #16
 8000416:	9001      	str	r0, [sp, #4]
 8000418:	9100      	str	r1, [sp, #0]
	for (size_t i=0; i < size; i++) {
 800041a:	2300      	movs	r3, #0
 800041c:	9303      	str	r3, [sp, #12]
 800041e:	e011      	b.n	8000444 <uart_receive+0x30>
		// Wait until RXNE bit is set
		while(!(UART4->ISR & (1 << 5)));
 8000420:	bf00      	nop
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <uart_receive+0x40>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 0320 	and.w	r3, r3, #32
 800042a:	2b00      	cmp	r3, #0
 800042c:	d0f9      	beq.n	8000422 <uart_receive+0xe>
		// Receive character
		((char *)buffer)[i] = UART4->RDR;
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <uart_receive+0x40>)
 8000430:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000432:	b299      	uxth	r1, r3
 8000434:	9a01      	ldr	r2, [sp, #4]
 8000436:	9b03      	ldr	r3, [sp, #12]
 8000438:	4413      	add	r3, r2
 800043a:	b2ca      	uxtb	r2, r1
 800043c:	701a      	strb	r2, [r3, #0]
	for (size_t i=0; i < size; i++) {
 800043e:	9b03      	ldr	r3, [sp, #12]
 8000440:	3301      	adds	r3, #1
 8000442:	9303      	str	r3, [sp, #12]
 8000444:	9a03      	ldr	r2, [sp, #12]
 8000446:	9b00      	ldr	r3, [sp, #0]
 8000448:	429a      	cmp	r2, r3
 800044a:	d3e9      	bcc.n	8000420 <uart_receive+0xc>
	}

}
 800044c:	bf00      	nop
 800044e:	bf00      	nop
 8000450:	b004      	add	sp, #16
 8000452:	4770      	bx	lr
 8000454:	40004c00 	.word	0x40004c00

08000458 <uart_pin_setup>:

// Setup GPIO A2 and A3 pins for UART
static void uart_pin_setup(void) {
    // Enable GPIOA clock, bit 0 on AHB2ENR
    RCC->AHB2ENR |= (1 << 0);
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <uart_pin_setup+0x60>)
 800045a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045c:	4a16      	ldr	r2, [pc, #88]	; (80004b8 <uart_pin_setup+0x60>)
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	64d3      	str	r3, [r2, #76]	; 0x4c

    // Set pin modes as alternate mode 7 (PA0 and PA1)
    // UART4 TX and RX pins are PA0 (D1) and PA1(D0) respectively 
    GPIOA->MODER &= ~(0xFU << 0);
 8000464:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800046e:	f023 030f 	bic.w	r3, r3, #15
 8000472:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xAU << 0);
 8000474:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800047e:	f043 030a 	orr.w	r3, r3, #10
 8000482:	6013      	str	r3, [r2, #0]

    // Set pin modes as high speed
    GPIOA->OSPEEDR |= 0x0000000F;
 8000484:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800048e:	f043 030f 	orr.w	r3, r3, #15
 8000492:	6093      	str	r3, [r2, #8]

    // Choose AF8 for UART4 in Alternate Function registers
    GPIOA->AFR[0] |= (0x8U << 0); // for pin A0
 8000494:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000498:	6a1b      	ldr	r3, [r3, #32]
 800049a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800049e:	f043 0308 	orr.w	r3, r3, #8
 80004a2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x8U << 4); // for pin A1
 80004a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004a8:	6a1b      	ldr	r3, [r3, #32]
 80004aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004b2:	6213      	str	r3, [r2, #32]
}
 80004b4:	bf00      	nop
 80004b6:	4770      	bx	lr
 80004b8:	40021000 	.word	0x40021000

080004bc <uart_enable>:

// Initialize UART 4
static void uart_enable(void) {
    // enable UART4 clock
    RCC->APB1ENR1 |= (1 << 19);
 80004bc:	4b2a      	ldr	r3, [pc, #168]	; (8000568 <uart_enable+0xac>)
 80004be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004c0:	4a29      	ldr	r2, [pc, #164]	; (8000568 <uart_enable+0xac>)
 80004c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004c6:	6593      	str	r3, [r2, #88]	; 0x58

	// Select Sysclk as UART4 Source
	RCC->CCIPR |= (1U << 6);
 80004c8:	4b27      	ldr	r3, [pc, #156]	; (8000568 <uart_enable+0xac>)
 80004ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004ce:	4a26      	ldr	r2, [pc, #152]	; (8000568 <uart_enable+0xac>)
 80004d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    // Disable uart4 - UE, bit 0
    UART4->CR1 &= ~(1 << 0);
 80004d8:	4b24      	ldr	r3, [pc, #144]	; (800056c <uart_enable+0xb0>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a23      	ldr	r2, [pc, #140]	; (800056c <uart_enable+0xb0>)
 80004de:	f023 0301 	bic.w	r3, r3, #1
 80004e2:	6013      	str	r3, [r2, #0]

	// Disable FIFO mode
	UART4->CR1 &= ~(1<<20);
 80004e4:	4b21      	ldr	r3, [pc, #132]	; (800056c <uart_enable+0xb0>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a20      	ldr	r2, [pc, #128]	; (800056c <uart_enable+0xb0>)
 80004ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80004ee:	6013      	str	r3, [r2, #0]

	// Set word size to 8
	UART4->CR1 &= ~(1U<<12 | 1U<<28);
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <uart_enable+0xb0>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a1d      	ldr	r2, [pc, #116]	; (800056c <uart_enable+0xb0>)
 80004f6:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80004fa:	6013      	str	r3, [r2, #0]

	// OVER8 = 0
	UART4->CR1 &= ~(1<<15);
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <uart_enable+0xb0>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a1a      	ldr	r2, [pc, #104]	; (800056c <uart_enable+0xb0>)
 8000502:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000506:	6013      	str	r3, [r2, #0]

	// For STM32L4S5: Sysclk = 120 Mhz (Sysclk/2), Baudrate = 115200, OVER8 = 0
	// USARTDIV = (1+OVER8) * fCK / baud
	// USARTDIV = 120Mhz / 115200 = 1041.67 ~ 1042
    UART4->BRR = 1042U;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <uart_enable+0xb0>)
 800050a:	f240 4212 	movw	r2, #1042	; 0x412
 800050e:	60da      	str	r2, [r3, #12]

	// Set stop bits to 1
	UART4->CR2 &= ~(0xF << 12);
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <uart_enable+0xb0>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	4a15      	ldr	r2, [pc, #84]	; (800056c <uart_enable+0xb0>)
 8000516:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800051a:	6053      	str	r3, [r2, #4]

	// Disable parity
	UART4->CR1 &= ~(1<<10);
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <uart_enable+0xb0>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a12      	ldr	r2, [pc, #72]	; (800056c <uart_enable+0xb0>)
 8000522:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000526:	6013      	str	r3, [r2, #0]

	// Set Auto Baud detection to 0x55 frame detection
	UART4->CR2 |= (3U<<21);
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <uart_enable+0xb0>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	4a0f      	ldr	r2, [pc, #60]	; (800056c <uart_enable+0xb0>)
 800052e:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8000532:	6053      	str	r3, [r2, #4]
	
	// Enable Auto Baud detection
	UART4->CR2 |= (1<<20);
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <uart_enable+0xb0>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	4a0c      	ldr	r2, [pc, #48]	; (800056c <uart_enable+0xb0>)
 800053a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800053e:	6053      	str	r3, [r2, #4]

    // UART4 TX enable, TE bit 3
    UART4->CR1 |= (1 << 3);
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <uart_enable+0xb0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a09      	ldr	r2, [pc, #36]	; (800056c <uart_enable+0xb0>)
 8000546:	f043 0308 	orr.w	r3, r3, #8
 800054a:	6013      	str	r3, [r2, #0]

    // UART4 RX enable, RE bit 2
    UART4->CR1 |= (1 << 2);
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <uart_enable+0xb0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <uart_enable+0xb0>)
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	6013      	str	r3, [r2, #0]

    // Enable uart4 - UE, bit 0
    UART4->CR1 |= (1 << 0);
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <uart_enable+0xb0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a03      	ldr	r2, [pc, #12]	; (800056c <uart_enable+0xb0>)
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	6013      	str	r3, [r2, #0]
}	
 8000564:	bf00      	nop
 8000566:	4770      	bx	lr
 8000568:	40021000 	.word	0x40021000
 800056c:	40004c00 	.word	0x40004c00

08000570 <uart_baud_gen>:

void uart_baud_gen(void) {
 8000570:	b500      	push	{lr}
 8000572:	b085      	sub	sp, #20
	char temp[8] = {0};
 8000574:	2300      	movs	r3, #0
 8000576:	9301      	str	r3, [sp, #4]
 8000578:	2300      	movs	r3, #0
 800057a:	9302      	str	r3, [sp, #8]
	volatile uint32_t * brr = &(UART4->BRR);
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <uart_baud_gen+0x34>)
 800057e:	9303      	str	r3, [sp, #12]
	uart_receive(temp, 1);
 8000580:	ab01      	add	r3, sp, #4
 8000582:	2101      	movs	r1, #1
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff45 	bl	8000414 <uart_receive>
	// Wait for auto baud generation to complete- ABRF bit
	while(!(UART4->ISR & (1 << 15))) {};
 800058a:	bf00      	nop
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <uart_baud_gen+0x38>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0f9      	beq.n	800058c <uart_baud_gen+0x1c>
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	b005      	add	sp, #20
 800059e:	f85d fb04 	ldr.w	pc, [sp], #4
 80005a2:	bf00      	nop
 80005a4:	40004c0c 	.word	0x40004c0c
 80005a8:	40004c00 	.word	0x40004c00

080005ac <uart_init>:

void uart_init(void)
{
 80005ac:	b508      	push	{r3, lr}
	// Set system clock
	set_sysclk_to_120();
 80005ae:	f000 f8ab 	bl	8000708 <set_sysclk_to_120>

	uart_pin_setup();
 80005b2:	f7ff ff51 	bl	8000458 <uart_pin_setup>
	uart_enable();
 80005b6:	f7ff ff81 	bl	80004bc <uart_enable>
	uart_baud_gen();
 80005ba:	f7ff ffd9 	bl	8000570 <uart_baud_gen>
}
 80005be:	bf00      	nop
 80005c0:	bd08      	pop	{r3, pc}
	...

080005c4 <led_on>:

// Turn on LED
void led_on(led l) {
 80005c4:	b082      	sub	sp, #8
 80005c6:	4603      	mov	r3, r0
 80005c8:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (l) {
 80005cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d002      	beq.n	80005da <led_on+0x16>
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d009      	beq.n	80005ec <led_on+0x28>
			break;
		case LD2:
			GPIOB->ODR |= (1U<<14);
			break;
		default:
			break;
 80005d8:	e00f      	b.n	80005fa <led_on+0x36>
			GPIOA->ODR |= (1U<<5);
 80005da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	6153      	str	r3, [r2, #20]
			break;
 80005ea:	e006      	b.n	80005fa <led_on+0x36>
			GPIOB->ODR |= (1U<<14);
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <led_on+0x3c>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	4a03      	ldr	r2, [pc, #12]	; (8000600 <led_on+0x3c>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6153      	str	r3, [r2, #20]
			break;
 80005f8:	bf00      	nop
	}
}
 80005fa:	bf00      	nop
 80005fc:	b002      	add	sp, #8
 80005fe:	4770      	bx	lr
 8000600:	48000400 	.word	0x48000400

08000604 <led_off>:

// Turn off LED
void led_off(led l) {
 8000604:	b082      	sub	sp, #8
 8000606:	4603      	mov	r3, r0
 8000608:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (l) {
 800060c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d002      	beq.n	800061a <led_off+0x16>
 8000614:	2b01      	cmp	r3, #1
 8000616:	d009      	beq.n	800062c <led_off+0x28>
			break;
		case LD2:
			GPIOB->ODR &= ~(1U<<14);
			break;
		default:
			break;
 8000618:	e00f      	b.n	800063a <led_off+0x36>
			GPIOA->ODR &= ~(1U<<5);
 800061a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000624:	f023 0320 	bic.w	r3, r3, #32
 8000628:	6153      	str	r3, [r2, #20]
			break;
 800062a:	e006      	b.n	800063a <led_off+0x36>
			GPIOB->ODR &= ~(1U<<14);
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <led_off+0x3c>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	4a03      	ldr	r2, [pc, #12]	; (8000640 <led_off+0x3c>)
 8000632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000636:	6153      	str	r3, [r2, #20]
			break;
 8000638:	bf00      	nop
	}
}
 800063a:	bf00      	nop
 800063c:	b002      	add	sp, #8
 800063e:	4770      	bx	lr
 8000640:	48000400 	.word	0x48000400

08000644 <led_init>:
}

// Setup LED GPIO
void led_init(void) {
	// Enable GPIOA and GPIOB clock
	RCC->AHB2ENR |= (1U << 0);
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <led_init+0x70>)
 8000646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000648:	4a1a      	ldr	r2, [pc, #104]	; (80006b4 <led_init+0x70>)
 800064a:	f043 0301 	orr.w	r3, r3, #1
 800064e:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (1U << 1);
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <led_init+0x70>)
 8000652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000654:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <led_init+0x70>)
 8000656:	f043 0302 	orr.w	r3, r3, #2
 800065a:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Turn on output mode on A5 and B14
	GPIOA->MODER &= ~(0xFU << 10);
 800065c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000666:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800066a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 10);
 800066c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800067a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0xFU << 28);
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <led_init+0x74>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a0d      	ldr	r2, [pc, #52]	; (80006b8 <led_init+0x74>)
 8000682:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000686:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 28);
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <led_init+0x74>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <led_init+0x74>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6013      	str	r3, [r2, #0]

	// Turn off LEDs
	GPIOA->ODR &= ~(1U<<5);
 8000694:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800069e:	f023 0320 	bic.w	r3, r3, #32
 80006a2:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~(1U<<14);
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <led_init+0x74>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <led_init+0x74>)
 80006aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006ae:	6153      	str	r3, [r2, #20]
}
 80006b0:	bf00      	nop
 80006b2:	4770      	bx	lr
 80006b4:	40021000 	.word	0x40021000
 80006b8:	48000400 	.word	0x48000400

080006bc <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <SystemInit+0x44>)
 80006be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <SystemInit+0x44>)
 80006c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  	// Set MSION bit
	RCC->CR |= 1U<<0;
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <SystemInit+0x48>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0c      	ldr	r2, [pc, #48]	; (8000704 <SystemInit+0x48>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]

	// Reset HSEON, CSSON, PLLON, and HSEBYP bit
	RCC->CR &= ~((1U<<16) | (1U<<19) | (1U<<24) | (1U<<18));
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <SystemInit+0x48>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a09      	ldr	r2, [pc, #36]	; (8000704 <SystemInit+0x48>)
 80006de:	f023 7386 	bic.w	r3, r3, #17563648	; 0x10c0000
 80006e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006e6:	6013      	str	r3, [r2, #0]
	// Reset RCC clock configuration
	RCC->CFGR = 0x00000000;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <SystemInit+0x48>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
	RCC->PLLCFGR = 0x00001000;	
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <SystemInit+0x48>)
 80006f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006f4:	60da      	str	r2, [r3, #12]
	// Disable all clock interrupts
	RCC->CIER = 0x00000000;
 80006f6:	4b03      	ldr	r3, [pc, #12]	; (8000704 <SystemInit+0x48>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
}
 80006fc:	bf00      	nop
 80006fe:	4770      	bx	lr
 8000700:	e000ed00 	.word	0xe000ed00
 8000704:	40021000 	.word	0x40021000

08000708 <set_sysclk_to_120>:
}

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

// Set system clock to 120 MHz and perform other initialization tasks
void set_sysclk_to_120(void) {
 8000708:	b088      	sub	sp, #32
	// Actual bit values for PLL fields
	uint32_t pllm = PLL_M-1;
 800070a:	2300      	movs	r3, #0
 800070c:	9307      	str	r3, [sp, #28]
	uint32_t plln = PLL_N;
 800070e:	2314      	movs	r3, #20
 8000710:	9306      	str	r3, [sp, #24]
	uint32_t pllr = PLL_R/2 - 1;
 8000712:	2303      	movs	r3, #3
 8000714:	9305      	str	r3, [sp, #20]
	volatile uint32_t * cr = &(RCC->CR);
 8000716:	4b5d      	ldr	r3, [pc, #372]	; (800088c <set_sysclk_to_120+0x184>)
 8000718:	9304      	str	r3, [sp, #16]
	volatile uint32_t * bdcr = &(RCC->BDCR);
 800071a:	4b5d      	ldr	r3, [pc, #372]	; (8000890 <set_sysclk_to_120+0x188>)
 800071c:	9303      	str	r3, [sp, #12]
	volatile uint32_t * pllcfgr = &(RCC->PLLCFGR);
 800071e:	4b5d      	ldr	r3, [pc, #372]	; (8000894 <set_sysclk_to_120+0x18c>)
 8000720:	9302      	str	r3, [sp, #8]
	volatile uint32_t * cfgr = &(RCC->CFGR);
 8000722:	4b5d      	ldr	r3, [pc, #372]	; (8000898 <set_sysclk_to_120+0x190>)
 8000724:	9301      	str	r3, [sp, #4]
	volatile uint32_t * pwrcr = &(PWR->CR1);
 8000726:	4b5d      	ldr	r3, [pc, #372]	; (800089c <set_sysclk_to_120+0x194>)
 8000728:	9300      	str	r3, [sp, #0]

	// Enable power interface clock
	RCC->APB1ENR1 |= 1U<<28;
 800072a:	4b58      	ldr	r3, [pc, #352]	; (800088c <set_sysclk_to_120+0x184>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072e:	4a57      	ldr	r2, [pc, #348]	; (800088c <set_sysclk_to_120+0x184>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000734:	6593      	str	r3, [r2, #88]	; 0x58
	// Select power range 1
	PWR->CR1 |= 1<<9;
 8000736:	4b59      	ldr	r3, [pc, #356]	; (800089c <set_sysclk_to_120+0x194>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a58      	ldr	r2, [pc, #352]	; (800089c <set_sysclk_to_120+0x194>)
 800073c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000740:	6013      	str	r3, [r2, #0]
	// R1MODE bit - boost mode
	PWR->CR5 &= ~(1<<8);
 8000742:	4b56      	ldr	r3, [pc, #344]	; (800089c <set_sysclk_to_120+0x194>)
 8000744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000748:	4a54      	ldr	r2, [pc, #336]	; (800089c <set_sysclk_to_120+0x194>)
 800074a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800074e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	// Disable BDCR write protection
	PWR->CR1 |= 1U<<8;
 8000752:	4b52      	ldr	r3, [pc, #328]	; (800089c <set_sysclk_to_120+0x194>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a51      	ldr	r2, [pc, #324]	; (800089c <set_sysclk_to_120+0x194>)
 8000758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800075c:	6013      	str	r3, [r2, #0]
	// Unreset BDCR
	// RCC->BDCR &= ~(1U<<16);
	// Enable LSE (for MSI PLL)
	RCC->BDCR |= 1U<<0;
 800075e:	4b4b      	ldr	r3, [pc, #300]	; (800088c <set_sysclk_to_120+0x184>)
 8000760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000764:	4a49      	ldr	r2, [pc, #292]	; (800088c <set_sysclk_to_120+0x184>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	// Wait for LSE to be ready
	while(!(RCC->BDCR &(1U<<1)));
 800076e:	bf00      	nop
 8000770:	4b46      	ldr	r3, [pc, #280]	; (800088c <set_sysclk_to_120+0x184>)
 8000772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f8      	beq.n	8000770 <set_sysclk_to_120+0x68>

	// Enable MSI
	RCC->CR |= 1U<<0;
 800077e:	4b43      	ldr	r3, [pc, #268]	; (800088c <set_sysclk_to_120+0x184>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a42      	ldr	r2, [pc, #264]	; (800088c <set_sysclk_to_120+0x184>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 800078a:	bf00      	nop
 800078c:	4b3f      	ldr	r3, [pc, #252]	; (800088c <set_sysclk_to_120+0x184>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f003 0302 	and.w	r3, r3, #2
 8000794:	2b00      	cmp	r3, #0
 8000796:	d0f9      	beq.n	800078c <set_sysclk_to_120+0x84>
	// Set MSI clock to 48 Mhz
	RCC->CR |= 1U<<3; // Select CR register value
 8000798:	4b3c      	ldr	r3, [pc, #240]	; (800088c <set_sysclk_to_120+0x184>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a3b      	ldr	r2, [pc, #236]	; (800088c <set_sysclk_to_120+0x184>)
 800079e:	f043 0308 	orr.w	r3, r3, #8
 80007a2:	6013      	str	r3, [r2, #0]
	RCC->CR &= ~(0xFF << 4);
 80007a4:	4b39      	ldr	r3, [pc, #228]	; (800088c <set_sysclk_to_120+0x184>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a38      	ldr	r2, [pc, #224]	; (800088c <set_sysclk_to_120+0x184>)
 80007aa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80007ae:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 80007b0:	bf00      	nop
 80007b2:	4b36      	ldr	r3, [pc, #216]	; (800088c <set_sysclk_to_120+0x184>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0f9      	beq.n	80007b2 <set_sysclk_to_120+0xaa>
	RCC->CR |= 11 << 4;
 80007be:	4b33      	ldr	r3, [pc, #204]	; (800088c <set_sysclk_to_120+0x184>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a32      	ldr	r2, [pc, #200]	; (800088c <set_sysclk_to_120+0x184>)
 80007c4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80007c8:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 80007ca:	bf00      	nop
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <set_sysclk_to_120+0x184>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f003 0302 	and.w	r3, r3, #2
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d0f9      	beq.n	80007cc <set_sysclk_to_120+0xc4>
	// Enable MSI PLL
	RCC->CR |= 1U<<2;
 80007d8:	4b2c      	ldr	r3, [pc, #176]	; (800088c <set_sysclk_to_120+0x184>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a2b      	ldr	r2, [pc, #172]	; (800088c <set_sysclk_to_120+0x184>)
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	6013      	str	r3, [r2, #0]

	// Set AHB Prescaler - 2
	RCC->CFGR |= (4<<4);
 80007e4:	4b29      	ldr	r3, [pc, #164]	; (800088c <set_sysclk_to_120+0x184>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	4a28      	ldr	r2, [pc, #160]	; (800088c <set_sysclk_to_120+0x184>)
 80007ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ee:	6093      	str	r3, [r2, #8]
	// Set APB1 low speed prescaler - 1
	RCC->CFGR |= (1<<8);
 80007f0:	4b26      	ldr	r3, [pc, #152]	; (800088c <set_sysclk_to_120+0x184>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	4a25      	ldr	r2, [pc, #148]	; (800088c <set_sysclk_to_120+0x184>)
 80007f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007fa:	6093      	str	r3, [r2, #8]
	// Set APB2 high speed prescaler - 1
	RCC->CFGR |= (0<<11);
 80007fc:	4b23      	ldr	r3, [pc, #140]	; (800088c <set_sysclk_to_120+0x184>)
 80007fe:	4a23      	ldr	r2, [pc, #140]	; (800088c <set_sysclk_to_120+0x184>)
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	6093      	str	r3, [r2, #8]

	// Disable PLL
	RCC->CR &= ~(1U<<24);
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <set_sysclk_to_120+0x184>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a20      	ldr	r2, [pc, #128]	; (800088c <set_sysclk_to_120+0x184>)
 800080a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800080e:	6013      	str	r3, [r2, #0]
	// Wait for PLL to unlock
	while((RCC->CR & (1U<<25)));
 8000810:	bf00      	nop
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <set_sysclk_to_120+0x184>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f9      	bne.n	8000812 <set_sysclk_to_120+0x10a>
	// Set PLL dividers, and source to MSI
	RCC->PLLCFGR = (pllm <<4) | (plln<<8) | (pllr<<25) | (1 << 0);
 800081e:	9b07      	ldr	r3, [sp, #28]
 8000820:	011a      	lsls	r2, r3, #4
 8000822:	9b06      	ldr	r3, [sp, #24]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	431a      	orrs	r2, r3
 8000828:	9b05      	ldr	r3, [sp, #20]
 800082a:	065b      	lsls	r3, r3, #25
 800082c:	4313      	orrs	r3, r2
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <set_sysclk_to_120+0x184>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	60d3      	str	r3, [r2, #12]
	// Enable main PLL
	RCC->CR |= 1U<<24;
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <set_sysclk_to_120+0x184>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <set_sysclk_to_120+0x184>)
 800083c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000840:	6013      	str	r3, [r2, #0]
	// Set R EN bit
	RCC->PLLCFGR |= (1U << 24);
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <set_sysclk_to_120+0x184>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	4a11      	ldr	r2, [pc, #68]	; (800088c <set_sysclk_to_120+0x184>)
 8000848:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800084c:	60d3      	str	r3, [r2, #12]
	// Wait until PLL is ready
	while((RCC->CR & (1 << 25)));
 800084e:	bf00      	nop
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <set_sysclk_to_120+0x184>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1f9      	bne.n	8000850 <set_sysclk_to_120+0x148>

	// Flash: Prefetch enable, instruction cache enable, data cache enable, latency to 5 wait states (Depends on CPU clock, refer to table 12 in RM0432)
	FLASH->ACR = (1U << 8) | (1U << 9) | (1U << 10) | (5 << 0);
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <set_sysclk_to_120+0x198>)
 800085e:	f240 7205 	movw	r2, #1797	; 0x705
 8000862:	601a      	str	r2, [r3, #0]

	// Select main PLL as system clock source
	RCC->CFGR |= 3U<<0;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <set_sysclk_to_120+0x184>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	4a08      	ldr	r2, [pc, #32]	; (800088c <set_sysclk_to_120+0x184>)
 800086a:	f043 0303 	orr.w	r3, r3, #3
 800086e:	6093      	str	r3, [r2, #8]
	// Wait until main PLL is set as clock
	while (!((RCC->CFGR % 8) == 3));
 8000870:	bf00      	nop
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <set_sysclk_to_120+0x184>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	2b03      	cmp	r3, #3
 800087c:	d1f9      	bne.n	8000872 <set_sysclk_to_120+0x16a>

	// Update SystemCoreClock variable
	SystemCoreClock = 120000000;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <set_sysclk_to_120+0x19c>)
 8000880:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <set_sysclk_to_120+0x1a0>)
 8000882:	601a      	str	r2, [r3, #0]
}
 8000884:	bf00      	nop
 8000886:	b008      	add	sp, #32
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	40021090 	.word	0x40021090
 8000894:	4002100c 	.word	0x4002100c
 8000898:	40021008 	.word	0x40021008
 800089c:	40007000 	.word	0x40007000
 80008a0:	40022000 	.word	0x40022000
 80008a4:	20000000 	.word	0x20000000
 80008a8:	07270e00 	.word	0x07270e00

080008ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008b0:	f7ff ff04 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b4:	480c      	ldr	r0, [pc, #48]	; (80008e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b6:	490d      	ldr	r1, [pc, #52]	; (80008ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <LoopForever+0xe>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008cc:	4c0a      	ldr	r4, [pc, #40]	; (80008f8 <LoopForever+0x16>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008da:	f000 f811 	bl	8000900 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008de:	f7ff fcff 	bl	80002e0 <main>

080008e2 <LoopForever>:

LoopForever:
    b LoopForever
 80008e2:	e7fe      	b.n	80008e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008e4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008f0:	080012d8 	.word	0x080012d8
  ldr r2, =_sbss
 80008f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008f8:	20000898 	.word	0x20000898

080008fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC1_IRQHandler>
	...

08000900 <__libc_init_array>:
 8000900:	b570      	push	{r4, r5, r6, lr}
 8000902:	4d0d      	ldr	r5, [pc, #52]	; (8000938 <__libc_init_array+0x38>)
 8000904:	4c0d      	ldr	r4, [pc, #52]	; (800093c <__libc_init_array+0x3c>)
 8000906:	1b64      	subs	r4, r4, r5
 8000908:	10a4      	asrs	r4, r4, #2
 800090a:	2600      	movs	r6, #0
 800090c:	42a6      	cmp	r6, r4
 800090e:	d109      	bne.n	8000924 <__libc_init_array+0x24>
 8000910:	4d0b      	ldr	r5, [pc, #44]	; (8000940 <__libc_init_array+0x40>)
 8000912:	4c0c      	ldr	r4, [pc, #48]	; (8000944 <__libc_init_array+0x44>)
 8000914:	f000 fc94 	bl	8001240 <_init>
 8000918:	1b64      	subs	r4, r4, r5
 800091a:	10a4      	asrs	r4, r4, #2
 800091c:	2600      	movs	r6, #0
 800091e:	42a6      	cmp	r6, r4
 8000920:	d105      	bne.n	800092e <__libc_init_array+0x2e>
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	f855 3b04 	ldr.w	r3, [r5], #4
 8000928:	4798      	blx	r3
 800092a:	3601      	adds	r6, #1
 800092c:	e7ee      	b.n	800090c <__libc_init_array+0xc>
 800092e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000932:	4798      	blx	r3
 8000934:	3601      	adds	r6, #1
 8000936:	e7f2      	b.n	800091e <__libc_init_array+0x1e>
 8000938:	080012c8 	.word	0x080012c8
 800093c:	080012c8 	.word	0x080012c8
 8000940:	080012c8 	.word	0x080012c8
 8000944:	080012cc 	.word	0x080012cc

08000948 <memset>:
 8000948:	4402      	add	r2, r0
 800094a:	4603      	mov	r3, r0
 800094c:	4293      	cmp	r3, r2
 800094e:	d100      	bne.n	8000952 <memset+0xa>
 8000950:	4770      	bx	lr
 8000952:	f803 1b01 	strb.w	r1, [r3], #1
 8000956:	e7f9      	b.n	800094c <memset+0x4>

08000958 <siprintf>:
 8000958:	b40e      	push	{r1, r2, r3}
 800095a:	b500      	push	{lr}
 800095c:	b09c      	sub	sp, #112	; 0x70
 800095e:	ab1d      	add	r3, sp, #116	; 0x74
 8000960:	9002      	str	r0, [sp, #8]
 8000962:	9006      	str	r0, [sp, #24]
 8000964:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000968:	4809      	ldr	r0, [pc, #36]	; (8000990 <siprintf+0x38>)
 800096a:	9107      	str	r1, [sp, #28]
 800096c:	9104      	str	r1, [sp, #16]
 800096e:	4909      	ldr	r1, [pc, #36]	; (8000994 <siprintf+0x3c>)
 8000970:	f853 2b04 	ldr.w	r2, [r3], #4
 8000974:	9105      	str	r1, [sp, #20]
 8000976:	6800      	ldr	r0, [r0, #0]
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	a902      	add	r1, sp, #8
 800097c:	f000 f868 	bl	8000a50 <_svfiprintf_r>
 8000980:	9b02      	ldr	r3, [sp, #8]
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
 8000986:	b01c      	add	sp, #112	; 0x70
 8000988:	f85d eb04 	ldr.w	lr, [sp], #4
 800098c:	b003      	add	sp, #12
 800098e:	4770      	bx	lr
 8000990:	20000004 	.word	0x20000004
 8000994:	ffff0208 	.word	0xffff0208

08000998 <__retarget_lock_acquire_recursive>:
 8000998:	4770      	bx	lr

0800099a <__retarget_lock_release_recursive>:
 800099a:	4770      	bx	lr

0800099c <__ssputs_r>:
 800099c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a0:	688e      	ldr	r6, [r1, #8]
 80009a2:	461f      	mov	r7, r3
 80009a4:	42be      	cmp	r6, r7
 80009a6:	680b      	ldr	r3, [r1, #0]
 80009a8:	4682      	mov	sl, r0
 80009aa:	460c      	mov	r4, r1
 80009ac:	4690      	mov	r8, r2
 80009ae:	d82c      	bhi.n	8000a0a <__ssputs_r+0x6e>
 80009b0:	898a      	ldrh	r2, [r1, #12]
 80009b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80009b6:	d026      	beq.n	8000a06 <__ssputs_r+0x6a>
 80009b8:	6965      	ldr	r5, [r4, #20]
 80009ba:	6909      	ldr	r1, [r1, #16]
 80009bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80009c0:	eba3 0901 	sub.w	r9, r3, r1
 80009c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80009c8:	1c7b      	adds	r3, r7, #1
 80009ca:	444b      	add	r3, r9
 80009cc:	106d      	asrs	r5, r5, #1
 80009ce:	429d      	cmp	r5, r3
 80009d0:	bf38      	it	cc
 80009d2:	461d      	movcc	r5, r3
 80009d4:	0553      	lsls	r3, r2, #21
 80009d6:	d527      	bpl.n	8000a28 <__ssputs_r+0x8c>
 80009d8:	4629      	mov	r1, r5
 80009da:	f000 fb5b 	bl	8001094 <_malloc_r>
 80009de:	4606      	mov	r6, r0
 80009e0:	b360      	cbz	r0, 8000a3c <__ssputs_r+0xa0>
 80009e2:	6921      	ldr	r1, [r4, #16]
 80009e4:	464a      	mov	r2, r9
 80009e6:	f000 fac1 	bl	8000f6c <memcpy>
 80009ea:	89a3      	ldrh	r3, [r4, #12]
 80009ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	81a3      	strh	r3, [r4, #12]
 80009f6:	6126      	str	r6, [r4, #16]
 80009f8:	6165      	str	r5, [r4, #20]
 80009fa:	444e      	add	r6, r9
 80009fc:	eba5 0509 	sub.w	r5, r5, r9
 8000a00:	6026      	str	r6, [r4, #0]
 8000a02:	60a5      	str	r5, [r4, #8]
 8000a04:	463e      	mov	r6, r7
 8000a06:	42be      	cmp	r6, r7
 8000a08:	d900      	bls.n	8000a0c <__ssputs_r+0x70>
 8000a0a:	463e      	mov	r6, r7
 8000a0c:	6820      	ldr	r0, [r4, #0]
 8000a0e:	4632      	mov	r2, r6
 8000a10:	4641      	mov	r1, r8
 8000a12:	f000 fab9 	bl	8000f88 <memmove>
 8000a16:	68a3      	ldr	r3, [r4, #8]
 8000a18:	1b9b      	subs	r3, r3, r6
 8000a1a:	60a3      	str	r3, [r4, #8]
 8000a1c:	6823      	ldr	r3, [r4, #0]
 8000a1e:	4433      	add	r3, r6
 8000a20:	6023      	str	r3, [r4, #0]
 8000a22:	2000      	movs	r0, #0
 8000a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a28:	462a      	mov	r2, r5
 8000a2a:	f000 fba7 	bl	800117c <_realloc_r>
 8000a2e:	4606      	mov	r6, r0
 8000a30:	2800      	cmp	r0, #0
 8000a32:	d1e0      	bne.n	80009f6 <__ssputs_r+0x5a>
 8000a34:	6921      	ldr	r1, [r4, #16]
 8000a36:	4650      	mov	r0, sl
 8000a38:	f000 fac0 	bl	8000fbc <_free_r>
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	f8ca 3000 	str.w	r3, [sl]
 8000a42:	89a3      	ldrh	r3, [r4, #12]
 8000a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a48:	81a3      	strh	r3, [r4, #12]
 8000a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a4e:	e7e9      	b.n	8000a24 <__ssputs_r+0x88>

08000a50 <_svfiprintf_r>:
 8000a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a54:	4698      	mov	r8, r3
 8000a56:	898b      	ldrh	r3, [r1, #12]
 8000a58:	061b      	lsls	r3, r3, #24
 8000a5a:	b09d      	sub	sp, #116	; 0x74
 8000a5c:	4607      	mov	r7, r0
 8000a5e:	460d      	mov	r5, r1
 8000a60:	4614      	mov	r4, r2
 8000a62:	d50e      	bpl.n	8000a82 <_svfiprintf_r+0x32>
 8000a64:	690b      	ldr	r3, [r1, #16]
 8000a66:	b963      	cbnz	r3, 8000a82 <_svfiprintf_r+0x32>
 8000a68:	2140      	movs	r1, #64	; 0x40
 8000a6a:	f000 fb13 	bl	8001094 <_malloc_r>
 8000a6e:	6028      	str	r0, [r5, #0]
 8000a70:	6128      	str	r0, [r5, #16]
 8000a72:	b920      	cbnz	r0, 8000a7e <_svfiprintf_r+0x2e>
 8000a74:	230c      	movs	r3, #12
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a7c:	e0d0      	b.n	8000c20 <_svfiprintf_r+0x1d0>
 8000a7e:	2340      	movs	r3, #64	; 0x40
 8000a80:	616b      	str	r3, [r5, #20]
 8000a82:	2300      	movs	r3, #0
 8000a84:	9309      	str	r3, [sp, #36]	; 0x24
 8000a86:	2320      	movs	r3, #32
 8000a88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a90:	2330      	movs	r3, #48	; 0x30
 8000a92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000c38 <_svfiprintf_r+0x1e8>
 8000a96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a9a:	f04f 0901 	mov.w	r9, #1
 8000a9e:	4623      	mov	r3, r4
 8000aa0:	469a      	mov	sl, r3
 8000aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000aa6:	b10a      	cbz	r2, 8000aac <_svfiprintf_r+0x5c>
 8000aa8:	2a25      	cmp	r2, #37	; 0x25
 8000aaa:	d1f9      	bne.n	8000aa0 <_svfiprintf_r+0x50>
 8000aac:	ebba 0b04 	subs.w	fp, sl, r4
 8000ab0:	d00b      	beq.n	8000aca <_svfiprintf_r+0x7a>
 8000ab2:	465b      	mov	r3, fp
 8000ab4:	4622      	mov	r2, r4
 8000ab6:	4629      	mov	r1, r5
 8000ab8:	4638      	mov	r0, r7
 8000aba:	f7ff ff6f 	bl	800099c <__ssputs_r>
 8000abe:	3001      	adds	r0, #1
 8000ac0:	f000 80a9 	beq.w	8000c16 <_svfiprintf_r+0x1c6>
 8000ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ac6:	445a      	add	r2, fp
 8000ac8:	9209      	str	r2, [sp, #36]	; 0x24
 8000aca:	f89a 3000 	ldrb.w	r3, [sl]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f000 80a1 	beq.w	8000c16 <_svfiprintf_r+0x1c6>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ada:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ade:	f10a 0a01 	add.w	sl, sl, #1
 8000ae2:	9304      	str	r3, [sp, #16]
 8000ae4:	9307      	str	r3, [sp, #28]
 8000ae6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000aea:	931a      	str	r3, [sp, #104]	; 0x68
 8000aec:	4654      	mov	r4, sl
 8000aee:	2205      	movs	r2, #5
 8000af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000af4:	4850      	ldr	r0, [pc, #320]	; (8000c38 <_svfiprintf_r+0x1e8>)
 8000af6:	f7ff fb6b 	bl	80001d0 <memchr>
 8000afa:	9a04      	ldr	r2, [sp, #16]
 8000afc:	b9d8      	cbnz	r0, 8000b36 <_svfiprintf_r+0xe6>
 8000afe:	06d0      	lsls	r0, r2, #27
 8000b00:	bf44      	itt	mi
 8000b02:	2320      	movmi	r3, #32
 8000b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b08:	0711      	lsls	r1, r2, #28
 8000b0a:	bf44      	itt	mi
 8000b0c:	232b      	movmi	r3, #43	; 0x2b
 8000b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b12:	f89a 3000 	ldrb.w	r3, [sl]
 8000b16:	2b2a      	cmp	r3, #42	; 0x2a
 8000b18:	d015      	beq.n	8000b46 <_svfiprintf_r+0xf6>
 8000b1a:	9a07      	ldr	r2, [sp, #28]
 8000b1c:	4654      	mov	r4, sl
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f04f 0c0a 	mov.w	ip, #10
 8000b24:	4621      	mov	r1, r4
 8000b26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b2a:	3b30      	subs	r3, #48	; 0x30
 8000b2c:	2b09      	cmp	r3, #9
 8000b2e:	d94d      	bls.n	8000bcc <_svfiprintf_r+0x17c>
 8000b30:	b1b0      	cbz	r0, 8000b60 <_svfiprintf_r+0x110>
 8000b32:	9207      	str	r2, [sp, #28]
 8000b34:	e014      	b.n	8000b60 <_svfiprintf_r+0x110>
 8000b36:	eba0 0308 	sub.w	r3, r0, r8
 8000b3a:	fa09 f303 	lsl.w	r3, r9, r3
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	9304      	str	r3, [sp, #16]
 8000b42:	46a2      	mov	sl, r4
 8000b44:	e7d2      	b.n	8000aec <_svfiprintf_r+0x9c>
 8000b46:	9b03      	ldr	r3, [sp, #12]
 8000b48:	1d19      	adds	r1, r3, #4
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	9103      	str	r1, [sp, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	bfbb      	ittet	lt
 8000b52:	425b      	neglt	r3, r3
 8000b54:	f042 0202 	orrlt.w	r2, r2, #2
 8000b58:	9307      	strge	r3, [sp, #28]
 8000b5a:	9307      	strlt	r3, [sp, #28]
 8000b5c:	bfb8      	it	lt
 8000b5e:	9204      	strlt	r2, [sp, #16]
 8000b60:	7823      	ldrb	r3, [r4, #0]
 8000b62:	2b2e      	cmp	r3, #46	; 0x2e
 8000b64:	d10c      	bne.n	8000b80 <_svfiprintf_r+0x130>
 8000b66:	7863      	ldrb	r3, [r4, #1]
 8000b68:	2b2a      	cmp	r3, #42	; 0x2a
 8000b6a:	d134      	bne.n	8000bd6 <_svfiprintf_r+0x186>
 8000b6c:	9b03      	ldr	r3, [sp, #12]
 8000b6e:	1d1a      	adds	r2, r3, #4
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	9203      	str	r2, [sp, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bfb8      	it	lt
 8000b78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000b7c:	3402      	adds	r4, #2
 8000b7e:	9305      	str	r3, [sp, #20]
 8000b80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000c48 <_svfiprintf_r+0x1f8>
 8000b84:	7821      	ldrb	r1, [r4, #0]
 8000b86:	2203      	movs	r2, #3
 8000b88:	4650      	mov	r0, sl
 8000b8a:	f7ff fb21 	bl	80001d0 <memchr>
 8000b8e:	b138      	cbz	r0, 8000ba0 <_svfiprintf_r+0x150>
 8000b90:	9b04      	ldr	r3, [sp, #16]
 8000b92:	eba0 000a 	sub.w	r0, r0, sl
 8000b96:	2240      	movs	r2, #64	; 0x40
 8000b98:	4082      	lsls	r2, r0
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	3401      	adds	r4, #1
 8000b9e:	9304      	str	r3, [sp, #16]
 8000ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ba4:	4825      	ldr	r0, [pc, #148]	; (8000c3c <_svfiprintf_r+0x1ec>)
 8000ba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000baa:	2206      	movs	r2, #6
 8000bac:	f7ff fb10 	bl	80001d0 <memchr>
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	d038      	beq.n	8000c26 <_svfiprintf_r+0x1d6>
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <_svfiprintf_r+0x1f0>)
 8000bb6:	bb1b      	cbnz	r3, 8000c00 <_svfiprintf_r+0x1b0>
 8000bb8:	9b03      	ldr	r3, [sp, #12]
 8000bba:	3307      	adds	r3, #7
 8000bbc:	f023 0307 	bic.w	r3, r3, #7
 8000bc0:	3308      	adds	r3, #8
 8000bc2:	9303      	str	r3, [sp, #12]
 8000bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000bc6:	4433      	add	r3, r6
 8000bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8000bca:	e768      	b.n	8000a9e <_svfiprintf_r+0x4e>
 8000bcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8000bd0:	460c      	mov	r4, r1
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	e7a6      	b.n	8000b24 <_svfiprintf_r+0xd4>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	3401      	adds	r4, #1
 8000bda:	9305      	str	r3, [sp, #20]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f04f 0c0a 	mov.w	ip, #10
 8000be2:	4620      	mov	r0, r4
 8000be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000be8:	3a30      	subs	r2, #48	; 0x30
 8000bea:	2a09      	cmp	r2, #9
 8000bec:	d903      	bls.n	8000bf6 <_svfiprintf_r+0x1a6>
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0c6      	beq.n	8000b80 <_svfiprintf_r+0x130>
 8000bf2:	9105      	str	r1, [sp, #20]
 8000bf4:	e7c4      	b.n	8000b80 <_svfiprintf_r+0x130>
 8000bf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e7f0      	b.n	8000be2 <_svfiprintf_r+0x192>
 8000c00:	ab03      	add	r3, sp, #12
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	462a      	mov	r2, r5
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <_svfiprintf_r+0x1f4>)
 8000c08:	a904      	add	r1, sp, #16
 8000c0a:	4638      	mov	r0, r7
 8000c0c:	f3af 8000 	nop.w
 8000c10:	1c42      	adds	r2, r0, #1
 8000c12:	4606      	mov	r6, r0
 8000c14:	d1d6      	bne.n	8000bc4 <_svfiprintf_r+0x174>
 8000c16:	89ab      	ldrh	r3, [r5, #12]
 8000c18:	065b      	lsls	r3, r3, #25
 8000c1a:	f53f af2d 	bmi.w	8000a78 <_svfiprintf_r+0x28>
 8000c1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c20:	b01d      	add	sp, #116	; 0x74
 8000c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c26:	ab03      	add	r3, sp, #12
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	462a      	mov	r2, r5
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <_svfiprintf_r+0x1f4>)
 8000c2e:	a904      	add	r1, sp, #16
 8000c30:	4638      	mov	r0, r7
 8000c32:	f000 f879 	bl	8000d28 <_printf_i>
 8000c36:	e7eb      	b.n	8000c10 <_svfiprintf_r+0x1c0>
 8000c38:	08001291 	.word	0x08001291
 8000c3c:	0800129b 	.word	0x0800129b
 8000c40:	00000000 	.word	0x00000000
 8000c44:	0800099d 	.word	0x0800099d
 8000c48:	08001297 	.word	0x08001297

08000c4c <_printf_common>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	4616      	mov	r6, r2
 8000c52:	4699      	mov	r9, r3
 8000c54:	688a      	ldr	r2, [r1, #8]
 8000c56:	690b      	ldr	r3, [r1, #16]
 8000c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	bfb8      	it	lt
 8000c60:	4613      	movlt	r3, r2
 8000c62:	6033      	str	r3, [r6, #0]
 8000c64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c68:	4607      	mov	r7, r0
 8000c6a:	460c      	mov	r4, r1
 8000c6c:	b10a      	cbz	r2, 8000c72 <_printf_common+0x26>
 8000c6e:	3301      	adds	r3, #1
 8000c70:	6033      	str	r3, [r6, #0]
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	0699      	lsls	r1, r3, #26
 8000c76:	bf42      	ittt	mi
 8000c78:	6833      	ldrmi	r3, [r6, #0]
 8000c7a:	3302      	addmi	r3, #2
 8000c7c:	6033      	strmi	r3, [r6, #0]
 8000c7e:	6825      	ldr	r5, [r4, #0]
 8000c80:	f015 0506 	ands.w	r5, r5, #6
 8000c84:	d106      	bne.n	8000c94 <_printf_common+0x48>
 8000c86:	f104 0a19 	add.w	sl, r4, #25
 8000c8a:	68e3      	ldr	r3, [r4, #12]
 8000c8c:	6832      	ldr	r2, [r6, #0]
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	dc26      	bgt.n	8000ce2 <_printf_common+0x96>
 8000c94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c98:	1e13      	subs	r3, r2, #0
 8000c9a:	6822      	ldr	r2, [r4, #0]
 8000c9c:	bf18      	it	ne
 8000c9e:	2301      	movne	r3, #1
 8000ca0:	0692      	lsls	r2, r2, #26
 8000ca2:	d42b      	bmi.n	8000cfc <_printf_common+0xb0>
 8000ca4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ca8:	4649      	mov	r1, r9
 8000caa:	4638      	mov	r0, r7
 8000cac:	47c0      	blx	r8
 8000cae:	3001      	adds	r0, #1
 8000cb0:	d01e      	beq.n	8000cf0 <_printf_common+0xa4>
 8000cb2:	6823      	ldr	r3, [r4, #0]
 8000cb4:	6922      	ldr	r2, [r4, #16]
 8000cb6:	f003 0306 	and.w	r3, r3, #6
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf02      	ittt	eq
 8000cbe:	68e5      	ldreq	r5, [r4, #12]
 8000cc0:	6833      	ldreq	r3, [r6, #0]
 8000cc2:	1aed      	subeq	r5, r5, r3
 8000cc4:	68a3      	ldr	r3, [r4, #8]
 8000cc6:	bf0c      	ite	eq
 8000cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ccc:	2500      	movne	r5, #0
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	bfc4      	itt	gt
 8000cd2:	1a9b      	subgt	r3, r3, r2
 8000cd4:	18ed      	addgt	r5, r5, r3
 8000cd6:	2600      	movs	r6, #0
 8000cd8:	341a      	adds	r4, #26
 8000cda:	42b5      	cmp	r5, r6
 8000cdc:	d11a      	bne.n	8000d14 <_printf_common+0xc8>
 8000cde:	2000      	movs	r0, #0
 8000ce0:	e008      	b.n	8000cf4 <_printf_common+0xa8>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	4652      	mov	r2, sl
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	4638      	mov	r0, r7
 8000cea:	47c0      	blx	r8
 8000cec:	3001      	adds	r0, #1
 8000cee:	d103      	bne.n	8000cf8 <_printf_common+0xac>
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf8:	3501      	adds	r5, #1
 8000cfa:	e7c6      	b.n	8000c8a <_printf_common+0x3e>
 8000cfc:	18e1      	adds	r1, r4, r3
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	2030      	movs	r0, #48	; 0x30
 8000d02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d06:	4422      	add	r2, r4
 8000d08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000d0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000d10:	3302      	adds	r3, #2
 8000d12:	e7c7      	b.n	8000ca4 <_printf_common+0x58>
 8000d14:	2301      	movs	r3, #1
 8000d16:	4622      	mov	r2, r4
 8000d18:	4649      	mov	r1, r9
 8000d1a:	4638      	mov	r0, r7
 8000d1c:	47c0      	blx	r8
 8000d1e:	3001      	adds	r0, #1
 8000d20:	d0e6      	beq.n	8000cf0 <_printf_common+0xa4>
 8000d22:	3601      	adds	r6, #1
 8000d24:	e7d9      	b.n	8000cda <_printf_common+0x8e>
	...

08000d28 <_printf_i>:
 8000d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	7e0f      	ldrb	r7, [r1, #24]
 8000d2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d30:	2f78      	cmp	r7, #120	; 0x78
 8000d32:	4691      	mov	r9, r2
 8000d34:	4680      	mov	r8, r0
 8000d36:	460c      	mov	r4, r1
 8000d38:	469a      	mov	sl, r3
 8000d3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000d3e:	d807      	bhi.n	8000d50 <_printf_i+0x28>
 8000d40:	2f62      	cmp	r7, #98	; 0x62
 8000d42:	d80a      	bhi.n	8000d5a <_printf_i+0x32>
 8000d44:	2f00      	cmp	r7, #0
 8000d46:	f000 80d4 	beq.w	8000ef2 <_printf_i+0x1ca>
 8000d4a:	2f58      	cmp	r7, #88	; 0x58
 8000d4c:	f000 80c0 	beq.w	8000ed0 <_printf_i+0x1a8>
 8000d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d58:	e03a      	b.n	8000dd0 <_printf_i+0xa8>
 8000d5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d5e:	2b15      	cmp	r3, #21
 8000d60:	d8f6      	bhi.n	8000d50 <_printf_i+0x28>
 8000d62:	a101      	add	r1, pc, #4	; (adr r1, 8000d68 <_printf_i+0x40>)
 8000d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d68:	08000dc1 	.word	0x08000dc1
 8000d6c:	08000dd5 	.word	0x08000dd5
 8000d70:	08000d51 	.word	0x08000d51
 8000d74:	08000d51 	.word	0x08000d51
 8000d78:	08000d51 	.word	0x08000d51
 8000d7c:	08000d51 	.word	0x08000d51
 8000d80:	08000dd5 	.word	0x08000dd5
 8000d84:	08000d51 	.word	0x08000d51
 8000d88:	08000d51 	.word	0x08000d51
 8000d8c:	08000d51 	.word	0x08000d51
 8000d90:	08000d51 	.word	0x08000d51
 8000d94:	08000ed9 	.word	0x08000ed9
 8000d98:	08000e01 	.word	0x08000e01
 8000d9c:	08000e93 	.word	0x08000e93
 8000da0:	08000d51 	.word	0x08000d51
 8000da4:	08000d51 	.word	0x08000d51
 8000da8:	08000efb 	.word	0x08000efb
 8000dac:	08000d51 	.word	0x08000d51
 8000db0:	08000e01 	.word	0x08000e01
 8000db4:	08000d51 	.word	0x08000d51
 8000db8:	08000d51 	.word	0x08000d51
 8000dbc:	08000e9b 	.word	0x08000e9b
 8000dc0:	682b      	ldr	r3, [r5, #0]
 8000dc2:	1d1a      	adds	r2, r3, #4
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	602a      	str	r2, [r5, #0]
 8000dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e09f      	b.n	8000f14 <_printf_i+0x1ec>
 8000dd4:	6820      	ldr	r0, [r4, #0]
 8000dd6:	682b      	ldr	r3, [r5, #0]
 8000dd8:	0607      	lsls	r7, r0, #24
 8000dda:	f103 0104 	add.w	r1, r3, #4
 8000dde:	6029      	str	r1, [r5, #0]
 8000de0:	d501      	bpl.n	8000de6 <_printf_i+0xbe>
 8000de2:	681e      	ldr	r6, [r3, #0]
 8000de4:	e003      	b.n	8000dee <_printf_i+0xc6>
 8000de6:	0646      	lsls	r6, r0, #25
 8000de8:	d5fb      	bpl.n	8000de2 <_printf_i+0xba>
 8000dea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	da03      	bge.n	8000dfa <_printf_i+0xd2>
 8000df2:	232d      	movs	r3, #45	; 0x2d
 8000df4:	4276      	negs	r6, r6
 8000df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000dfa:	485a      	ldr	r0, [pc, #360]	; (8000f64 <_printf_i+0x23c>)
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	e012      	b.n	8000e26 <_printf_i+0xfe>
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	6820      	ldr	r0, [r4, #0]
 8000e04:	1d19      	adds	r1, r3, #4
 8000e06:	6029      	str	r1, [r5, #0]
 8000e08:	0605      	lsls	r5, r0, #24
 8000e0a:	d501      	bpl.n	8000e10 <_printf_i+0xe8>
 8000e0c:	681e      	ldr	r6, [r3, #0]
 8000e0e:	e002      	b.n	8000e16 <_printf_i+0xee>
 8000e10:	0641      	lsls	r1, r0, #25
 8000e12:	d5fb      	bpl.n	8000e0c <_printf_i+0xe4>
 8000e14:	881e      	ldrh	r6, [r3, #0]
 8000e16:	4853      	ldr	r0, [pc, #332]	; (8000f64 <_printf_i+0x23c>)
 8000e18:	2f6f      	cmp	r7, #111	; 0x6f
 8000e1a:	bf0c      	ite	eq
 8000e1c:	2308      	moveq	r3, #8
 8000e1e:	230a      	movne	r3, #10
 8000e20:	2100      	movs	r1, #0
 8000e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e26:	6865      	ldr	r5, [r4, #4]
 8000e28:	60a5      	str	r5, [r4, #8]
 8000e2a:	2d00      	cmp	r5, #0
 8000e2c:	bfa2      	ittt	ge
 8000e2e:	6821      	ldrge	r1, [r4, #0]
 8000e30:	f021 0104 	bicge.w	r1, r1, #4
 8000e34:	6021      	strge	r1, [r4, #0]
 8000e36:	b90e      	cbnz	r6, 8000e3c <_printf_i+0x114>
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d04b      	beq.n	8000ed4 <_printf_i+0x1ac>
 8000e3c:	4615      	mov	r5, r2
 8000e3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8000e42:	fb03 6711 	mls	r7, r3, r1, r6
 8000e46:	5dc7      	ldrb	r7, [r0, r7]
 8000e48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000e4c:	4637      	mov	r7, r6
 8000e4e:	42bb      	cmp	r3, r7
 8000e50:	460e      	mov	r6, r1
 8000e52:	d9f4      	bls.n	8000e3e <_printf_i+0x116>
 8000e54:	2b08      	cmp	r3, #8
 8000e56:	d10b      	bne.n	8000e70 <_printf_i+0x148>
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	07de      	lsls	r6, r3, #31
 8000e5c:	d508      	bpl.n	8000e70 <_printf_i+0x148>
 8000e5e:	6923      	ldr	r3, [r4, #16]
 8000e60:	6861      	ldr	r1, [r4, #4]
 8000e62:	4299      	cmp	r1, r3
 8000e64:	bfde      	ittt	le
 8000e66:	2330      	movle	r3, #48	; 0x30
 8000e68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000e6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000e70:	1b52      	subs	r2, r2, r5
 8000e72:	6122      	str	r2, [r4, #16]
 8000e74:	f8cd a000 	str.w	sl, [sp]
 8000e78:	464b      	mov	r3, r9
 8000e7a:	aa03      	add	r2, sp, #12
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	4640      	mov	r0, r8
 8000e80:	f7ff fee4 	bl	8000c4c <_printf_common>
 8000e84:	3001      	adds	r0, #1
 8000e86:	d14a      	bne.n	8000f1e <_printf_i+0x1f6>
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e8c:	b004      	add	sp, #16
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	6023      	str	r3, [r4, #0]
 8000e9a:	4833      	ldr	r0, [pc, #204]	; (8000f68 <_printf_i+0x240>)
 8000e9c:	2778      	movs	r7, #120	; 0x78
 8000e9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	6829      	ldr	r1, [r5, #0]
 8000ea6:	061f      	lsls	r7, r3, #24
 8000ea8:	f851 6b04 	ldr.w	r6, [r1], #4
 8000eac:	d402      	bmi.n	8000eb4 <_printf_i+0x18c>
 8000eae:	065f      	lsls	r7, r3, #25
 8000eb0:	bf48      	it	mi
 8000eb2:	b2b6      	uxthmi	r6, r6
 8000eb4:	07df      	lsls	r7, r3, #31
 8000eb6:	bf48      	it	mi
 8000eb8:	f043 0320 	orrmi.w	r3, r3, #32
 8000ebc:	6029      	str	r1, [r5, #0]
 8000ebe:	bf48      	it	mi
 8000ec0:	6023      	strmi	r3, [r4, #0]
 8000ec2:	b91e      	cbnz	r6, 8000ecc <_printf_i+0x1a4>
 8000ec4:	6823      	ldr	r3, [r4, #0]
 8000ec6:	f023 0320 	bic.w	r3, r3, #32
 8000eca:	6023      	str	r3, [r4, #0]
 8000ecc:	2310      	movs	r3, #16
 8000ece:	e7a7      	b.n	8000e20 <_printf_i+0xf8>
 8000ed0:	4824      	ldr	r0, [pc, #144]	; (8000f64 <_printf_i+0x23c>)
 8000ed2:	e7e4      	b.n	8000e9e <_printf_i+0x176>
 8000ed4:	4615      	mov	r5, r2
 8000ed6:	e7bd      	b.n	8000e54 <_printf_i+0x12c>
 8000ed8:	682b      	ldr	r3, [r5, #0]
 8000eda:	6826      	ldr	r6, [r4, #0]
 8000edc:	6961      	ldr	r1, [r4, #20]
 8000ede:	1d18      	adds	r0, r3, #4
 8000ee0:	6028      	str	r0, [r5, #0]
 8000ee2:	0635      	lsls	r5, r6, #24
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	d501      	bpl.n	8000eec <_printf_i+0x1c4>
 8000ee8:	6019      	str	r1, [r3, #0]
 8000eea:	e002      	b.n	8000ef2 <_printf_i+0x1ca>
 8000eec:	0670      	lsls	r0, r6, #25
 8000eee:	d5fb      	bpl.n	8000ee8 <_printf_i+0x1c0>
 8000ef0:	8019      	strh	r1, [r3, #0]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	6123      	str	r3, [r4, #16]
 8000ef6:	4615      	mov	r5, r2
 8000ef8:	e7bc      	b.n	8000e74 <_printf_i+0x14c>
 8000efa:	682b      	ldr	r3, [r5, #0]
 8000efc:	1d1a      	adds	r2, r3, #4
 8000efe:	602a      	str	r2, [r5, #0]
 8000f00:	681d      	ldr	r5, [r3, #0]
 8000f02:	6862      	ldr	r2, [r4, #4]
 8000f04:	2100      	movs	r1, #0
 8000f06:	4628      	mov	r0, r5
 8000f08:	f7ff f962 	bl	80001d0 <memchr>
 8000f0c:	b108      	cbz	r0, 8000f12 <_printf_i+0x1ea>
 8000f0e:	1b40      	subs	r0, r0, r5
 8000f10:	6060      	str	r0, [r4, #4]
 8000f12:	6863      	ldr	r3, [r4, #4]
 8000f14:	6123      	str	r3, [r4, #16]
 8000f16:	2300      	movs	r3, #0
 8000f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f1c:	e7aa      	b.n	8000e74 <_printf_i+0x14c>
 8000f1e:	6923      	ldr	r3, [r4, #16]
 8000f20:	462a      	mov	r2, r5
 8000f22:	4649      	mov	r1, r9
 8000f24:	4640      	mov	r0, r8
 8000f26:	47d0      	blx	sl
 8000f28:	3001      	adds	r0, #1
 8000f2a:	d0ad      	beq.n	8000e88 <_printf_i+0x160>
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	079b      	lsls	r3, r3, #30
 8000f30:	d413      	bmi.n	8000f5a <_printf_i+0x232>
 8000f32:	68e0      	ldr	r0, [r4, #12]
 8000f34:	9b03      	ldr	r3, [sp, #12]
 8000f36:	4298      	cmp	r0, r3
 8000f38:	bfb8      	it	lt
 8000f3a:	4618      	movlt	r0, r3
 8000f3c:	e7a6      	b.n	8000e8c <_printf_i+0x164>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	4632      	mov	r2, r6
 8000f42:	4649      	mov	r1, r9
 8000f44:	4640      	mov	r0, r8
 8000f46:	47d0      	blx	sl
 8000f48:	3001      	adds	r0, #1
 8000f4a:	d09d      	beq.n	8000e88 <_printf_i+0x160>
 8000f4c:	3501      	adds	r5, #1
 8000f4e:	68e3      	ldr	r3, [r4, #12]
 8000f50:	9903      	ldr	r1, [sp, #12]
 8000f52:	1a5b      	subs	r3, r3, r1
 8000f54:	42ab      	cmp	r3, r5
 8000f56:	dcf2      	bgt.n	8000f3e <_printf_i+0x216>
 8000f58:	e7eb      	b.n	8000f32 <_printf_i+0x20a>
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	f104 0619 	add.w	r6, r4, #25
 8000f60:	e7f5      	b.n	8000f4e <_printf_i+0x226>
 8000f62:	bf00      	nop
 8000f64:	080012a2 	.word	0x080012a2
 8000f68:	080012b3 	.word	0x080012b3

08000f6c <memcpy>:
 8000f6c:	440a      	add	r2, r1
 8000f6e:	4291      	cmp	r1, r2
 8000f70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f74:	d100      	bne.n	8000f78 <memcpy+0xc>
 8000f76:	4770      	bx	lr
 8000f78:	b510      	push	{r4, lr}
 8000f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d1f9      	bne.n	8000f7a <memcpy+0xe>
 8000f86:	bd10      	pop	{r4, pc}

08000f88 <memmove>:
 8000f88:	4288      	cmp	r0, r1
 8000f8a:	b510      	push	{r4, lr}
 8000f8c:	eb01 0402 	add.w	r4, r1, r2
 8000f90:	d902      	bls.n	8000f98 <memmove+0x10>
 8000f92:	4284      	cmp	r4, r0
 8000f94:	4623      	mov	r3, r4
 8000f96:	d807      	bhi.n	8000fa8 <memmove+0x20>
 8000f98:	1e43      	subs	r3, r0, #1
 8000f9a:	42a1      	cmp	r1, r4
 8000f9c:	d008      	beq.n	8000fb0 <memmove+0x28>
 8000f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000fa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000fa6:	e7f8      	b.n	8000f9a <memmove+0x12>
 8000fa8:	4402      	add	r2, r0
 8000faa:	4601      	mov	r1, r0
 8000fac:	428a      	cmp	r2, r1
 8000fae:	d100      	bne.n	8000fb2 <memmove+0x2a>
 8000fb0:	bd10      	pop	{r4, pc}
 8000fb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000fb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000fba:	e7f7      	b.n	8000fac <memmove+0x24>

08000fbc <_free_r>:
 8000fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000fbe:	2900      	cmp	r1, #0
 8000fc0:	d044      	beq.n	800104c <_free_r+0x90>
 8000fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fc6:	9001      	str	r0, [sp, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f1a1 0404 	sub.w	r4, r1, #4
 8000fce:	bfb8      	it	lt
 8000fd0:	18e4      	addlt	r4, r4, r3
 8000fd2:	f000 f913 	bl	80011fc <__malloc_lock>
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <_free_r+0x94>)
 8000fd8:	9801      	ldr	r0, [sp, #4]
 8000fda:	6813      	ldr	r3, [r2, #0]
 8000fdc:	b933      	cbnz	r3, 8000fec <_free_r+0x30>
 8000fde:	6063      	str	r3, [r4, #4]
 8000fe0:	6014      	str	r4, [r2, #0]
 8000fe2:	b003      	add	sp, #12
 8000fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000fe8:	f000 b90e 	b.w	8001208 <__malloc_unlock>
 8000fec:	42a3      	cmp	r3, r4
 8000fee:	d908      	bls.n	8001002 <_free_r+0x46>
 8000ff0:	6825      	ldr	r5, [r4, #0]
 8000ff2:	1961      	adds	r1, r4, r5
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf01      	itttt	eq
 8000ff8:	6819      	ldreq	r1, [r3, #0]
 8000ffa:	685b      	ldreq	r3, [r3, #4]
 8000ffc:	1949      	addeq	r1, r1, r5
 8000ffe:	6021      	streq	r1, [r4, #0]
 8001000:	e7ed      	b.n	8000fde <_free_r+0x22>
 8001002:	461a      	mov	r2, r3
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	b10b      	cbz	r3, 800100c <_free_r+0x50>
 8001008:	42a3      	cmp	r3, r4
 800100a:	d9fa      	bls.n	8001002 <_free_r+0x46>
 800100c:	6811      	ldr	r1, [r2, #0]
 800100e:	1855      	adds	r5, r2, r1
 8001010:	42a5      	cmp	r5, r4
 8001012:	d10b      	bne.n	800102c <_free_r+0x70>
 8001014:	6824      	ldr	r4, [r4, #0]
 8001016:	4421      	add	r1, r4
 8001018:	1854      	adds	r4, r2, r1
 800101a:	42a3      	cmp	r3, r4
 800101c:	6011      	str	r1, [r2, #0]
 800101e:	d1e0      	bne.n	8000fe2 <_free_r+0x26>
 8001020:	681c      	ldr	r4, [r3, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	6053      	str	r3, [r2, #4]
 8001026:	440c      	add	r4, r1
 8001028:	6014      	str	r4, [r2, #0]
 800102a:	e7da      	b.n	8000fe2 <_free_r+0x26>
 800102c:	d902      	bls.n	8001034 <_free_r+0x78>
 800102e:	230c      	movs	r3, #12
 8001030:	6003      	str	r3, [r0, #0]
 8001032:	e7d6      	b.n	8000fe2 <_free_r+0x26>
 8001034:	6825      	ldr	r5, [r4, #0]
 8001036:	1961      	adds	r1, r4, r5
 8001038:	428b      	cmp	r3, r1
 800103a:	bf04      	itt	eq
 800103c:	6819      	ldreq	r1, [r3, #0]
 800103e:	685b      	ldreq	r3, [r3, #4]
 8001040:	6063      	str	r3, [r4, #4]
 8001042:	bf04      	itt	eq
 8001044:	1949      	addeq	r1, r1, r5
 8001046:	6021      	streq	r1, [r4, #0]
 8001048:	6054      	str	r4, [r2, #4]
 800104a:	e7ca      	b.n	8000fe2 <_free_r+0x26>
 800104c:	b003      	add	sp, #12
 800104e:	bd30      	pop	{r4, r5, pc}
 8001050:	20000888 	.word	0x20000888

08001054 <sbrk_aligned>:
 8001054:	b570      	push	{r4, r5, r6, lr}
 8001056:	4e0e      	ldr	r6, [pc, #56]	; (8001090 <sbrk_aligned+0x3c>)
 8001058:	460c      	mov	r4, r1
 800105a:	6831      	ldr	r1, [r6, #0]
 800105c:	4605      	mov	r5, r0
 800105e:	b911      	cbnz	r1, 8001066 <sbrk_aligned+0x12>
 8001060:	f000 f8bc 	bl	80011dc <_sbrk_r>
 8001064:	6030      	str	r0, [r6, #0]
 8001066:	4621      	mov	r1, r4
 8001068:	4628      	mov	r0, r5
 800106a:	f000 f8b7 	bl	80011dc <_sbrk_r>
 800106e:	1c43      	adds	r3, r0, #1
 8001070:	d00a      	beq.n	8001088 <sbrk_aligned+0x34>
 8001072:	1cc4      	adds	r4, r0, #3
 8001074:	f024 0403 	bic.w	r4, r4, #3
 8001078:	42a0      	cmp	r0, r4
 800107a:	d007      	beq.n	800108c <sbrk_aligned+0x38>
 800107c:	1a21      	subs	r1, r4, r0
 800107e:	4628      	mov	r0, r5
 8001080:	f000 f8ac 	bl	80011dc <_sbrk_r>
 8001084:	3001      	adds	r0, #1
 8001086:	d101      	bne.n	800108c <sbrk_aligned+0x38>
 8001088:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800108c:	4620      	mov	r0, r4
 800108e:	bd70      	pop	{r4, r5, r6, pc}
 8001090:	2000088c 	.word	0x2000088c

08001094 <_malloc_r>:
 8001094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001098:	1ccd      	adds	r5, r1, #3
 800109a:	f025 0503 	bic.w	r5, r5, #3
 800109e:	3508      	adds	r5, #8
 80010a0:	2d0c      	cmp	r5, #12
 80010a2:	bf38      	it	cc
 80010a4:	250c      	movcc	r5, #12
 80010a6:	2d00      	cmp	r5, #0
 80010a8:	4607      	mov	r7, r0
 80010aa:	db01      	blt.n	80010b0 <_malloc_r+0x1c>
 80010ac:	42a9      	cmp	r1, r5
 80010ae:	d905      	bls.n	80010bc <_malloc_r+0x28>
 80010b0:	230c      	movs	r3, #12
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	2600      	movs	r6, #0
 80010b6:	4630      	mov	r0, r6
 80010b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010bc:	4e2e      	ldr	r6, [pc, #184]	; (8001178 <_malloc_r+0xe4>)
 80010be:	f000 f89d 	bl	80011fc <__malloc_lock>
 80010c2:	6833      	ldr	r3, [r6, #0]
 80010c4:	461c      	mov	r4, r3
 80010c6:	bb34      	cbnz	r4, 8001116 <_malloc_r+0x82>
 80010c8:	4629      	mov	r1, r5
 80010ca:	4638      	mov	r0, r7
 80010cc:	f7ff ffc2 	bl	8001054 <sbrk_aligned>
 80010d0:	1c43      	adds	r3, r0, #1
 80010d2:	4604      	mov	r4, r0
 80010d4:	d14d      	bne.n	8001172 <_malloc_r+0xde>
 80010d6:	6834      	ldr	r4, [r6, #0]
 80010d8:	4626      	mov	r6, r4
 80010da:	2e00      	cmp	r6, #0
 80010dc:	d140      	bne.n	8001160 <_malloc_r+0xcc>
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	4631      	mov	r1, r6
 80010e2:	4638      	mov	r0, r7
 80010e4:	eb04 0803 	add.w	r8, r4, r3
 80010e8:	f000 f878 	bl	80011dc <_sbrk_r>
 80010ec:	4580      	cmp	r8, r0
 80010ee:	d13a      	bne.n	8001166 <_malloc_r+0xd2>
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	3503      	adds	r5, #3
 80010f4:	1aed      	subs	r5, r5, r3
 80010f6:	f025 0503 	bic.w	r5, r5, #3
 80010fa:	3508      	adds	r5, #8
 80010fc:	2d0c      	cmp	r5, #12
 80010fe:	bf38      	it	cc
 8001100:	250c      	movcc	r5, #12
 8001102:	4629      	mov	r1, r5
 8001104:	4638      	mov	r0, r7
 8001106:	f7ff ffa5 	bl	8001054 <sbrk_aligned>
 800110a:	3001      	adds	r0, #1
 800110c:	d02b      	beq.n	8001166 <_malloc_r+0xd2>
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	442b      	add	r3, r5
 8001112:	6023      	str	r3, [r4, #0]
 8001114:	e00e      	b.n	8001134 <_malloc_r+0xa0>
 8001116:	6822      	ldr	r2, [r4, #0]
 8001118:	1b52      	subs	r2, r2, r5
 800111a:	d41e      	bmi.n	800115a <_malloc_r+0xc6>
 800111c:	2a0b      	cmp	r2, #11
 800111e:	d916      	bls.n	800114e <_malloc_r+0xba>
 8001120:	1961      	adds	r1, r4, r5
 8001122:	42a3      	cmp	r3, r4
 8001124:	6025      	str	r5, [r4, #0]
 8001126:	bf18      	it	ne
 8001128:	6059      	strne	r1, [r3, #4]
 800112a:	6863      	ldr	r3, [r4, #4]
 800112c:	bf08      	it	eq
 800112e:	6031      	streq	r1, [r6, #0]
 8001130:	5162      	str	r2, [r4, r5]
 8001132:	604b      	str	r3, [r1, #4]
 8001134:	4638      	mov	r0, r7
 8001136:	f104 060b 	add.w	r6, r4, #11
 800113a:	f000 f865 	bl	8001208 <__malloc_unlock>
 800113e:	f026 0607 	bic.w	r6, r6, #7
 8001142:	1d23      	adds	r3, r4, #4
 8001144:	1af2      	subs	r2, r6, r3
 8001146:	d0b6      	beq.n	80010b6 <_malloc_r+0x22>
 8001148:	1b9b      	subs	r3, r3, r6
 800114a:	50a3      	str	r3, [r4, r2]
 800114c:	e7b3      	b.n	80010b6 <_malloc_r+0x22>
 800114e:	6862      	ldr	r2, [r4, #4]
 8001150:	42a3      	cmp	r3, r4
 8001152:	bf0c      	ite	eq
 8001154:	6032      	streq	r2, [r6, #0]
 8001156:	605a      	strne	r2, [r3, #4]
 8001158:	e7ec      	b.n	8001134 <_malloc_r+0xa0>
 800115a:	4623      	mov	r3, r4
 800115c:	6864      	ldr	r4, [r4, #4]
 800115e:	e7b2      	b.n	80010c6 <_malloc_r+0x32>
 8001160:	4634      	mov	r4, r6
 8001162:	6876      	ldr	r6, [r6, #4]
 8001164:	e7b9      	b.n	80010da <_malloc_r+0x46>
 8001166:	230c      	movs	r3, #12
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	4638      	mov	r0, r7
 800116c:	f000 f84c 	bl	8001208 <__malloc_unlock>
 8001170:	e7a1      	b.n	80010b6 <_malloc_r+0x22>
 8001172:	6025      	str	r5, [r4, #0]
 8001174:	e7de      	b.n	8001134 <_malloc_r+0xa0>
 8001176:	bf00      	nop
 8001178:	20000888 	.word	0x20000888

0800117c <_realloc_r>:
 800117c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001180:	4680      	mov	r8, r0
 8001182:	4614      	mov	r4, r2
 8001184:	460e      	mov	r6, r1
 8001186:	b921      	cbnz	r1, 8001192 <_realloc_r+0x16>
 8001188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800118c:	4611      	mov	r1, r2
 800118e:	f7ff bf81 	b.w	8001094 <_malloc_r>
 8001192:	b92a      	cbnz	r2, 80011a0 <_realloc_r+0x24>
 8001194:	f7ff ff12 	bl	8000fbc <_free_r>
 8001198:	4625      	mov	r5, r4
 800119a:	4628      	mov	r0, r5
 800119c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011a0:	f000 f838 	bl	8001214 <_malloc_usable_size_r>
 80011a4:	4284      	cmp	r4, r0
 80011a6:	4607      	mov	r7, r0
 80011a8:	d802      	bhi.n	80011b0 <_realloc_r+0x34>
 80011aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80011ae:	d812      	bhi.n	80011d6 <_realloc_r+0x5a>
 80011b0:	4621      	mov	r1, r4
 80011b2:	4640      	mov	r0, r8
 80011b4:	f7ff ff6e 	bl	8001094 <_malloc_r>
 80011b8:	4605      	mov	r5, r0
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d0ed      	beq.n	800119a <_realloc_r+0x1e>
 80011be:	42bc      	cmp	r4, r7
 80011c0:	4622      	mov	r2, r4
 80011c2:	4631      	mov	r1, r6
 80011c4:	bf28      	it	cs
 80011c6:	463a      	movcs	r2, r7
 80011c8:	f7ff fed0 	bl	8000f6c <memcpy>
 80011cc:	4631      	mov	r1, r6
 80011ce:	4640      	mov	r0, r8
 80011d0:	f7ff fef4 	bl	8000fbc <_free_r>
 80011d4:	e7e1      	b.n	800119a <_realloc_r+0x1e>
 80011d6:	4635      	mov	r5, r6
 80011d8:	e7df      	b.n	800119a <_realloc_r+0x1e>
	...

080011dc <_sbrk_r>:
 80011dc:	b538      	push	{r3, r4, r5, lr}
 80011de:	4d06      	ldr	r5, [pc, #24]	; (80011f8 <_sbrk_r+0x1c>)
 80011e0:	2300      	movs	r3, #0
 80011e2:	4604      	mov	r4, r0
 80011e4:	4608      	mov	r0, r1
 80011e6:	602b      	str	r3, [r5, #0]
 80011e8:	f000 f81c 	bl	8001224 <_sbrk>
 80011ec:	1c43      	adds	r3, r0, #1
 80011ee:	d102      	bne.n	80011f6 <_sbrk_r+0x1a>
 80011f0:	682b      	ldr	r3, [r5, #0]
 80011f2:	b103      	cbz	r3, 80011f6 <_sbrk_r+0x1a>
 80011f4:	6023      	str	r3, [r4, #0]
 80011f6:	bd38      	pop	{r3, r4, r5, pc}
 80011f8:	20000890 	.word	0x20000890

080011fc <__malloc_lock>:
 80011fc:	4801      	ldr	r0, [pc, #4]	; (8001204 <__malloc_lock+0x8>)
 80011fe:	f7ff bbcb 	b.w	8000998 <__retarget_lock_acquire_recursive>
 8001202:	bf00      	nop
 8001204:	20000884 	.word	0x20000884

08001208 <__malloc_unlock>:
 8001208:	4801      	ldr	r0, [pc, #4]	; (8001210 <__malloc_unlock+0x8>)
 800120a:	f7ff bbc6 	b.w	800099a <__retarget_lock_release_recursive>
 800120e:	bf00      	nop
 8001210:	20000884 	.word	0x20000884

08001214 <_malloc_usable_size_r>:
 8001214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001218:	1f18      	subs	r0, r3, #4
 800121a:	2b00      	cmp	r3, #0
 800121c:	bfbc      	itt	lt
 800121e:	580b      	ldrlt	r3, [r1, r0]
 8001220:	18c0      	addlt	r0, r0, r3
 8001222:	4770      	bx	lr

08001224 <_sbrk>:
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <_sbrk+0x14>)
 8001226:	4905      	ldr	r1, [pc, #20]	; (800123c <_sbrk+0x18>)
 8001228:	6813      	ldr	r3, [r2, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	bf08      	it	eq
 800122e:	460b      	moveq	r3, r1
 8001230:	4418      	add	r0, r3
 8001232:	6010      	str	r0, [r2, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	4770      	bx	lr
 8001238:	20000894 	.word	0x20000894
 800123c:	20000898 	.word	0x20000898

08001240 <_init>:
 8001240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001242:	bf00      	nop
 8001244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001246:	bc08      	pop	{r3}
 8001248:	469e      	mov	lr, r3
 800124a:	4770      	bx	lr

0800124c <_fini>:
 800124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124e:	bf00      	nop
 8001250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001252:	bc08      	pop	{r3}
 8001254:	469e      	mov	lr, r3
 8001256:	4770      	bx	lr
