
Debug/mcu_echo.elf:     file format elf32-littlearm
Debug/mcu_echo.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000b59

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00001588 memsz 0x00001588 flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x08001588 align 2**16
         filesz 0x00000068 memsz 0x000010a0 flags rw-
    LOAD off    0x000010a0 vaddr 0x200010a0 paddr 0x080015f0 align 2**16
         filesz 0x00000000 memsz 0x00000600 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001348  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001508  08001508  00011508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001578  08001578  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001578  08001578  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001578  08001578  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001578  08001578  00011578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08001580  08001580  00011580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001038  20000068  080015f0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010a0  080015f0  000210a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009560  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002180  00000000  00000000  000295f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000032a  00000000  00000000  0002b776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003d0  00000000  00000000  0002baa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000110  00000000  00000000  0002be70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000355f  00000000  00000000  0002bf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001dec  00000000  00000000  0002f4df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000003c  00000000  00000000  000312cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006e4  00000000  00000000  00031308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000117e  00000000  00000000  000319ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 000001f5  00000000  00000000  00032b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  00032d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001c0 l    d  .text	00000000 .text
08001508 l    d  .rodata	00000000 .rodata
08001578 l    d  .ARM.extab	00000000 .ARM.extab
08001578 l    d  .ARM	00000000 .ARM
08001578 l    d  .preinit_array	00000000 .preinit_array
08001578 l    d  .init_array	00000000 .init_array
08001580 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000068 l    d  .bss	00000000 .bss
200010a0 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 startup_stm32l4s5xx.o
f1e0f85f l       *ABS*	00000000 BootRAM
08000b70 l       .text	00000000 LoopCopyDataInit
08000b6a l       .text	00000000 CopyDataInit
08000b82 l       .text	00000000 LoopFillZerobss
08000b7e l       .text	00000000 FillZerobss
08000b8e l       .text	00000000 LoopForever
08000ba8 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 crtstuff.c
080014ec l     O .text	00000000 __EH_FRAME_BEGIN__
08000270 l     F .text	00000000 __do_global_dtors_aux
20000068 l     O .bss	00000000 completed.1
08001580 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000294 l     F .text	00000000 frame_dummy
2000006c l     O .bss	00000000 object.0
08001578 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mcu_echo.c
080002b0 l     F .text	0000001c send
080002cc l     F .text	0000001c receive
00000000 l    df *ABS*	00000000 uart.c
08000458 l     F .text	00000064 uart_pin_setup
080004bc l     F .text	000000a4 uart_enable
00000000 l    df *ABS*	00000000 uart_dma.c
0800066c l     F .text	00000034 __NVIC_EnableIRQ
080006a0 l     F .text	00000050 __NVIC_SetPriority
20001084 l     O .bss	00000004 receiving
20001088 l     O .bss	00000004 transmitting
00000000 l    df *ABS*	00000000 system_stm32l4xx.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
08001300 l     F .text	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrk.c
2000109c l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000008 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08001584 l       .fini_array	00000000 __fini_array_end
08001580 l       .fini_array	00000000 __fini_array_start
0800157c l       .init_array	00000000 __init_array_end
08001578 l       .preinit_array	00000000 __preinit_array_end
08001578 l       .init_array	00000000 __init_array_start
08001578 l       .preinit_array	00000000 __preinit_array_start
08000ba8  w    F .text	00000002 RTC_Alarm_IRQHandler
080014c0 g     F .text	00000010 _malloc_usable_size_r
08000ba8  w    F .text	00000002 EXTI2_IRQHandler
08000ba8  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
080007bc g     F .text	000000a0 uart_rx_start
08000ba8  w    F .text	00000002 TIM8_CC_IRQHandler
08000ba8  w    F .text	00000002 DebugMon_Handler
08000ba8  w    F .text	00000002 TIM1_CC_IRQHandler
08000ba8  w    F .text	00000002 TSC_IRQHandler
08000ba8  w    F .text	00000002 HardFault_Handler
080014b4 g     F .text	0000000c __malloc_unlock
080007a8 g     F .text	00000014 uart_tx_wait
00000400 g       *ABS*	00000000 _Min_Stack_Size
08000560 g     F .text	0000003c uart_baud_gen
08000ba8  w    F .text	00000002 SysTick_Handler
08001234 g     F .text	00000034 memmove
08000ba8  w    F .text	00000002 TAMP_STAMP_IRQHandler
08001588 g       *ABS*	00000000 _sidata
08000ba8  w    F .text	00000002 PendSV_Handler
08000ba8  w    F .text	00000002 NMI_Handler
08001578 g       .ARM	00000000 __exidx_end
08000ba8  w    F .text	00000002 EXTI3_IRQHandler
08000414 g     F .text	00000044 uart_receive
08000ba8  w    F .text	00000002 LPTIM2_IRQHandler
08000ba8  w    F .text	00000002 DFSDM1_FLT1_IRQHandler
20001098 g     O .bss	00000004 errno
08001508 g       .text	00000000 _etext
20000068 g       .bss	00000000 _sbss
08000ba8  w    F .text	00000002 GFXMMU_IRQHandler
08000ba8  w    F .text	00000002 I2C3_ER_IRQHandler
08000ba8  w    F .text	00000002 DFSDM1_FLT2_IRQHandler
08001218 g     F .text	0000001c memcpy
0800085c g     F .text	00000014 uart_rx_wait
20000084 g     O .bss	00001000 msg_buffer
08000cfc g     F .text	000001fc _svfprintf_r
08000ba8  w    F .text	00000002 EXTI0_IRQHandler
08000ba8  w    F .text	00000002 I2C2_EV_IRQHandler
08000ba8  w    F .text	00000002 CAN1_RX0_IRQHandler
08000ba8  w    F .text	00000002 FPU_IRQHandler
20000000 g     O .data	00000004 SystemCoreClock
08000ba8  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
08000ba8  w    F .text	00000002 UsageFault_Handler
08000ba8  w    F .text	00000002 LTDC_ER_IRQHandler
20000068 g       .bss	00000000 __bss_start__
20000000 g       .data	00000000 _sdata
08000ba8  w    F .text	00000002 SPI1_IRQHandler
08000ba8  w    F .text	00000002 OCTOSPI1_IRQHandler
08001488 g     F .text	00000020 _sbrk_r
08000ba8  w    F .text	00000002 TIM6_DAC_IRQHandler
08000ba8  w    F .text	00000002 DCMI_IRQHandler
08000ba8  w    F .text	00000002 TIM8_UP_IRQHandler
08001578 g       .ARM	00000000 __exidx_start
08001428 g     F .text	0000005e _realloc_r
08000bac g     F .text	00000048 __libc_init_array
08000ba8  w    F .text	00000002 OCTOSPI2_IRQHandler
08000ba8  w    F .text	00000002 DMA2_Channel2_IRQHandler
08000ba8  w    F .text	00000002 DMA1_Channel4_IRQHandler
08000ba8  w    F .text	00000002 SAI2_IRQHandler
08000ba8  w    F .text	00000002 ADC1_IRQHandler
080014d0 g     F .text	0000001c _sbrk
08000ba8  w    F .text	00000002 DFSDM1_FLT3_IRQHandler
080014ec g     F .text	00000000 _init
08000ba8  w    F .text	00000002 USART3_IRQHandler
080006f0 g     F .text	000000b8 uart_tx_start
200010a0 g       .bss	00000000 _ebss
08000ba8  w    F .text	00000002 DMA1_Channel7_IRQHandler
08000b58  w    F .text	00000038 Reset_Handler
08000ba8  w    F .text	00000002 CAN1_RX1_IRQHandler
08000ba8  w    F .text	00000002 UART5_IRQHandler
2000108c g     O .bss	00000001 __lock___malloc_recursive_mutex
080005b4 g     F .text	00000040 led_on
08000ba8  w    F .text	00000002 TIM4_IRQHandler
08000ba8  w    F .text	00000002 DMA2_Channel1_IRQHandler
200010a0 g       ._user_heap_stack	00000000 end
08000ba8  w    F .text	00000002 I2C1_EV_IRQHandler
08000c46 g     F .text	00000002 __retarget_lock_release_recursive
08000c48 g     F .text	000000b4 __ssputs_r
08000ba8  w    F .text	00000002 DMAMUX1_OVR_IRQHandler
08000ba8  w    F .text	00000002 DMA1_Channel6_IRQHandler
0800059c g     F .text	00000016 uart_init
08000ba8  w    F .text	00000002 UART4_IRQHandler
08000ba8  w    F .text	00000002 DMA2_Channel4_IRQHandler
080001d0 g     F .text	00000000 memchr
200010a0 g       .bss	00000000 __bss_end__
08001268 g     F .text	00000098 _free_r
08000ba8  w    F .text	00000002 TIM3_IRQHandler
08000ba8  w    F .text	00000002 RCC_IRQHandler
00000200 g       *ABS*	00000000 _Min_Heap_Size
0800089c g     F .text	0000003c DMA1_Channel1_IRQHandler
08000ba8 g       .text	00000002 Default_Handler
08000ba8  w    F .text	00000002 DMA2_Channel7_IRQHandler
08000ba8  w    F .text	00000002 EXTI15_10_IRQHandler
08000960 g     F .text	000001f8 set_sysclk_to_120
08000ba8  w    F .text	00000002 TIM7_IRQHandler
08000ba8  w    F .text	00000002 SDMMC1_IRQHandler
08000ba8  w    F .text	00000002 TIM5_IRQHandler
08000ba8  w    F .text	00000002 I2C3_EV_IRQHandler
08000ba8  w    F .text	00000002 EXTI9_5_IRQHandler
08000ba8  w    F .text	00000002 RTC_WKUP_IRQHandler
08000ba8  w    F .text	00000002 LTDC_IRQHandler
080008d8 g     F .text	0000003c uart_dma_init
080014a8 g     F .text	0000000c __malloc_lock
08000ba8  w    F .text	00000002 PVD_PVM_IRQHandler
08000ba8  w    F .text	00000002 SPI2_IRQHandler
08000c44 g     F .text	00000002 __retarget_lock_acquire_recursive
08000bf4 g     F .text	00000010 memset
08000ba8  w    F .text	00000002 MemManage_Handler
080002e8 g     F .text	0000012c main
08000ba8  w    F .text	00000002 CAN1_TX_IRQHandler
08000ba8  w    F .text	00000002 SVC_Handler
08000ba8  w    F .text	00000002 DMA2_Channel5_IRQHandler
08001340 g     F .text	000000e8 _malloc_r
08000ba8  w    F .text	00000002 DMA1_Channel5_IRQHandler
08000ba8  w    F .text	00000002 EXTI4_IRQHandler
08000914 g     F .text	0000004c SystemInit
08000ba8  w    F .text	00000002 RNG_IRQHandler
080014f8 g     F .text	00000000 _fini
08000ba8  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08000c04 g     F .text	00000040 sprintf
08000ba8  w    F .text	00000002 DMA1_Channel3_IRQHandler
08000ba8  w    F .text	00000002 COMP_IRQHandler
08000ef8 g     F .text	000000da _printf_common
20000004 g     O .data	00000004 _impure_ptr
08000ba8  w    F .text	00000002 HASH_CRS_IRQHandler
08000cfc g     F .text	000001fc _svfiprintf_r
08000ba8  w    F .text	00000002 WWDG_IRQHandler
08000ba8  w    F .text	00000002 I2C4_EV_IRQHandler
08000ba8  w    F .text	00000002 LPUART1_IRQHandler
08000ba8  w    F .text	00000002 DMA2_Channel6_IRQHandler
08000ba8  w    F .text	00000002 TIM2_IRQHandler
080005f4 g     F .text	00000078 led_init
08000ba8  w    F .text	00000002 DMA2D_IRQHandler
200a0000 g       .isr_vector	00000000 _estack
08000ba8  w    F .text	00000002 EXTI1_IRQHandler
20000068 g       .data	00000000 _edata
08000ba8  w    F .text	00000002 AES_IRQHandler
08000ba8  w    F .text	00000002 USART2_IRQHandler
08000ba8  w    F .text	00000002 DFSDM1_FLT0_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
08000ba8  w    F .text	00000002 I2C2_ER_IRQHandler
08000870 g     F .text	0000002c DMA1_Channel2_IRQHandler
08000c04 g     F .text	00000040 siprintf
08000ba8  w    F .text	00000002 TIM8_BRK_IRQHandler
08000ba8  w    F .text	00000002 CAN1_SCE_IRQHandler
08000ba8  w    F .text	00000002 FLASH_IRQHandler
08000ba8  w    F .text	00000002 BusFault_Handler
08000ba8  w    F .text	00000002 USART1_IRQHandler
080001c0 g     F .text	00000010 strlen
08000ba8  w    F .text	00000002 OTG_FS_IRQHandler
08000fd4 g     F .text	00000244 _printf_i
08000ba8  w    F .text	00000002 SPI3_IRQHandler
20001094 g     O .bss	00000004 __malloc_sbrk_start
08000ba8  w    F .text	00000002 I2C1_ER_IRQHandler
08000ba8  w    F .text	00000002 FMC_IRQHandler
20001090 g     O .bss	00000004 __malloc_free_list
08000ba8  w    F .text	00000002 LPTIM1_IRQHandler
08000ba8  w    F .text	00000002 I2C4_ER_IRQHandler
08000ba8  w    F .text	00000002 SAI1_IRQHandler
08000ba8  w    F .text	00000002 DMA2_Channel3_IRQHandler
08000ba8  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

080001c0 <strlen>:
 80001c0:	4603      	mov	r3, r0
 80001c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001c6:	2a00      	cmp	r2, #0
 80001c8:	d1fb      	bne.n	80001c2 <strlen+0x2>
 80001ca:	1a18      	subs	r0, r3, r0
 80001cc:	3801      	subs	r0, #1
 80001ce:	4770      	bx	lr

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__do_global_dtors_aux>:
 8000270:	b510      	push	{r4, lr}
 8000272:	4c05      	ldr	r4, [pc, #20]	; (8000288 <__do_global_dtors_aux+0x18>)
 8000274:	7823      	ldrb	r3, [r4, #0]
 8000276:	b933      	cbnz	r3, 8000286 <__do_global_dtors_aux+0x16>
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <__do_global_dtors_aux+0x1c>)
 800027a:	b113      	cbz	r3, 8000282 <__do_global_dtors_aux+0x12>
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <__do_global_dtors_aux+0x20>)
 800027e:	f3af 8000 	nop.w
 8000282:	2301      	movs	r3, #1
 8000284:	7023      	strb	r3, [r4, #0]
 8000286:	bd10      	pop	{r4, pc}
 8000288:	20000068 	.word	0x20000068
 800028c:	00000000 	.word	0x00000000
 8000290:	080014ec 	.word	0x080014ec

08000294 <frame_dummy>:
 8000294:	b508      	push	{r3, lr}
 8000296:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <frame_dummy+0x10>)
 8000298:	b11b      	cbz	r3, 80002a2 <frame_dummy+0xe>
 800029a:	4903      	ldr	r1, [pc, #12]	; (80002a8 <frame_dummy+0x14>)
 800029c:	4803      	ldr	r0, [pc, #12]	; (80002ac <frame_dummy+0x18>)
 800029e:	f3af 8000 	nop.w
 80002a2:	bd08      	pop	{r3, pc}
 80002a4:	00000000 	.word	0x00000000
 80002a8:	2000006c 	.word	0x2000006c
 80002ac:	080014ec 	.word	0x080014ec

080002b0 <send>:
	}
	return msg;
}

// Send size bytes at data pointer, using method defined by USE_DMA macro
static void send(void * data, size_t size) {
 80002b0:	b500      	push	{lr}
 80002b2:	b083      	sub	sp, #12
 80002b4:	9001      	str	r0, [sp, #4]
 80002b6:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_tx_start(data, size);
 80002b8:	9900      	ldr	r1, [sp, #0]
 80002ba:	9801      	ldr	r0, [sp, #4]
 80002bc:	f000 fa18 	bl	80006f0 <uart_tx_start>
		uart_tx_wait();
 80002c0:	f000 fa72 	bl	80007a8 <uart_tx_wait>
	} else {
		uart_send(data, size);
	}
}
 80002c4:	bf00      	nop
 80002c6:	b003      	add	sp, #12
 80002c8:	f85d fb04 	ldr.w	pc, [sp], #4

080002cc <receive>:

// Receive size bytes at buffer pointer, using method defined by USE_DMA macro
static void receive(void * buffer, size_t size) {
 80002cc:	b500      	push	{lr}
 80002ce:	b083      	sub	sp, #12
 80002d0:	9001      	str	r0, [sp, #4]
 80002d2:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_rx_start(buffer, size);
 80002d4:	9900      	ldr	r1, [sp, #0]
 80002d6:	9801      	ldr	r0, [sp, #4]
 80002d8:	f000 fa70 	bl	80007bc <uart_rx_start>
		uart_rx_wait();
 80002dc:	f000 fabe 	bl	800085c <uart_rx_wait>
	} else {
		uart_receive(buffer, size);
	}
}
 80002e0:	bf00      	nop
 80002e2:	b003      	add	sp, #12
 80002e4:	f85d fb04 	ldr.w	pc, [sp], #4

080002e8 <main>:

int main(void) {
 80002e8:	b500      	push	{lr}
 80002ea:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80002ee:	b085      	sub	sp, #20
	char debug_msg[BUFFERSIZE] = {0};
 80002f0:	ab04      	add	r3, sp, #16
 80002f2:	2200      	movs	r2, #0
 80002f4:	f843 2c0c 	str.w	r2, [r3, #-12]
 80002f8:	3b08      	subs	r3, #8
 80002fa:	f640 72fc 	movw	r2, #4092	; 0xffc
 80002fe:	2100      	movs	r1, #0
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fc77 	bl	8000bf4 <memset>
	char * stripped_msg;
	size_t received_size=0;
 8000306:	2300      	movs	r3, #0
 8000308:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 800030c:	f102 0208 	add.w	r2, r2, #8
 8000310:	6013      	str	r3, [r2, #0]
	int discard_cali = 0; // Discard baud calibration character after first communication
 8000312:	2300      	movs	r3, #0
 8000314:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 8000318:	f102 020c 	add.w	r2, r2, #12
 800031c:	6013      	str	r3, [r2, #0]

	led_init();
 800031e:	f000 f969 	bl	80005f4 <led_init>
	led_on(LD1);
 8000322:	2000      	movs	r0, #0
 8000324:	f000 f946 	bl	80005b4 <led_on>
	uart_init();
 8000328:	f000 f938 	bl	800059c <uart_init>
	uart_dma_init();
 800032c:	f000 fad4 	bl	80008d8 <uart_dma_init>

	while(1) {
		if (discard_cali) {
 8000330:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8000334:	f103 030c 	add.w	r3, r3, #12
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <main+0x66>
			// Discard Auto Baud calibration character
			receive(msg_buffer, 1);
 800033e:	2101      	movs	r1, #1
 8000340:	4832      	ldr	r0, [pc, #200]	; (800040c <main+0x124>)
 8000342:	f7ff ffc3 	bl	80002cc <receive>
			memset(msg_buffer, 0, 1);
 8000346:	4b31      	ldr	r3, [pc, #196]	; (800040c <main+0x124>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
 800034c:	e005      	b.n	800035a <main+0x72>
		} else {
			discard_cali = 1;
 800034e:	2301      	movs	r3, #1
 8000350:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 8000354:	f102 020c 	add.w	r2, r2, #12
 8000358:	6013      	str	r3, [r2, #0]
		}

		// Read received buffer size
		receive(msg_buffer, sizeof(uint32_t));
 800035a:	2104      	movs	r1, #4
 800035c:	482b      	ldr	r0, [pc, #172]	; (800040c <main+0x124>)
 800035e:	f7ff ffb5 	bl	80002cc <receive>
		received_size = READSIZE(msg_buffer);
 8000362:	4b2a      	ldr	r3, [pc, #168]	; (800040c <main+0x124>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 800036a:	f102 0208 	add.w	r2, r2, #8
 800036e:	6013      	str	r3, [r2, #0]
		memset(msg_buffer, 0, sizeof(uint32_t));
 8000370:	2204      	movs	r2, #4
 8000372:	2100      	movs	r1, #0
 8000374:	4825      	ldr	r0, [pc, #148]	; (800040c <main+0x124>)
 8000376:	f000 fc3d 	bl	8000bf4 <memset>

		// Send back buffer content
		if (received_size > BUFFERSIZE) {
 800037a:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 800037e:	f103 0308 	add.w	r3, r3, #8
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000388:	d918      	bls.n	80003bc <main+0xd4>
			// Message too large
			sprintf(debug_msg, "Attempting to read %u bytes larger than buffer size %d.\n", (unsigned int)received_size, BUFFERSIZE);
 800038a:	a804      	add	r0, sp, #16
 800038c:	380c      	subs	r0, #12
 800038e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000392:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 8000396:	f102 0208 	add.w	r2, r2, #8
 800039a:	6812      	ldr	r2, [r2, #0]
 800039c:	491c      	ldr	r1, [pc, #112]	; (8000410 <main+0x128>)
 800039e:	f000 fc31 	bl	8000c04 <siprintf>
			send(debug_msg, strlen(debug_msg));
 80003a2:	ab04      	add	r3, sp, #16
 80003a4:	3b0c      	subs	r3, #12
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ff0a 	bl	80001c0 <strlen>
 80003ac:	4602      	mov	r2, r0
 80003ae:	ab04      	add	r3, sp, #16
 80003b0:	3b0c      	subs	r3, #12
 80003b2:	4611      	mov	r1, r2
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff ff7b 	bl	80002b0 <send>
 80003ba:	e7b9      	b.n	8000330 <main+0x48>
		} else {
			// Read message
			receive(msg_buffer, received_size);
 80003bc:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003c0:	f103 0308 	add.w	r3, r3, #8
 80003c4:	6819      	ldr	r1, [r3, #0]
 80003c6:	4811      	ldr	r0, [pc, #68]	; (800040c <main+0x124>)
 80003c8:	f7ff ff80 	bl	80002cc <receive>

			// Echo message
			stripped_msg = msg_buffer;
 80003cc:	4b0f      	ldr	r3, [pc, #60]	; (800040c <main+0x124>)
 80003ce:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 80003d2:	f102 0204 	add.w	r2, r2, #4
 80003d6:	6013      	str	r3, [r2, #0]
			send(stripped_msg, strlen(stripped_msg));
 80003d8:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003dc:	f103 0304 	add.w	r3, r3, #4
 80003e0:	6818      	ldr	r0, [r3, #0]
 80003e2:	f7ff feed 	bl	80001c0 <strlen>
 80003e6:	4603      	mov	r3, r0
 80003e8:	4619      	mov	r1, r3
 80003ea:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003ee:	f103 0304 	add.w	r3, r3, #4
 80003f2:	6818      	ldr	r0, [r3, #0]
 80003f4:	f7ff ff5c 	bl	80002b0 <send>
			memset(msg_buffer, 0, received_size);
 80003f8:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003fc:	f103 0308 	add.w	r3, r3, #8
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	2100      	movs	r1, #0
 8000404:	4801      	ldr	r0, [pc, #4]	; (800040c <main+0x124>)
 8000406:	f000 fbf5 	bl	8000bf4 <memset>
		if (discard_cali) {
 800040a:	e791      	b.n	8000330 <main+0x48>
 800040c:	20000084 	.word	0x20000084
 8000410:	08001508 	.word	0x08001508

08000414 <uart_receive>:
	// Wait for character transmit complete - TC bit
	while(!(UART4->ISR & (1 << 6))) {};
}

// Receive size bytes of content from uart and write it to buffer
void uart_receive(void * buffer, size_t size)  {
 8000414:	b084      	sub	sp, #16
 8000416:	9001      	str	r0, [sp, #4]
 8000418:	9100      	str	r1, [sp, #0]
	for (size_t i=0; i < size; i++) {
 800041a:	2300      	movs	r3, #0
 800041c:	9303      	str	r3, [sp, #12]
 800041e:	e011      	b.n	8000444 <uart_receive+0x30>
		// Wait until RXNE bit is set
		while(!(UART4->ISR & (1 << 5)));
 8000420:	bf00      	nop
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <uart_receive+0x40>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 0320 	and.w	r3, r3, #32
 800042a:	2b00      	cmp	r3, #0
 800042c:	d0f9      	beq.n	8000422 <uart_receive+0xe>
		// Receive character
		((char *)buffer)[i] = UART4->RDR;
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <uart_receive+0x40>)
 8000430:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000432:	b299      	uxth	r1, r3
 8000434:	9a01      	ldr	r2, [sp, #4]
 8000436:	9b03      	ldr	r3, [sp, #12]
 8000438:	4413      	add	r3, r2
 800043a:	b2ca      	uxtb	r2, r1
 800043c:	701a      	strb	r2, [r3, #0]
	for (size_t i=0; i < size; i++) {
 800043e:	9b03      	ldr	r3, [sp, #12]
 8000440:	3301      	adds	r3, #1
 8000442:	9303      	str	r3, [sp, #12]
 8000444:	9a03      	ldr	r2, [sp, #12]
 8000446:	9b00      	ldr	r3, [sp, #0]
 8000448:	429a      	cmp	r2, r3
 800044a:	d3e9      	bcc.n	8000420 <uart_receive+0xc>
	}

}
 800044c:	bf00      	nop
 800044e:	bf00      	nop
 8000450:	b004      	add	sp, #16
 8000452:	4770      	bx	lr
 8000454:	40004c00 	.word	0x40004c00

08000458 <uart_pin_setup>:

// Setup GPIO A2 and A3 pins for UART
static void uart_pin_setup(void) {
    // Enable GPIOA clock, bit 0 on AHB2ENR
    RCC->AHB2ENR |= (1 << 0);
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <uart_pin_setup+0x60>)
 800045a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045c:	4a16      	ldr	r2, [pc, #88]	; (80004b8 <uart_pin_setup+0x60>)
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	64d3      	str	r3, [r2, #76]	; 0x4c

    // Set pin modes as alternate mode 7 (PA0 and PA1)
    // UART4 TX and RX pins are PA0 (D1) and PA1(D0) respectively 
    GPIOA->MODER &= ~(0xFU << 0);
 8000464:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800046e:	f023 030f 	bic.w	r3, r3, #15
 8000472:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xAU << 0);
 8000474:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800047e:	f043 030a 	orr.w	r3, r3, #10
 8000482:	6013      	str	r3, [r2, #0]

    // Set pin modes as high speed
    GPIOA->OSPEEDR |= 0x0000000F;
 8000484:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800048e:	f043 030f 	orr.w	r3, r3, #15
 8000492:	6093      	str	r3, [r2, #8]

    // Choose AF8 for UART4 in Alternate Function registers
    GPIOA->AFR[0] |= (0x8U << 0); // for pin A0
 8000494:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000498:	6a1b      	ldr	r3, [r3, #32]
 800049a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800049e:	f043 0308 	orr.w	r3, r3, #8
 80004a2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x8U << 4); // for pin A1
 80004a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004a8:	6a1b      	ldr	r3, [r3, #32]
 80004aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004b2:	6213      	str	r3, [r2, #32]
}
 80004b4:	bf00      	nop
 80004b6:	4770      	bx	lr
 80004b8:	40021000 	.word	0x40021000

080004bc <uart_enable>:

// Initialize UART 4
static void uart_enable(void) {
    // enable UART4 clock
    RCC->APB1ENR1 |= (1 << 19);
 80004bc:	4b26      	ldr	r3, [pc, #152]	; (8000558 <uart_enable+0x9c>)
 80004be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004c0:	4a25      	ldr	r2, [pc, #148]	; (8000558 <uart_enable+0x9c>)
 80004c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004c6:	6593      	str	r3, [r2, #88]	; 0x58

	// Select Sysclk as UART4 Source
	// RCC->CCIPR |= (1U << 6);

    // Disable uart4 - UE, bit 0
    UART4->CR1 &= ~(1 << 0);
 80004c8:	4b24      	ldr	r3, [pc, #144]	; (800055c <uart_enable+0xa0>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a23      	ldr	r2, [pc, #140]	; (800055c <uart_enable+0xa0>)
 80004ce:	f023 0301 	bic.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]

	// Disable FIFO mode
	UART4->CR1 &= ~(1<<20);
 80004d4:	4b21      	ldr	r3, [pc, #132]	; (800055c <uart_enable+0xa0>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a20      	ldr	r2, [pc, #128]	; (800055c <uart_enable+0xa0>)
 80004da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80004de:	6013      	str	r3, [r2, #0]

	// Set word size to 8
	UART4->CR1 &= ~(1U<<12 | 1U<<28);
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <uart_enable+0xa0>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a1d      	ldr	r2, [pc, #116]	; (800055c <uart_enable+0xa0>)
 80004e6:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80004ea:	6013      	str	r3, [r2, #0]

	// OVER8 = 0
	UART4->CR1 &= ~(1<<15);
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <uart_enable+0xa0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a1a      	ldr	r2, [pc, #104]	; (800055c <uart_enable+0xa0>)
 80004f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80004f6:	6013      	str	r3, [r2, #0]

	// For STM32L4S5: Sysclk = 120 Mhz (Sysclk/2), Baudrate = 115200, OVER8 = 0
	// USARTDIV = (1+OVER8) * fCK / baud
	// USARTDIV = 120Mhz / 115200 = 1041.67 ~ 1042
    UART4->BRR = 1042U;
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <uart_enable+0xa0>)
 80004fa:	f240 4212 	movw	r2, #1042	; 0x412
 80004fe:	60da      	str	r2, [r3, #12]

	// Set stop bits to 1
	UART4->CR2 &= ~(0xF << 12);
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <uart_enable+0xa0>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	4a15      	ldr	r2, [pc, #84]	; (800055c <uart_enable+0xa0>)
 8000506:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800050a:	6053      	str	r3, [r2, #4]

	// Disable parity
	UART4->CR1 &= ~(1<<10);
 800050c:	4b13      	ldr	r3, [pc, #76]	; (800055c <uart_enable+0xa0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a12      	ldr	r2, [pc, #72]	; (800055c <uart_enable+0xa0>)
 8000512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]

	// Set Auto Baud detection to 0x55 frame detection
	UART4->CR2 |= (3U<<21);
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <uart_enable+0xa0>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	4a0f      	ldr	r2, [pc, #60]	; (800055c <uart_enable+0xa0>)
 800051e:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8000522:	6053      	str	r3, [r2, #4]
	
	// Enable Auto Baud detection
	UART4->CR2 |= (1<<20);
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <uart_enable+0xa0>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <uart_enable+0xa0>)
 800052a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052e:	6053      	str	r3, [r2, #4]

    // UART4 TX enable, TE bit 3
    UART4->CR1 |= (1 << 3);
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <uart_enable+0xa0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a09      	ldr	r2, [pc, #36]	; (800055c <uart_enable+0xa0>)
 8000536:	f043 0308 	orr.w	r3, r3, #8
 800053a:	6013      	str	r3, [r2, #0]

    // UART4 RX enable, RE bit 2
    UART4->CR1 |= (1 << 2);
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <uart_enable+0xa0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a06      	ldr	r2, [pc, #24]	; (800055c <uart_enable+0xa0>)
 8000542:	f043 0304 	orr.w	r3, r3, #4
 8000546:	6013      	str	r3, [r2, #0]

    // Enable uart4 - UE, bit 0
    UART4->CR1 |= (1 << 0);
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <uart_enable+0xa0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a03      	ldr	r2, [pc, #12]	; (800055c <uart_enable+0xa0>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6013      	str	r3, [r2, #0]
}	
 8000554:	bf00      	nop
 8000556:	4770      	bx	lr
 8000558:	40021000 	.word	0x40021000
 800055c:	40004c00 	.word	0x40004c00

08000560 <uart_baud_gen>:

void uart_baud_gen(void) {
 8000560:	b500      	push	{lr}
 8000562:	b085      	sub	sp, #20
	char temp[8] = {0};
 8000564:	2300      	movs	r3, #0
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	2300      	movs	r3, #0
 800056a:	9302      	str	r3, [sp, #8]
	volatile uint32_t * brr = &(UART4->BRR);
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <uart_baud_gen+0x34>)
 800056e:	9303      	str	r3, [sp, #12]
	uart_receive(temp, 1);
 8000570:	ab01      	add	r3, sp, #4
 8000572:	2101      	movs	r1, #1
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ff4d 	bl	8000414 <uart_receive>
	// Wait for auto baud generation to complete- ABRF bit
	while(!(UART4->ISR & (1 << 15))) {};
 800057a:	bf00      	nop
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <uart_baud_gen+0x38>)
 800057e:	69db      	ldr	r3, [r3, #28]
 8000580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0f9      	beq.n	800057c <uart_baud_gen+0x1c>
}
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	b005      	add	sp, #20
 800058e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000592:	bf00      	nop
 8000594:	40004c0c 	.word	0x40004c0c
 8000598:	40004c00 	.word	0x40004c00

0800059c <uart_init>:

void uart_init(void)
{
 800059c:	b508      	push	{r3, lr}
	// Set system clock
	set_sysclk_to_120();
 800059e:	f000 f9df 	bl	8000960 <set_sysclk_to_120>

	uart_pin_setup();
 80005a2:	f7ff ff59 	bl	8000458 <uart_pin_setup>
	uart_enable();
 80005a6:	f7ff ff89 	bl	80004bc <uart_enable>
	uart_baud_gen();
 80005aa:	f7ff ffd9 	bl	8000560 <uart_baud_gen>
}
 80005ae:	bf00      	nop
 80005b0:	bd08      	pop	{r3, pc}
	...

080005b4 <led_on>:

// Turn on LED
void led_on(led l) {
 80005b4:	b082      	sub	sp, #8
 80005b6:	4603      	mov	r3, r0
 80005b8:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (l) {
 80005bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <led_on+0x16>
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d009      	beq.n	80005dc <led_on+0x28>
			break;
		case LD2:
			GPIOB->ODR |= (1U<<14);
			break;
		default:
			break;
 80005c8:	e00f      	b.n	80005ea <led_on+0x36>
			GPIOA->ODR |= (1U<<5);
 80005ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005d4:	f043 0320 	orr.w	r3, r3, #32
 80005d8:	6153      	str	r3, [r2, #20]
			break;
 80005da:	e006      	b.n	80005ea <led_on+0x36>
			GPIOB->ODR |= (1U<<14);
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <led_on+0x3c>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <led_on+0x3c>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6153      	str	r3, [r2, #20]
			break;
 80005e8:	bf00      	nop
	}
}
 80005ea:	bf00      	nop
 80005ec:	b002      	add	sp, #8
 80005ee:	4770      	bx	lr
 80005f0:	48000400 	.word	0x48000400

080005f4 <led_init>:
}

// Setup LED GPIO
void led_init(void) {
	// Enable GPIOA and GPIOB clock
	RCC->AHB2ENR |= (1U << 0);
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <led_init+0x70>)
 80005f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f8:	4a1a      	ldr	r2, [pc, #104]	; (8000664 <led_init+0x70>)
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (1U << 1);
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <led_init+0x70>)
 8000602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000604:	4a17      	ldr	r2, [pc, #92]	; (8000664 <led_init+0x70>)
 8000606:	f043 0302 	orr.w	r3, r3, #2
 800060a:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Turn on output mode on A5 and B14
	GPIOA->MODER &= ~(0xFU << 10);
 800060c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000616:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800061a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 10);
 800061c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800062a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0xFU << 28);
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <led_init+0x74>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <led_init+0x74>)
 8000632:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000636:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 28);
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <led_init+0x74>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <led_init+0x74>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6013      	str	r3, [r2, #0]

	// Turn off LEDs
	GPIOA->ODR &= ~(1U<<5);
 8000644:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800064e:	f023 0320 	bic.w	r3, r3, #32
 8000652:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~(1U<<14);
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <led_init+0x74>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a03      	ldr	r2, [pc, #12]	; (8000668 <led_init+0x74>)
 800065a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800065e:	6153      	str	r3, [r2, #20]
}
 8000660:	bf00      	nop
 8000662:	4770      	bx	lr
 8000664:	40021000 	.word	0x40021000
 8000668:	48000400 	.word	0x48000400

0800066c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800066c:	b082      	sub	sp, #8
 800066e:	4603      	mov	r3, r0
 8000670:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8000674:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	db0c      	blt.n	8000696 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000680:	f003 021f 	and.w	r2, r3, #31
 8000684:	4905      	ldr	r1, [pc, #20]	; (800069c <__NVIC_EnableIRQ+0x30>)
 8000686:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	2001      	movs	r0, #1
 800068e:	fa00 f202 	lsl.w	r2, r0, r2
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000696:	bf00      	nop
 8000698:	b002      	add	sp, #8
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b082      	sub	sp, #8
 80006a2:	4603      	mov	r3, r0
 80006a4:	9100      	str	r1, [sp, #0]
 80006a6:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 80006aa:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	db0a      	blt.n	80006c8 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	9b00      	ldr	r3, [sp, #0]
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	490c      	ldr	r1, [pc, #48]	; (80006e8 <__NVIC_SetPriority+0x48>)
 80006b8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80006bc:	0112      	lsls	r2, r2, #4
 80006be:	b2d2      	uxtb	r2, r2
 80006c0:	440b      	add	r3, r1
 80006c2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c6:	e00b      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	9b00      	ldr	r3, [sp, #0]
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4907      	ldr	r1, [pc, #28]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	b002      	add	sp, #8
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <uart_tx_start>:
	DMA1_Stream5->CR &= ~(0xC << 6);
}
*/

// Start uart transmission of size bytes of data
void uart_tx_start(void * data, size_t size) {
 80006f0:	b500      	push	{lr}
 80006f2:	b083      	sub	sp, #12
 80006f4:	9001      	str	r0, [sp, #4]
 80006f6:	9100      	str	r1, [sp, #0]
	uart_tx_wait();
 80006f8:	f000 f856 	bl	80007a8 <uart_tx_wait>
	//uart_tx_setup();
	
	// Reset CCR
	DMA1_Channel1->CCR = 0U;
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <uart_tx_start+0xa4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]

	// Source memory address
	DMA1_Channel1->CMAR = (uint32_t)data;
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <uart_tx_start+0xa4>)
 8000704:	9b01      	ldr	r3, [sp, #4]
 8000706:	60d3      	str	r3, [r2, #12]
	// Destination memory address
	DMA1_Channel1->CPAR = (uint32_t)&(UART4->TDR);
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <uart_tx_start+0xa4>)
 800070a:	4a23      	ldr	r2, [pc, #140]	; (8000798 <uart_tx_start+0xa8>)
 800070c:	609a      	str	r2, [r3, #8]
	// Transfer size
	DMA1_Channel1->CNDTR = size;
 800070e:	4a21      	ldr	r2, [pc, #132]	; (8000794 <uart_tx_start+0xa4>)
 8000710:	9b00      	ldr	r3, [sp, #0]
 8000712:	6053      	str	r3, [r2, #4]

	// CCRx Configuration
	DMA1_Channel1->CCR |= (3U << 12); // Very high priority
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <uart_tx_start+0xa4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <uart_tx_start+0xa4>)
 800071a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800071e:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (1U << 4); // Memory to peripheral
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <uart_tx_start+0xa4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <uart_tx_start+0xa4>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (1U << 7); // Enable memory increment
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <uart_tx_start+0xa4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a18      	ldr	r2, [pc, #96]	; (8000794 <uart_tx_start+0xa4>)
 8000732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000736:	6013      	str	r3, [r2, #0]
	//DMA1_Channel1->CCR |= (0U << 6); // Disable peripheral increment
	DMA1_Channel1->CCR |= (1U << 1); // Full transfer interrupt enable - TCIE
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <uart_tx_start+0xa4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a15      	ldr	r2, [pc, #84]	; (8000794 <uart_tx_start+0xa4>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	6013      	str	r3, [r2, #0]

	// Enable transfer Complete interrupt
	NVIC_SetPriority(DMA1_Channel1_IRQn, 1);
 8000744:	2101      	movs	r1, #1
 8000746:	200b      	movs	r0, #11
 8000748:	f7ff ffaa 	bl	80006a0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800074c:	200b      	movs	r0, #11
 800074e:	f7ff ff8d 	bl	800066c <__NVIC_EnableIRQ>

	// Configure DMAMUX Channel
	DMAMUX1_Channel0->CCR = 0U; // Reset config
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <uart_tx_start+0xac>)
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
	DMAMUX1_Channel0->CCR |= (31U << 0); // Select UART4 TX as request id
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <uart_tx_start+0xac>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0f      	ldr	r2, [pc, #60]	; (800079c <uart_tx_start+0xac>)
 800075e:	f043 031f 	orr.w	r3, r3, #31
 8000762:	6013      	str	r3, [r2, #0]
	DMAMUX1_Channel0->CCR |= (0U << 19); // Forward 1 request
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <uart_tx_start+0xac>)
 8000766:	4a0d      	ldr	r2, [pc, #52]	; (800079c <uart_tx_start+0xac>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	6013      	str	r3, [r2, #0]

	// Clear TC bit
	UART4->ICR |= (1U<<6);
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <uart_tx_start+0xb0>)
 800076e:	6a1b      	ldr	r3, [r3, #32]
 8000770:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <uart_tx_start+0xb0>)
 8000772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000776:	6213      	str	r3, [r2, #32]

	// Enable DMA
	DMA1_Channel1->CCR |= (1U << 0);
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <uart_tx_start+0xa4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a05      	ldr	r2, [pc, #20]	; (8000794 <uart_tx_start+0xa4>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	6013      	str	r3, [r2, #0]

	transmitting=1;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <uart_tx_start+0xb4>)
 8000786:	2201      	movs	r2, #1
 8000788:	601a      	str	r2, [r3, #0]
}
 800078a:	bf00      	nop
 800078c:	b003      	add	sp, #12
 800078e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000792:	bf00      	nop
 8000794:	40020008 	.word	0x40020008
 8000798:	40004c28 	.word	0x40004c28
 800079c:	40020800 	.word	0x40020800
 80007a0:	40004c00 	.word	0x40004c00
 80007a4:	20001088 	.word	0x20001088

080007a8 <uart_tx_wait>:

// Wait for uart transmission to finish
void uart_tx_wait(void) {
	while (transmitting);
 80007a8:	bf00      	nop
 80007aa:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <uart_tx_wait+0x10>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1fb      	bne.n	80007aa <uart_tx_wait+0x2>
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	4770      	bx	lr
 80007b8:	20001088 	.word	0x20001088

080007bc <uart_rx_start>:

// Start uart reception of size bytes of data into buffer
void uart_rx_start(void * buffer, size_t size) {
 80007bc:	b500      	push	{lr}
 80007be:	b085      	sub	sp, #20
 80007c0:	9001      	str	r0, [sp, #4]
 80007c2:	9100      	str	r1, [sp, #0]
	uart_rx_wait();
 80007c4:	f000 f84a 	bl	800085c <uart_rx_wait>

	volatile uint32_t * c2ccr = &(DMA1_Channel2->CCR);
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <uart_rx_start+0x90>)
 80007ca:	9303      	str	r3, [sp, #12]

	// Reset CCR
	DMA1_Channel2->CCR = 0;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <uart_rx_start+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]

	// Source memory address
	DMA1_Channel2->CPAR = (uint32_t)&(UART4->RDR);
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <uart_rx_start+0x90>)
 80007d4:	4a1e      	ldr	r2, [pc, #120]	; (8000850 <uart_rx_start+0x94>)
 80007d6:	609a      	str	r2, [r3, #8]
	// Destination memory address
	DMA1_Channel2->CMAR = (uint32_t)buffer;
 80007d8:	4a1c      	ldr	r2, [pc, #112]	; (800084c <uart_rx_start+0x90>)
 80007da:	9b01      	ldr	r3, [sp, #4]
 80007dc:	60d3      	str	r3, [r2, #12]
	// Transfer size
	DMA1_Channel2->CNDTR = size;
 80007de:	4a1b      	ldr	r2, [pc, #108]	; (800084c <uart_rx_start+0x90>)
 80007e0:	9b00      	ldr	r3, [sp, #0]
 80007e2:	6053      	str	r3, [r2, #4]

	// CCRx Configuration
	DMA1_Channel2->CCR |= (3U << 12); // Very high priority
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <uart_rx_start+0x90>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a18      	ldr	r2, [pc, #96]	; (800084c <uart_rx_start+0x90>)
 80007ea:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80007ee:	6013      	str	r3, [r2, #0]
	//DMA1_Channel2->CCR |= (0U << 4); // Peripheral to memory
	DMA1_Channel2->CCR |= (1U << 7); // Enable memory increment
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <uart_rx_start+0x90>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a15      	ldr	r2, [pc, #84]	; (800084c <uart_rx_start+0x90>)
 80007f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fa:	6013      	str	r3, [r2, #0]
	//DMA1_Channel2->CCR |= (0U << 6); // No peripheral increment
	DMA1_Channel2->CCR |= (1U << 1); // Full transfer interrupt enable - TCIE
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <uart_rx_start+0x90>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a12      	ldr	r2, [pc, #72]	; (800084c <uart_rx_start+0x90>)
 8000802:	f043 0302 	orr.w	r3, r3, #2
 8000806:	6013      	str	r3, [r2, #0]

	// Enable transfer Complete interrupt
	NVIC_SetPriority(DMA1_Channel2_IRQn, 2);
 8000808:	2102      	movs	r1, #2
 800080a:	200c      	movs	r0, #12
 800080c:	f7ff ff48 	bl	80006a0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000810:	200c      	movs	r0, #12
 8000812:	f7ff ff2b 	bl	800066c <__NVIC_EnableIRQ>

	// Configure DMAMUX Channel
	DMAMUX1_Channel1->CCR = 0U; // Reset config
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <uart_rx_start+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
	DMAMUX1_Channel1->CCR |= (30U << 0); // Select UART4 RX as request id
 800081c:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <uart_rx_start+0x98>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <uart_rx_start+0x98>)
 8000822:	f043 031e 	orr.w	r3, r3, #30
 8000826:	6013      	str	r3, [r2, #0]
	DMAMUX1_Channel1->CCR |= (0U << 19); // Forward 1 request
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <uart_rx_start+0x98>)
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <uart_rx_start+0x98>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6013      	str	r3, [r2, #0]

	// Enable DMA
	DMA1_Channel2->CCR |= (1U << 0);
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <uart_rx_start+0x90>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a05      	ldr	r2, [pc, #20]	; (800084c <uart_rx_start+0x90>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	6013      	str	r3, [r2, #0]

	receiving=1;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <uart_rx_start+0x9c>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
}
 8000842:	bf00      	nop
 8000844:	b005      	add	sp, #20
 8000846:	f85d fb04 	ldr.w	pc, [sp], #4
 800084a:	bf00      	nop
 800084c:	4002001c 	.word	0x4002001c
 8000850:	40004c24 	.word	0x40004c24
 8000854:	40020804 	.word	0x40020804
 8000858:	20001084 	.word	0x20001084

0800085c <uart_rx_wait>:

// Wait for uart reception to finish
void uart_rx_wait(void) {
	while (receiving);
 800085c:	bf00      	nop
 800085e:	4b03      	ldr	r3, [pc, #12]	; (800086c <uart_rx_wait+0x10>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1fb      	bne.n	800085e <uart_rx_wait+0x2>
}
 8000866:	bf00      	nop
 8000868:	bf00      	nop
 800086a:	4770      	bx	lr
 800086c:	20001084 	.word	0x20001084

08000870 <DMA1_Channel2_IRQHandler>:

// UART reception finish interrupt
void DMA1_Channel2_IRQHandler(void)
{
    // clear stream receive complete interrupt - bit11 for stream 5
    if (DMA1->ISR & DMA_ISR_TCIF2) {
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <DMA1_Channel2_IRQHandler+0x24>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f003 0320 	and.w	r3, r3, #32
 8000878:	2b00      	cmp	r3, #0
 800087a:	d008      	beq.n	800088e <DMA1_Channel2_IRQHandler+0x1e>
        // clear interrupt
        DMA1->IFCR |= DMA_IFCR_CTCIF2;
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <DMA1_Channel2_IRQHandler+0x24>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <DMA1_Channel2_IRQHandler+0x24>)
 8000882:	f043 0320 	orr.w	r3, r3, #32
 8000886:	6053      	str	r3, [r2, #4]
		receiving = 0;
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <DMA1_Channel2_IRQHandler+0x28>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
		// Disable receive DMA
		// USART2->CR3 &= ~USART_CR3_DMAR;
    }
}
 800088e:	bf00      	nop
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40020000 	.word	0x40020000
 8000898:	20001084 	.word	0x20001084

0800089c <DMA1_Channel1_IRQHandler>:

// UART transmission finish interrupt
void DMA1_Channel1_IRQHandler(void)
{
	// Wait for character transmit complete - TC bit
	while(!(UART4->ISR & (1 << 6))) {};
 800089c:	bf00      	nop
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <DMA1_Channel1_IRQHandler+0x30>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0f9      	beq.n	800089e <DMA1_Channel1_IRQHandler+0x2>
    // Clear stream transfer complete interrupt
    if (DMA1->ISR & DMA_ISR_TCIF1) {
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <DMA1_Channel1_IRQHandler+0x34>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d008      	beq.n	80008c8 <DMA1_Channel1_IRQHandler+0x2c>
        // clear interrupt
        DMA1->IFCR |= DMA_IFCR_CTCIF1;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <DMA1_Channel1_IRQHandler+0x34>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <DMA1_Channel1_IRQHandler+0x34>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6053      	str	r3, [r2, #4]
		transmitting = 0;
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <DMA1_Channel1_IRQHandler+0x38>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
    }
}
 80008c8:	bf00      	nop
 80008ca:	4770      	bx	lr
 80008cc:	40004c00 	.word	0x40004c00
 80008d0:	40020000 	.word	0x40020000
 80008d4:	20001088 	.word	0x20001088

080008d8 <uart_dma_init>:

// Setup UART DMA
void uart_dma_init(void) {
	// Enable transmit DMA
	UART4->CR3 |= (1U<<7);
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <uart_dma_init+0x34>)
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <uart_dma_init+0x34>)
 80008de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e2:	6093      	str	r3, [r2, #8]
	// Enable receive DMA
	UART4->CR3 |= (1U<<6);
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <uart_dma_init+0x34>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	4a08      	ldr	r2, [pc, #32]	; (800090c <uart_dma_init+0x34>)
 80008ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ee:	6093      	str	r3, [r2, #8]
	// Enable DMA1 clock
	RCC->AHB1ENR |= (1U<<0);
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <uart_dma_init+0x38>)
 80008f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008f4:	4a06      	ldr	r2, [pc, #24]	; (8000910 <uart_dma_init+0x38>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6493      	str	r3, [r2, #72]	; 0x48
	// Enable DMAMUX clock
	RCC->AHB1ENR |= (1U<<2);
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <uart_dma_init+0x38>)
 80008fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000900:	4a03      	ldr	r2, [pc, #12]	; (8000910 <uart_dma_init+0x38>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	6493      	str	r3, [r2, #72]	; 0x48
}
 8000908:	bf00      	nop
 800090a:	4770      	bx	lr
 800090c:	40004c00 	.word	0x40004c00
 8000910:	40021000 	.word	0x40021000

08000914 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000914:	4b10      	ldr	r3, [pc, #64]	; (8000958 <SystemInit+0x44>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091a:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <SystemInit+0x44>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  	// Set MSION bit
	RCC->CR |= 1U<<0;
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <SystemInit+0x48>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0c      	ldr	r2, [pc, #48]	; (800095c <SystemInit+0x48>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6013      	str	r3, [r2, #0]

	// Reset HSEON, CSSON, PLLON, and HSEBYP bit
	RCC->CR &= ~((1U<<16) | (1U<<19) | (1U<<24) | (1U<<18));
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <SystemInit+0x48>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a09      	ldr	r2, [pc, #36]	; (800095c <SystemInit+0x48>)
 8000936:	f023 7386 	bic.w	r3, r3, #17563648	; 0x10c0000
 800093a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800093e:	6013      	str	r3, [r2, #0]
	// Reset RCC clock configuration
	RCC->CFGR = 0x00000000;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <SystemInit+0x48>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
	RCC->PLLCFGR = 0x00001000;	
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <SystemInit+0x48>)
 8000948:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800094c:	60da      	str	r2, [r3, #12]
	// Disable all clock interrupts
	RCC->CIER = 0x00000000;
 800094e:	4b03      	ldr	r3, [pc, #12]	; (800095c <SystemInit+0x48>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
}
 8000954:	bf00      	nop
 8000956:	4770      	bx	lr
 8000958:	e000ed00 	.word	0xe000ed00
 800095c:	40021000 	.word	0x40021000

08000960 <set_sysclk_to_120>:
}

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

// Set system clock to 120 MHz and perform other initialization tasks
void set_sysclk_to_120(void) {
 8000960:	b08c      	sub	sp, #48	; 0x30
	// Actual bit values for PLL fields
	uint32_t pllm = PLL_M-1;
 8000962:	2303      	movs	r3, #3
 8000964:	930a      	str	r3, [sp, #40]	; 0x28
	uint32_t plln = PLL_N;
 8000966:	2314      	movs	r3, #20
 8000968:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t pllr = PLL_R/2 - 1;
 800096a:	2300      	movs	r3, #0
 800096c:	9308      	str	r3, [sp, #32]
	volatile uint32_t * cr = &(RCC->CR);
 800096e:	4b71      	ldr	r3, [pc, #452]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000970:	9307      	str	r3, [sp, #28]
	volatile uint32_t * bdcr = &(RCC->BDCR);
 8000972:	4b71      	ldr	r3, [pc, #452]	; (8000b38 <set_sysclk_to_120+0x1d8>)
 8000974:	9306      	str	r3, [sp, #24]
	volatile uint32_t * pllcfgr = &(RCC->PLLCFGR);
 8000976:	4b71      	ldr	r3, [pc, #452]	; (8000b3c <set_sysclk_to_120+0x1dc>)
 8000978:	9305      	str	r3, [sp, #20]
	volatile uint32_t * cfgr = &(RCC->CFGR);
 800097a:	4b71      	ldr	r3, [pc, #452]	; (8000b40 <set_sysclk_to_120+0x1e0>)
 800097c:	9304      	str	r3, [sp, #16]
	volatile uint32_t * pwrcr = &(PWR->CR1);
 800097e:	4b71      	ldr	r3, [pc, #452]	; (8000b44 <set_sysclk_to_120+0x1e4>)
 8000980:	9303      	str	r3, [sp, #12]
	volatile uint32_t * icscr = &(RCC->ICSCR);
 8000982:	4b71      	ldr	r3, [pc, #452]	; (8000b48 <set_sysclk_to_120+0x1e8>)
 8000984:	9302      	str	r3, [sp, #8]
	volatile uint32_t * flashacr = &(FLASH->ACR);
 8000986:	4b71      	ldr	r3, [pc, #452]	; (8000b4c <set_sysclk_to_120+0x1ec>)
 8000988:	9301      	str	r3, [sp, #4]

	// Enable power interface clock
	RCC->APB1ENR1 |= 1U<<28;
 800098a:	4b6a      	ldr	r3, [pc, #424]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	4a69      	ldr	r2, [pc, #420]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6593      	str	r3, [r2, #88]	; 0x58
	// Select power range 1
	PWR->CR1 |= 1<<9;
 8000996:	4b6b      	ldr	r3, [pc, #428]	; (8000b44 <set_sysclk_to_120+0x1e4>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a6a      	ldr	r2, [pc, #424]	; (8000b44 <set_sysclk_to_120+0x1e4>)
 800099c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009a0:	6013      	str	r3, [r2, #0]
	// R1MODE bit - boost mode
	PWR->CR5 &= ~(1<<8);
 80009a2:	4b68      	ldr	r3, [pc, #416]	; (8000b44 <set_sysclk_to_120+0x1e4>)
 80009a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009a8:	4a66      	ldr	r2, [pc, #408]	; (8000b44 <set_sysclk_to_120+0x1e4>)
 80009aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	// Disable BDCR write protection
	PWR->CR1 |= 1U<<8;
 80009b2:	4b64      	ldr	r3, [pc, #400]	; (8000b44 <set_sysclk_to_120+0x1e4>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a63      	ldr	r2, [pc, #396]	; (8000b44 <set_sysclk_to_120+0x1e4>)
 80009b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009bc:	6013      	str	r3, [r2, #0]
	// Unreset BDCR
	// RCC->BDCR &= ~(1U<<16);
	// Enable LSE (for MSI PLL)
	RCC->BDCR |= 1U<<0;
 80009be:	4b5d      	ldr	r3, [pc, #372]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 80009c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009c4:	4a5b      	ldr	r2, [pc, #364]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	// Wait for LSE to be ready
	while(!(RCC->BDCR &(1U<<1)));
 80009ce:	bf00      	nop
 80009d0:	4b58      	ldr	r3, [pc, #352]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 80009d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0f8      	beq.n	80009d0 <set_sysclk_to_120+0x70>

	// Enable MSI
	RCC->CR |= 1U<<0;
 80009de:	4b55      	ldr	r3, [pc, #340]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a54      	ldr	r2, [pc, #336]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 80009ea:	bf00      	nop
 80009ec:	4b51      	ldr	r3, [pc, #324]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f9      	beq.n	80009ec <set_sysclk_to_120+0x8c>
	// Set MSI clock to 48 Mhz
	RCC->CR |= 1U<<3; // Select CR register value
 80009f8:	4b4e      	ldr	r3, [pc, #312]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a4d      	ldr	r2, [pc, #308]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 80009fe:	f043 0308 	orr.w	r3, r3, #8
 8000a02:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 8000a04:	bf00      	nop
 8000a06:	4b4b      	ldr	r3, [pc, #300]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d0f9      	beq.n	8000a06 <set_sysclk_to_120+0xa6>
	RCC->CR &= ~(0xFF << 4);
 8000a12:	4b48      	ldr	r3, [pc, #288]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a47      	ldr	r2, [pc, #284]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a18:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000a1c:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 8000a1e:	bf00      	nop
 8000a20:	4b44      	ldr	r3, [pc, #272]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f003 0302 	and.w	r3, r3, #2
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d0f9      	beq.n	8000a20 <set_sysclk_to_120+0xc0>
	RCC->CR |= (11 << 4);
 8000a2c:	4b41      	ldr	r3, [pc, #260]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a40      	ldr	r2, [pc, #256]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a32:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000a36:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 8000a38:	bf00      	nop
 8000a3a:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d0f9      	beq.n	8000a3a <set_sysclk_to_120+0xda>
	// Enable MSI PLL
	RCC->CR |= 1U<<2;
 8000a46:	4b3b      	ldr	r3, [pc, #236]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a3a      	ldr	r2, [pc, #232]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 8000a52:	bf00      	nop
 8000a54:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f003 0302 	and.w	r3, r3, #2
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0f9      	beq.n	8000a54 <set_sysclk_to_120+0xf4>

	// Set AHB Prescaler - 2
	RCC->CFGR |= (4<<4);
 8000a60:	4b34      	ldr	r3, [pc, #208]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	4a33      	ldr	r2, [pc, #204]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6a:	6093      	str	r3, [r2, #8]
	// Set APB1 low speed prescaler - 1
	RCC->CFGR |= (0<<8);
 8000a6c:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a6e:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	6093      	str	r3, [r2, #8]
	// Set APB2 high speed prescaler - 1
	RCC->CFGR |= (0<<11);
 8000a74:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a76:	4a2f      	ldr	r2, [pc, #188]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	6093      	str	r3, [r2, #8]

	// Disable PLL
	RCC->CR &= ~(1U<<24);
 8000a7c:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a2c      	ldr	r2, [pc, #176]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a86:	6013      	str	r3, [r2, #0]
	// Wait for PLL to unlock
	while((RCC->CR & (1U<<25)));
 8000a88:	bf00      	nop
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1f9      	bne.n	8000a8a <set_sysclk_to_120+0x12a>
	// Reset PLLN bits
	RCC->PLLCFGR = 0;
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
	// Set PLL dividers, and source to MSI
	RCC->PLLCFGR |= (pllm<<4) | (plln<<8) | (pllr<<25) | (1 << 0);
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000aa2:	0119      	lsls	r1, r3, #4
 8000aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000aa6:	021b      	lsls	r3, r3, #8
 8000aa8:	4319      	orrs	r1, r3
 8000aaa:	9b08      	ldr	r3, [sp, #32]
 8000aac:	065b      	lsls	r3, r3, #25
 8000aae:	430b      	orrs	r3, r1
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	4a20      	ldr	r2, [pc, #128]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	60d3      	str	r3, [r2, #12]
	// Enable main PLL
	RCC->CR |= 1U<<24;
 8000aba:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ac4:	6013      	str	r3, [r2, #0]
	// Set R EN bit
	RCC->PLLCFGR |= (1U << 24);
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ad0:	60d3      	str	r3, [r2, #12]
	// Wait until PLL is ready
	while(!(RCC->CR & (1 << 25)));
 8000ad2:	bf00      	nop
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0f9      	beq.n	8000ad4 <set_sysclk_to_120+0x174>

	// Flash: Prefetch enable, instruction cache enable, data cache enable, latency to 5 wait states (Depends on CPU clock, refer to table 12 in RM0432)
	FLASH->ACR |= (1U << 8) | (1U << 9) | (1U << 10) | (5 << 0);
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <set_sysclk_to_120+0x1ec>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <set_sysclk_to_120+0x1ec>)
 8000ae6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000aea:	f043 0305 	orr.w	r3, r3, #5
 8000aee:	6013      	str	r3, [r2, #0]

	// Select main PLL as system clock source
	RCC->CFGR |= 3U<<0;
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000af6:	f043 0303 	orr.w	r3, r3, #3
 8000afa:	6093      	str	r3, [r2, #8]
	// Wait until main PLL is set as clock
	while (1) {
		if((RCC->CFGR & 0xc) == 0xc) {
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	f003 030c 	and.w	r3, r3, #12
 8000b04:	2b0c      	cmp	r3, #12
 8000b06:	d000      	beq.n	8000b0a <set_sysclk_to_120+0x1aa>
 8000b08:	e7f8      	b.n	8000afc <set_sysclk_to_120+0x19c>
			break;
 8000b0a:	bf00      	nop
		}
	}

	// Wait about 1us
	for (int i=0; i<100; i++){};
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8000b10:	e002      	b.n	8000b18 <set_sysclk_to_120+0x1b8>
 8000b12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000b14:	3301      	adds	r3, #1
 8000b16:	930b      	str	r3, [sp, #44]	; 0x2c
 8000b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000b1a:	2b63      	cmp	r3, #99	; 0x63
 8000b1c:	ddf9      	ble.n	8000b12 <set_sysclk_to_120+0x1b2>
	// Set AHB Prescaler - 1
	RCC->CFGR |= (0<<4);
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <set_sysclk_to_120+0x1d4>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	6093      	str	r3, [r2, #8]

	// Update SystemCoreClock variable
	SystemCoreClock = 120000000;
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <set_sysclk_to_120+0x1f0>)
 8000b28:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <set_sysclk_to_120+0x1f4>)
 8000b2a:	601a      	str	r2, [r3, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	b00c      	add	sp, #48	; 0x30
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40021090 	.word	0x40021090
 8000b3c:	4002100c 	.word	0x4002100c
 8000b40:	40021008 	.word	0x40021008
 8000b44:	40007000 	.word	0x40007000
 8000b48:	40021004 	.word	0x40021004
 8000b4c:	40022000 	.word	0x40022000
 8000b50:	20000000 	.word	0x20000000
 8000b54:	07270e00 	.word	0x07270e00

08000b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b5c:	f7ff feda 	bl	8000914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b62:	490d      	ldr	r1, [pc, #52]	; (8000b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <LoopForever+0xe>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b78:	4c0a      	ldr	r4, [pc, #40]	; (8000ba4 <LoopForever+0x16>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b86:	f000 f811 	bl	8000bac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b8a:	f7ff fbad 	bl	80002e8 <main>

08000b8e <LoopForever>:

LoopForever:
    b LoopForever
 8000b8e:	e7fe      	b.n	8000b8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b90:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b98:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b9c:	08001588 	.word	0x08001588
  ldr r2, =_sbss
 8000ba0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ba4:	200010a0 	.word	0x200010a0

08000ba8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC1_IRQHandler>
	...

08000bac <__libc_init_array>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	4d0d      	ldr	r5, [pc, #52]	; (8000be4 <__libc_init_array+0x38>)
 8000bb0:	4c0d      	ldr	r4, [pc, #52]	; (8000be8 <__libc_init_array+0x3c>)
 8000bb2:	1b64      	subs	r4, r4, r5
 8000bb4:	10a4      	asrs	r4, r4, #2
 8000bb6:	2600      	movs	r6, #0
 8000bb8:	42a6      	cmp	r6, r4
 8000bba:	d109      	bne.n	8000bd0 <__libc_init_array+0x24>
 8000bbc:	4d0b      	ldr	r5, [pc, #44]	; (8000bec <__libc_init_array+0x40>)
 8000bbe:	4c0c      	ldr	r4, [pc, #48]	; (8000bf0 <__libc_init_array+0x44>)
 8000bc0:	f000 fc94 	bl	80014ec <_init>
 8000bc4:	1b64      	subs	r4, r4, r5
 8000bc6:	10a4      	asrs	r4, r4, #2
 8000bc8:	2600      	movs	r6, #0
 8000bca:	42a6      	cmp	r6, r4
 8000bcc:	d105      	bne.n	8000bda <__libc_init_array+0x2e>
 8000bce:	bd70      	pop	{r4, r5, r6, pc}
 8000bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bd4:	4798      	blx	r3
 8000bd6:	3601      	adds	r6, #1
 8000bd8:	e7ee      	b.n	8000bb8 <__libc_init_array+0xc>
 8000bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bde:	4798      	blx	r3
 8000be0:	3601      	adds	r6, #1
 8000be2:	e7f2      	b.n	8000bca <__libc_init_array+0x1e>
 8000be4:	08001578 	.word	0x08001578
 8000be8:	08001578 	.word	0x08001578
 8000bec:	08001578 	.word	0x08001578
 8000bf0:	0800157c 	.word	0x0800157c

08000bf4 <memset>:
 8000bf4:	4402      	add	r2, r0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d100      	bne.n	8000bfe <memset+0xa>
 8000bfc:	4770      	bx	lr
 8000bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8000c02:	e7f9      	b.n	8000bf8 <memset+0x4>

08000c04 <siprintf>:
 8000c04:	b40e      	push	{r1, r2, r3}
 8000c06:	b500      	push	{lr}
 8000c08:	b09c      	sub	sp, #112	; 0x70
 8000c0a:	ab1d      	add	r3, sp, #116	; 0x74
 8000c0c:	9002      	str	r0, [sp, #8]
 8000c0e:	9006      	str	r0, [sp, #24]
 8000c10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <siprintf+0x38>)
 8000c16:	9107      	str	r1, [sp, #28]
 8000c18:	9104      	str	r1, [sp, #16]
 8000c1a:	4909      	ldr	r1, [pc, #36]	; (8000c40 <siprintf+0x3c>)
 8000c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c20:	9105      	str	r1, [sp, #20]
 8000c22:	6800      	ldr	r0, [r0, #0]
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	a902      	add	r1, sp, #8
 8000c28:	f000 f868 	bl	8000cfc <_svfiprintf_r>
 8000c2c:	9b02      	ldr	r3, [sp, #8]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
 8000c32:	b01c      	add	sp, #112	; 0x70
 8000c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c38:	b003      	add	sp, #12
 8000c3a:	4770      	bx	lr
 8000c3c:	20000004 	.word	0x20000004
 8000c40:	ffff0208 	.word	0xffff0208

08000c44 <__retarget_lock_acquire_recursive>:
 8000c44:	4770      	bx	lr

08000c46 <__retarget_lock_release_recursive>:
 8000c46:	4770      	bx	lr

08000c48 <__ssputs_r>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	688e      	ldr	r6, [r1, #8]
 8000c4e:	461f      	mov	r7, r3
 8000c50:	42be      	cmp	r6, r7
 8000c52:	680b      	ldr	r3, [r1, #0]
 8000c54:	4682      	mov	sl, r0
 8000c56:	460c      	mov	r4, r1
 8000c58:	4690      	mov	r8, r2
 8000c5a:	d82c      	bhi.n	8000cb6 <__ssputs_r+0x6e>
 8000c5c:	898a      	ldrh	r2, [r1, #12]
 8000c5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000c62:	d026      	beq.n	8000cb2 <__ssputs_r+0x6a>
 8000c64:	6965      	ldr	r5, [r4, #20]
 8000c66:	6909      	ldr	r1, [r1, #16]
 8000c68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000c6c:	eba3 0901 	sub.w	r9, r3, r1
 8000c70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000c74:	1c7b      	adds	r3, r7, #1
 8000c76:	444b      	add	r3, r9
 8000c78:	106d      	asrs	r5, r5, #1
 8000c7a:	429d      	cmp	r5, r3
 8000c7c:	bf38      	it	cc
 8000c7e:	461d      	movcc	r5, r3
 8000c80:	0553      	lsls	r3, r2, #21
 8000c82:	d527      	bpl.n	8000cd4 <__ssputs_r+0x8c>
 8000c84:	4629      	mov	r1, r5
 8000c86:	f000 fb5b 	bl	8001340 <_malloc_r>
 8000c8a:	4606      	mov	r6, r0
 8000c8c:	b360      	cbz	r0, 8000ce8 <__ssputs_r+0xa0>
 8000c8e:	6921      	ldr	r1, [r4, #16]
 8000c90:	464a      	mov	r2, r9
 8000c92:	f000 fac1 	bl	8001218 <memcpy>
 8000c96:	89a3      	ldrh	r3, [r4, #12]
 8000c98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca0:	81a3      	strh	r3, [r4, #12]
 8000ca2:	6126      	str	r6, [r4, #16]
 8000ca4:	6165      	str	r5, [r4, #20]
 8000ca6:	444e      	add	r6, r9
 8000ca8:	eba5 0509 	sub.w	r5, r5, r9
 8000cac:	6026      	str	r6, [r4, #0]
 8000cae:	60a5      	str	r5, [r4, #8]
 8000cb0:	463e      	mov	r6, r7
 8000cb2:	42be      	cmp	r6, r7
 8000cb4:	d900      	bls.n	8000cb8 <__ssputs_r+0x70>
 8000cb6:	463e      	mov	r6, r7
 8000cb8:	6820      	ldr	r0, [r4, #0]
 8000cba:	4632      	mov	r2, r6
 8000cbc:	4641      	mov	r1, r8
 8000cbe:	f000 fab9 	bl	8001234 <memmove>
 8000cc2:	68a3      	ldr	r3, [r4, #8]
 8000cc4:	1b9b      	subs	r3, r3, r6
 8000cc6:	60a3      	str	r3, [r4, #8]
 8000cc8:	6823      	ldr	r3, [r4, #0]
 8000cca:	4433      	add	r3, r6
 8000ccc:	6023      	str	r3, [r4, #0]
 8000cce:	2000      	movs	r0, #0
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	462a      	mov	r2, r5
 8000cd6:	f000 fba7 	bl	8001428 <_realloc_r>
 8000cda:	4606      	mov	r6, r0
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	d1e0      	bne.n	8000ca2 <__ssputs_r+0x5a>
 8000ce0:	6921      	ldr	r1, [r4, #16]
 8000ce2:	4650      	mov	r0, sl
 8000ce4:	f000 fac0 	bl	8001268 <_free_r>
 8000ce8:	230c      	movs	r3, #12
 8000cea:	f8ca 3000 	str.w	r3, [sl]
 8000cee:	89a3      	ldrh	r3, [r4, #12]
 8000cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf4:	81a3      	strh	r3, [r4, #12]
 8000cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cfa:	e7e9      	b.n	8000cd0 <__ssputs_r+0x88>

08000cfc <_svfiprintf_r>:
 8000cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d00:	4698      	mov	r8, r3
 8000d02:	898b      	ldrh	r3, [r1, #12]
 8000d04:	061b      	lsls	r3, r3, #24
 8000d06:	b09d      	sub	sp, #116	; 0x74
 8000d08:	4607      	mov	r7, r0
 8000d0a:	460d      	mov	r5, r1
 8000d0c:	4614      	mov	r4, r2
 8000d0e:	d50e      	bpl.n	8000d2e <_svfiprintf_r+0x32>
 8000d10:	690b      	ldr	r3, [r1, #16]
 8000d12:	b963      	cbnz	r3, 8000d2e <_svfiprintf_r+0x32>
 8000d14:	2140      	movs	r1, #64	; 0x40
 8000d16:	f000 fb13 	bl	8001340 <_malloc_r>
 8000d1a:	6028      	str	r0, [r5, #0]
 8000d1c:	6128      	str	r0, [r5, #16]
 8000d1e:	b920      	cbnz	r0, 8000d2a <_svfiprintf_r+0x2e>
 8000d20:	230c      	movs	r3, #12
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d28:	e0d0      	b.n	8000ecc <_svfiprintf_r+0x1d0>
 8000d2a:	2340      	movs	r3, #64	; 0x40
 8000d2c:	616b      	str	r3, [r5, #20]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	9309      	str	r3, [sp, #36]	; 0x24
 8000d32:	2320      	movs	r3, #32
 8000d34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d38:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d3c:	2330      	movs	r3, #48	; 0x30
 8000d3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000ee4 <_svfiprintf_r+0x1e8>
 8000d42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d46:	f04f 0901 	mov.w	r9, #1
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	469a      	mov	sl, r3
 8000d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d52:	b10a      	cbz	r2, 8000d58 <_svfiprintf_r+0x5c>
 8000d54:	2a25      	cmp	r2, #37	; 0x25
 8000d56:	d1f9      	bne.n	8000d4c <_svfiprintf_r+0x50>
 8000d58:	ebba 0b04 	subs.w	fp, sl, r4
 8000d5c:	d00b      	beq.n	8000d76 <_svfiprintf_r+0x7a>
 8000d5e:	465b      	mov	r3, fp
 8000d60:	4622      	mov	r2, r4
 8000d62:	4629      	mov	r1, r5
 8000d64:	4638      	mov	r0, r7
 8000d66:	f7ff ff6f 	bl	8000c48 <__ssputs_r>
 8000d6a:	3001      	adds	r0, #1
 8000d6c:	f000 80a9 	beq.w	8000ec2 <_svfiprintf_r+0x1c6>
 8000d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d72:	445a      	add	r2, fp
 8000d74:	9209      	str	r2, [sp, #36]	; 0x24
 8000d76:	f89a 3000 	ldrb.w	r3, [sl]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 80a1 	beq.w	8000ec2 <_svfiprintf_r+0x1c6>
 8000d80:	2300      	movs	r3, #0
 8000d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d8a:	f10a 0a01 	add.w	sl, sl, #1
 8000d8e:	9304      	str	r3, [sp, #16]
 8000d90:	9307      	str	r3, [sp, #28]
 8000d92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000d96:	931a      	str	r3, [sp, #104]	; 0x68
 8000d98:	4654      	mov	r4, sl
 8000d9a:	2205      	movs	r2, #5
 8000d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000da0:	4850      	ldr	r0, [pc, #320]	; (8000ee4 <_svfiprintf_r+0x1e8>)
 8000da2:	f7ff fa15 	bl	80001d0 <memchr>
 8000da6:	9a04      	ldr	r2, [sp, #16]
 8000da8:	b9d8      	cbnz	r0, 8000de2 <_svfiprintf_r+0xe6>
 8000daa:	06d0      	lsls	r0, r2, #27
 8000dac:	bf44      	itt	mi
 8000dae:	2320      	movmi	r3, #32
 8000db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000db4:	0711      	lsls	r1, r2, #28
 8000db6:	bf44      	itt	mi
 8000db8:	232b      	movmi	r3, #43	; 0x2b
 8000dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8000dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8000dc4:	d015      	beq.n	8000df2 <_svfiprintf_r+0xf6>
 8000dc6:	9a07      	ldr	r2, [sp, #28]
 8000dc8:	4654      	mov	r4, sl
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f04f 0c0a 	mov.w	ip, #10
 8000dd0:	4621      	mov	r1, r4
 8000dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dd6:	3b30      	subs	r3, #48	; 0x30
 8000dd8:	2b09      	cmp	r3, #9
 8000dda:	d94d      	bls.n	8000e78 <_svfiprintf_r+0x17c>
 8000ddc:	b1b0      	cbz	r0, 8000e0c <_svfiprintf_r+0x110>
 8000dde:	9207      	str	r2, [sp, #28]
 8000de0:	e014      	b.n	8000e0c <_svfiprintf_r+0x110>
 8000de2:	eba0 0308 	sub.w	r3, r0, r8
 8000de6:	fa09 f303 	lsl.w	r3, r9, r3
 8000dea:	4313      	orrs	r3, r2
 8000dec:	9304      	str	r3, [sp, #16]
 8000dee:	46a2      	mov	sl, r4
 8000df0:	e7d2      	b.n	8000d98 <_svfiprintf_r+0x9c>
 8000df2:	9b03      	ldr	r3, [sp, #12]
 8000df4:	1d19      	adds	r1, r3, #4
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	9103      	str	r1, [sp, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	bfbb      	ittet	lt
 8000dfe:	425b      	neglt	r3, r3
 8000e00:	f042 0202 	orrlt.w	r2, r2, #2
 8000e04:	9307      	strge	r3, [sp, #28]
 8000e06:	9307      	strlt	r3, [sp, #28]
 8000e08:	bfb8      	it	lt
 8000e0a:	9204      	strlt	r2, [sp, #16]
 8000e0c:	7823      	ldrb	r3, [r4, #0]
 8000e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8000e10:	d10c      	bne.n	8000e2c <_svfiprintf_r+0x130>
 8000e12:	7863      	ldrb	r3, [r4, #1]
 8000e14:	2b2a      	cmp	r3, #42	; 0x2a
 8000e16:	d134      	bne.n	8000e82 <_svfiprintf_r+0x186>
 8000e18:	9b03      	ldr	r3, [sp, #12]
 8000e1a:	1d1a      	adds	r2, r3, #4
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	9203      	str	r2, [sp, #12]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bfb8      	it	lt
 8000e24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000e28:	3402      	adds	r4, #2
 8000e2a:	9305      	str	r3, [sp, #20]
 8000e2c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000ef4 <_svfiprintf_r+0x1f8>
 8000e30:	7821      	ldrb	r1, [r4, #0]
 8000e32:	2203      	movs	r2, #3
 8000e34:	4650      	mov	r0, sl
 8000e36:	f7ff f9cb 	bl	80001d0 <memchr>
 8000e3a:	b138      	cbz	r0, 8000e4c <_svfiprintf_r+0x150>
 8000e3c:	9b04      	ldr	r3, [sp, #16]
 8000e3e:	eba0 000a 	sub.w	r0, r0, sl
 8000e42:	2240      	movs	r2, #64	; 0x40
 8000e44:	4082      	lsls	r2, r0
 8000e46:	4313      	orrs	r3, r2
 8000e48:	3401      	adds	r4, #1
 8000e4a:	9304      	str	r3, [sp, #16]
 8000e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e50:	4825      	ldr	r0, [pc, #148]	; (8000ee8 <_svfiprintf_r+0x1ec>)
 8000e52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e56:	2206      	movs	r2, #6
 8000e58:	f7ff f9ba 	bl	80001d0 <memchr>
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	d038      	beq.n	8000ed2 <_svfiprintf_r+0x1d6>
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <_svfiprintf_r+0x1f0>)
 8000e62:	bb1b      	cbnz	r3, 8000eac <_svfiprintf_r+0x1b0>
 8000e64:	9b03      	ldr	r3, [sp, #12]
 8000e66:	3307      	adds	r3, #7
 8000e68:	f023 0307 	bic.w	r3, r3, #7
 8000e6c:	3308      	adds	r3, #8
 8000e6e:	9303      	str	r3, [sp, #12]
 8000e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e72:	4433      	add	r3, r6
 8000e74:	9309      	str	r3, [sp, #36]	; 0x24
 8000e76:	e768      	b.n	8000d4a <_svfiprintf_r+0x4e>
 8000e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e7c:	460c      	mov	r4, r1
 8000e7e:	2001      	movs	r0, #1
 8000e80:	e7a6      	b.n	8000dd0 <_svfiprintf_r+0xd4>
 8000e82:	2300      	movs	r3, #0
 8000e84:	3401      	adds	r4, #1
 8000e86:	9305      	str	r3, [sp, #20]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f04f 0c0a 	mov.w	ip, #10
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e94:	3a30      	subs	r2, #48	; 0x30
 8000e96:	2a09      	cmp	r2, #9
 8000e98:	d903      	bls.n	8000ea2 <_svfiprintf_r+0x1a6>
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0c6      	beq.n	8000e2c <_svfiprintf_r+0x130>
 8000e9e:	9105      	str	r1, [sp, #20]
 8000ea0:	e7c4      	b.n	8000e2c <_svfiprintf_r+0x130>
 8000ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e7f0      	b.n	8000e8e <_svfiprintf_r+0x192>
 8000eac:	ab03      	add	r3, sp, #12
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	462a      	mov	r2, r5
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <_svfiprintf_r+0x1f4>)
 8000eb4:	a904      	add	r1, sp, #16
 8000eb6:	4638      	mov	r0, r7
 8000eb8:	f3af 8000 	nop.w
 8000ebc:	1c42      	adds	r2, r0, #1
 8000ebe:	4606      	mov	r6, r0
 8000ec0:	d1d6      	bne.n	8000e70 <_svfiprintf_r+0x174>
 8000ec2:	89ab      	ldrh	r3, [r5, #12]
 8000ec4:	065b      	lsls	r3, r3, #25
 8000ec6:	f53f af2d 	bmi.w	8000d24 <_svfiprintf_r+0x28>
 8000eca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ecc:	b01d      	add	sp, #116	; 0x74
 8000ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ed2:	ab03      	add	r3, sp, #12
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	462a      	mov	r2, r5
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <_svfiprintf_r+0x1f4>)
 8000eda:	a904      	add	r1, sp, #16
 8000edc:	4638      	mov	r0, r7
 8000ede:	f000 f879 	bl	8000fd4 <_printf_i>
 8000ee2:	e7eb      	b.n	8000ebc <_svfiprintf_r+0x1c0>
 8000ee4:	08001541 	.word	0x08001541
 8000ee8:	0800154b 	.word	0x0800154b
 8000eec:	00000000 	.word	0x00000000
 8000ef0:	08000c49 	.word	0x08000c49
 8000ef4:	08001547 	.word	0x08001547

08000ef8 <_printf_common>:
 8000ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000efc:	4616      	mov	r6, r2
 8000efe:	4699      	mov	r9, r3
 8000f00:	688a      	ldr	r2, [r1, #8]
 8000f02:	690b      	ldr	r3, [r1, #16]
 8000f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	bfb8      	it	lt
 8000f0c:	4613      	movlt	r3, r2
 8000f0e:	6033      	str	r3, [r6, #0]
 8000f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f14:	4607      	mov	r7, r0
 8000f16:	460c      	mov	r4, r1
 8000f18:	b10a      	cbz	r2, 8000f1e <_printf_common+0x26>
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	6033      	str	r3, [r6, #0]
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	0699      	lsls	r1, r3, #26
 8000f22:	bf42      	ittt	mi
 8000f24:	6833      	ldrmi	r3, [r6, #0]
 8000f26:	3302      	addmi	r3, #2
 8000f28:	6033      	strmi	r3, [r6, #0]
 8000f2a:	6825      	ldr	r5, [r4, #0]
 8000f2c:	f015 0506 	ands.w	r5, r5, #6
 8000f30:	d106      	bne.n	8000f40 <_printf_common+0x48>
 8000f32:	f104 0a19 	add.w	sl, r4, #25
 8000f36:	68e3      	ldr	r3, [r4, #12]
 8000f38:	6832      	ldr	r2, [r6, #0]
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	42ab      	cmp	r3, r5
 8000f3e:	dc26      	bgt.n	8000f8e <_printf_common+0x96>
 8000f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000f44:	1e13      	subs	r3, r2, #0
 8000f46:	6822      	ldr	r2, [r4, #0]
 8000f48:	bf18      	it	ne
 8000f4a:	2301      	movne	r3, #1
 8000f4c:	0692      	lsls	r2, r2, #26
 8000f4e:	d42b      	bmi.n	8000fa8 <_printf_common+0xb0>
 8000f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f54:	4649      	mov	r1, r9
 8000f56:	4638      	mov	r0, r7
 8000f58:	47c0      	blx	r8
 8000f5a:	3001      	adds	r0, #1
 8000f5c:	d01e      	beq.n	8000f9c <_printf_common+0xa4>
 8000f5e:	6823      	ldr	r3, [r4, #0]
 8000f60:	6922      	ldr	r2, [r4, #16]
 8000f62:	f003 0306 	and.w	r3, r3, #6
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf02      	ittt	eq
 8000f6a:	68e5      	ldreq	r5, [r4, #12]
 8000f6c:	6833      	ldreq	r3, [r6, #0]
 8000f6e:	1aed      	subeq	r5, r5, r3
 8000f70:	68a3      	ldr	r3, [r4, #8]
 8000f72:	bf0c      	ite	eq
 8000f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f78:	2500      	movne	r5, #0
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	bfc4      	itt	gt
 8000f7e:	1a9b      	subgt	r3, r3, r2
 8000f80:	18ed      	addgt	r5, r5, r3
 8000f82:	2600      	movs	r6, #0
 8000f84:	341a      	adds	r4, #26
 8000f86:	42b5      	cmp	r5, r6
 8000f88:	d11a      	bne.n	8000fc0 <_printf_common+0xc8>
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	e008      	b.n	8000fa0 <_printf_common+0xa8>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	4652      	mov	r2, sl
 8000f92:	4649      	mov	r1, r9
 8000f94:	4638      	mov	r0, r7
 8000f96:	47c0      	blx	r8
 8000f98:	3001      	adds	r0, #1
 8000f9a:	d103      	bne.n	8000fa4 <_printf_common+0xac>
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa4:	3501      	adds	r5, #1
 8000fa6:	e7c6      	b.n	8000f36 <_printf_common+0x3e>
 8000fa8:	18e1      	adds	r1, r4, r3
 8000faa:	1c5a      	adds	r2, r3, #1
 8000fac:	2030      	movs	r0, #48	; 0x30
 8000fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000fb2:	4422      	add	r2, r4
 8000fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	e7c7      	b.n	8000f50 <_printf_common+0x58>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	4622      	mov	r2, r4
 8000fc4:	4649      	mov	r1, r9
 8000fc6:	4638      	mov	r0, r7
 8000fc8:	47c0      	blx	r8
 8000fca:	3001      	adds	r0, #1
 8000fcc:	d0e6      	beq.n	8000f9c <_printf_common+0xa4>
 8000fce:	3601      	adds	r6, #1
 8000fd0:	e7d9      	b.n	8000f86 <_printf_common+0x8e>
	...

08000fd4 <_printf_i>:
 8000fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000fd8:	7e0f      	ldrb	r7, [r1, #24]
 8000fda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000fdc:	2f78      	cmp	r7, #120	; 0x78
 8000fde:	4691      	mov	r9, r2
 8000fe0:	4680      	mov	r8, r0
 8000fe2:	460c      	mov	r4, r1
 8000fe4:	469a      	mov	sl, r3
 8000fe6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000fea:	d807      	bhi.n	8000ffc <_printf_i+0x28>
 8000fec:	2f62      	cmp	r7, #98	; 0x62
 8000fee:	d80a      	bhi.n	8001006 <_printf_i+0x32>
 8000ff0:	2f00      	cmp	r7, #0
 8000ff2:	f000 80d4 	beq.w	800119e <_printf_i+0x1ca>
 8000ff6:	2f58      	cmp	r7, #88	; 0x58
 8000ff8:	f000 80c0 	beq.w	800117c <_printf_i+0x1a8>
 8000ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001004:	e03a      	b.n	800107c <_printf_i+0xa8>
 8001006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800100a:	2b15      	cmp	r3, #21
 800100c:	d8f6      	bhi.n	8000ffc <_printf_i+0x28>
 800100e:	a101      	add	r1, pc, #4	; (adr r1, 8001014 <_printf_i+0x40>)
 8001010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001014:	0800106d 	.word	0x0800106d
 8001018:	08001081 	.word	0x08001081
 800101c:	08000ffd 	.word	0x08000ffd
 8001020:	08000ffd 	.word	0x08000ffd
 8001024:	08000ffd 	.word	0x08000ffd
 8001028:	08000ffd 	.word	0x08000ffd
 800102c:	08001081 	.word	0x08001081
 8001030:	08000ffd 	.word	0x08000ffd
 8001034:	08000ffd 	.word	0x08000ffd
 8001038:	08000ffd 	.word	0x08000ffd
 800103c:	08000ffd 	.word	0x08000ffd
 8001040:	08001185 	.word	0x08001185
 8001044:	080010ad 	.word	0x080010ad
 8001048:	0800113f 	.word	0x0800113f
 800104c:	08000ffd 	.word	0x08000ffd
 8001050:	08000ffd 	.word	0x08000ffd
 8001054:	080011a7 	.word	0x080011a7
 8001058:	08000ffd 	.word	0x08000ffd
 800105c:	080010ad 	.word	0x080010ad
 8001060:	08000ffd 	.word	0x08000ffd
 8001064:	08000ffd 	.word	0x08000ffd
 8001068:	08001147 	.word	0x08001147
 800106c:	682b      	ldr	r3, [r5, #0]
 800106e:	1d1a      	adds	r2, r3, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	602a      	str	r2, [r5, #0]
 8001074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800107c:	2301      	movs	r3, #1
 800107e:	e09f      	b.n	80011c0 <_printf_i+0x1ec>
 8001080:	6820      	ldr	r0, [r4, #0]
 8001082:	682b      	ldr	r3, [r5, #0]
 8001084:	0607      	lsls	r7, r0, #24
 8001086:	f103 0104 	add.w	r1, r3, #4
 800108a:	6029      	str	r1, [r5, #0]
 800108c:	d501      	bpl.n	8001092 <_printf_i+0xbe>
 800108e:	681e      	ldr	r6, [r3, #0]
 8001090:	e003      	b.n	800109a <_printf_i+0xc6>
 8001092:	0646      	lsls	r6, r0, #25
 8001094:	d5fb      	bpl.n	800108e <_printf_i+0xba>
 8001096:	f9b3 6000 	ldrsh.w	r6, [r3]
 800109a:	2e00      	cmp	r6, #0
 800109c:	da03      	bge.n	80010a6 <_printf_i+0xd2>
 800109e:	232d      	movs	r3, #45	; 0x2d
 80010a0:	4276      	negs	r6, r6
 80010a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010a6:	485a      	ldr	r0, [pc, #360]	; (8001210 <_printf_i+0x23c>)
 80010a8:	230a      	movs	r3, #10
 80010aa:	e012      	b.n	80010d2 <_printf_i+0xfe>
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	6820      	ldr	r0, [r4, #0]
 80010b0:	1d19      	adds	r1, r3, #4
 80010b2:	6029      	str	r1, [r5, #0]
 80010b4:	0605      	lsls	r5, r0, #24
 80010b6:	d501      	bpl.n	80010bc <_printf_i+0xe8>
 80010b8:	681e      	ldr	r6, [r3, #0]
 80010ba:	e002      	b.n	80010c2 <_printf_i+0xee>
 80010bc:	0641      	lsls	r1, r0, #25
 80010be:	d5fb      	bpl.n	80010b8 <_printf_i+0xe4>
 80010c0:	881e      	ldrh	r6, [r3, #0]
 80010c2:	4853      	ldr	r0, [pc, #332]	; (8001210 <_printf_i+0x23c>)
 80010c4:	2f6f      	cmp	r7, #111	; 0x6f
 80010c6:	bf0c      	ite	eq
 80010c8:	2308      	moveq	r3, #8
 80010ca:	230a      	movne	r3, #10
 80010cc:	2100      	movs	r1, #0
 80010ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80010d2:	6865      	ldr	r5, [r4, #4]
 80010d4:	60a5      	str	r5, [r4, #8]
 80010d6:	2d00      	cmp	r5, #0
 80010d8:	bfa2      	ittt	ge
 80010da:	6821      	ldrge	r1, [r4, #0]
 80010dc:	f021 0104 	bicge.w	r1, r1, #4
 80010e0:	6021      	strge	r1, [r4, #0]
 80010e2:	b90e      	cbnz	r6, 80010e8 <_printf_i+0x114>
 80010e4:	2d00      	cmp	r5, #0
 80010e6:	d04b      	beq.n	8001180 <_printf_i+0x1ac>
 80010e8:	4615      	mov	r5, r2
 80010ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80010ee:	fb03 6711 	mls	r7, r3, r1, r6
 80010f2:	5dc7      	ldrb	r7, [r0, r7]
 80010f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80010f8:	4637      	mov	r7, r6
 80010fa:	42bb      	cmp	r3, r7
 80010fc:	460e      	mov	r6, r1
 80010fe:	d9f4      	bls.n	80010ea <_printf_i+0x116>
 8001100:	2b08      	cmp	r3, #8
 8001102:	d10b      	bne.n	800111c <_printf_i+0x148>
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	07de      	lsls	r6, r3, #31
 8001108:	d508      	bpl.n	800111c <_printf_i+0x148>
 800110a:	6923      	ldr	r3, [r4, #16]
 800110c:	6861      	ldr	r1, [r4, #4]
 800110e:	4299      	cmp	r1, r3
 8001110:	bfde      	ittt	le
 8001112:	2330      	movle	r3, #48	; 0x30
 8001114:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001118:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800111c:	1b52      	subs	r2, r2, r5
 800111e:	6122      	str	r2, [r4, #16]
 8001120:	f8cd a000 	str.w	sl, [sp]
 8001124:	464b      	mov	r3, r9
 8001126:	aa03      	add	r2, sp, #12
 8001128:	4621      	mov	r1, r4
 800112a:	4640      	mov	r0, r8
 800112c:	f7ff fee4 	bl	8000ef8 <_printf_common>
 8001130:	3001      	adds	r0, #1
 8001132:	d14a      	bne.n	80011ca <_printf_i+0x1f6>
 8001134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001138:	b004      	add	sp, #16
 800113a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113e:	6823      	ldr	r3, [r4, #0]
 8001140:	f043 0320 	orr.w	r3, r3, #32
 8001144:	6023      	str	r3, [r4, #0]
 8001146:	4833      	ldr	r0, [pc, #204]	; (8001214 <_printf_i+0x240>)
 8001148:	2778      	movs	r7, #120	; 0x78
 800114a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	6829      	ldr	r1, [r5, #0]
 8001152:	061f      	lsls	r7, r3, #24
 8001154:	f851 6b04 	ldr.w	r6, [r1], #4
 8001158:	d402      	bmi.n	8001160 <_printf_i+0x18c>
 800115a:	065f      	lsls	r7, r3, #25
 800115c:	bf48      	it	mi
 800115e:	b2b6      	uxthmi	r6, r6
 8001160:	07df      	lsls	r7, r3, #31
 8001162:	bf48      	it	mi
 8001164:	f043 0320 	orrmi.w	r3, r3, #32
 8001168:	6029      	str	r1, [r5, #0]
 800116a:	bf48      	it	mi
 800116c:	6023      	strmi	r3, [r4, #0]
 800116e:	b91e      	cbnz	r6, 8001178 <_printf_i+0x1a4>
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	f023 0320 	bic.w	r3, r3, #32
 8001176:	6023      	str	r3, [r4, #0]
 8001178:	2310      	movs	r3, #16
 800117a:	e7a7      	b.n	80010cc <_printf_i+0xf8>
 800117c:	4824      	ldr	r0, [pc, #144]	; (8001210 <_printf_i+0x23c>)
 800117e:	e7e4      	b.n	800114a <_printf_i+0x176>
 8001180:	4615      	mov	r5, r2
 8001182:	e7bd      	b.n	8001100 <_printf_i+0x12c>
 8001184:	682b      	ldr	r3, [r5, #0]
 8001186:	6826      	ldr	r6, [r4, #0]
 8001188:	6961      	ldr	r1, [r4, #20]
 800118a:	1d18      	adds	r0, r3, #4
 800118c:	6028      	str	r0, [r5, #0]
 800118e:	0635      	lsls	r5, r6, #24
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	d501      	bpl.n	8001198 <_printf_i+0x1c4>
 8001194:	6019      	str	r1, [r3, #0]
 8001196:	e002      	b.n	800119e <_printf_i+0x1ca>
 8001198:	0670      	lsls	r0, r6, #25
 800119a:	d5fb      	bpl.n	8001194 <_printf_i+0x1c0>
 800119c:	8019      	strh	r1, [r3, #0]
 800119e:	2300      	movs	r3, #0
 80011a0:	6123      	str	r3, [r4, #16]
 80011a2:	4615      	mov	r5, r2
 80011a4:	e7bc      	b.n	8001120 <_printf_i+0x14c>
 80011a6:	682b      	ldr	r3, [r5, #0]
 80011a8:	1d1a      	adds	r2, r3, #4
 80011aa:	602a      	str	r2, [r5, #0]
 80011ac:	681d      	ldr	r5, [r3, #0]
 80011ae:	6862      	ldr	r2, [r4, #4]
 80011b0:	2100      	movs	r1, #0
 80011b2:	4628      	mov	r0, r5
 80011b4:	f7ff f80c 	bl	80001d0 <memchr>
 80011b8:	b108      	cbz	r0, 80011be <_printf_i+0x1ea>
 80011ba:	1b40      	subs	r0, r0, r5
 80011bc:	6060      	str	r0, [r4, #4]
 80011be:	6863      	ldr	r3, [r4, #4]
 80011c0:	6123      	str	r3, [r4, #16]
 80011c2:	2300      	movs	r3, #0
 80011c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011c8:	e7aa      	b.n	8001120 <_printf_i+0x14c>
 80011ca:	6923      	ldr	r3, [r4, #16]
 80011cc:	462a      	mov	r2, r5
 80011ce:	4649      	mov	r1, r9
 80011d0:	4640      	mov	r0, r8
 80011d2:	47d0      	blx	sl
 80011d4:	3001      	adds	r0, #1
 80011d6:	d0ad      	beq.n	8001134 <_printf_i+0x160>
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	079b      	lsls	r3, r3, #30
 80011dc:	d413      	bmi.n	8001206 <_printf_i+0x232>
 80011de:	68e0      	ldr	r0, [r4, #12]
 80011e0:	9b03      	ldr	r3, [sp, #12]
 80011e2:	4298      	cmp	r0, r3
 80011e4:	bfb8      	it	lt
 80011e6:	4618      	movlt	r0, r3
 80011e8:	e7a6      	b.n	8001138 <_printf_i+0x164>
 80011ea:	2301      	movs	r3, #1
 80011ec:	4632      	mov	r2, r6
 80011ee:	4649      	mov	r1, r9
 80011f0:	4640      	mov	r0, r8
 80011f2:	47d0      	blx	sl
 80011f4:	3001      	adds	r0, #1
 80011f6:	d09d      	beq.n	8001134 <_printf_i+0x160>
 80011f8:	3501      	adds	r5, #1
 80011fa:	68e3      	ldr	r3, [r4, #12]
 80011fc:	9903      	ldr	r1, [sp, #12]
 80011fe:	1a5b      	subs	r3, r3, r1
 8001200:	42ab      	cmp	r3, r5
 8001202:	dcf2      	bgt.n	80011ea <_printf_i+0x216>
 8001204:	e7eb      	b.n	80011de <_printf_i+0x20a>
 8001206:	2500      	movs	r5, #0
 8001208:	f104 0619 	add.w	r6, r4, #25
 800120c:	e7f5      	b.n	80011fa <_printf_i+0x226>
 800120e:	bf00      	nop
 8001210:	08001552 	.word	0x08001552
 8001214:	08001563 	.word	0x08001563

08001218 <memcpy>:
 8001218:	440a      	add	r2, r1
 800121a:	4291      	cmp	r1, r2
 800121c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001220:	d100      	bne.n	8001224 <memcpy+0xc>
 8001222:	4770      	bx	lr
 8001224:	b510      	push	{r4, lr}
 8001226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800122a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800122e:	4291      	cmp	r1, r2
 8001230:	d1f9      	bne.n	8001226 <memcpy+0xe>
 8001232:	bd10      	pop	{r4, pc}

08001234 <memmove>:
 8001234:	4288      	cmp	r0, r1
 8001236:	b510      	push	{r4, lr}
 8001238:	eb01 0402 	add.w	r4, r1, r2
 800123c:	d902      	bls.n	8001244 <memmove+0x10>
 800123e:	4284      	cmp	r4, r0
 8001240:	4623      	mov	r3, r4
 8001242:	d807      	bhi.n	8001254 <memmove+0x20>
 8001244:	1e43      	subs	r3, r0, #1
 8001246:	42a1      	cmp	r1, r4
 8001248:	d008      	beq.n	800125c <memmove+0x28>
 800124a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800124e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001252:	e7f8      	b.n	8001246 <memmove+0x12>
 8001254:	4402      	add	r2, r0
 8001256:	4601      	mov	r1, r0
 8001258:	428a      	cmp	r2, r1
 800125a:	d100      	bne.n	800125e <memmove+0x2a>
 800125c:	bd10      	pop	{r4, pc}
 800125e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001266:	e7f7      	b.n	8001258 <memmove+0x24>

08001268 <_free_r>:
 8001268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800126a:	2900      	cmp	r1, #0
 800126c:	d044      	beq.n	80012f8 <_free_r+0x90>
 800126e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001272:	9001      	str	r0, [sp, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	f1a1 0404 	sub.w	r4, r1, #4
 800127a:	bfb8      	it	lt
 800127c:	18e4      	addlt	r4, r4, r3
 800127e:	f000 f913 	bl	80014a8 <__malloc_lock>
 8001282:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <_free_r+0x94>)
 8001284:	9801      	ldr	r0, [sp, #4]
 8001286:	6813      	ldr	r3, [r2, #0]
 8001288:	b933      	cbnz	r3, 8001298 <_free_r+0x30>
 800128a:	6063      	str	r3, [r4, #4]
 800128c:	6014      	str	r4, [r2, #0]
 800128e:	b003      	add	sp, #12
 8001290:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001294:	f000 b90e 	b.w	80014b4 <__malloc_unlock>
 8001298:	42a3      	cmp	r3, r4
 800129a:	d908      	bls.n	80012ae <_free_r+0x46>
 800129c:	6825      	ldr	r5, [r4, #0]
 800129e:	1961      	adds	r1, r4, r5
 80012a0:	428b      	cmp	r3, r1
 80012a2:	bf01      	itttt	eq
 80012a4:	6819      	ldreq	r1, [r3, #0]
 80012a6:	685b      	ldreq	r3, [r3, #4]
 80012a8:	1949      	addeq	r1, r1, r5
 80012aa:	6021      	streq	r1, [r4, #0]
 80012ac:	e7ed      	b.n	800128a <_free_r+0x22>
 80012ae:	461a      	mov	r2, r3
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	b10b      	cbz	r3, 80012b8 <_free_r+0x50>
 80012b4:	42a3      	cmp	r3, r4
 80012b6:	d9fa      	bls.n	80012ae <_free_r+0x46>
 80012b8:	6811      	ldr	r1, [r2, #0]
 80012ba:	1855      	adds	r5, r2, r1
 80012bc:	42a5      	cmp	r5, r4
 80012be:	d10b      	bne.n	80012d8 <_free_r+0x70>
 80012c0:	6824      	ldr	r4, [r4, #0]
 80012c2:	4421      	add	r1, r4
 80012c4:	1854      	adds	r4, r2, r1
 80012c6:	42a3      	cmp	r3, r4
 80012c8:	6011      	str	r1, [r2, #0]
 80012ca:	d1e0      	bne.n	800128e <_free_r+0x26>
 80012cc:	681c      	ldr	r4, [r3, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	6053      	str	r3, [r2, #4]
 80012d2:	440c      	add	r4, r1
 80012d4:	6014      	str	r4, [r2, #0]
 80012d6:	e7da      	b.n	800128e <_free_r+0x26>
 80012d8:	d902      	bls.n	80012e0 <_free_r+0x78>
 80012da:	230c      	movs	r3, #12
 80012dc:	6003      	str	r3, [r0, #0]
 80012de:	e7d6      	b.n	800128e <_free_r+0x26>
 80012e0:	6825      	ldr	r5, [r4, #0]
 80012e2:	1961      	adds	r1, r4, r5
 80012e4:	428b      	cmp	r3, r1
 80012e6:	bf04      	itt	eq
 80012e8:	6819      	ldreq	r1, [r3, #0]
 80012ea:	685b      	ldreq	r3, [r3, #4]
 80012ec:	6063      	str	r3, [r4, #4]
 80012ee:	bf04      	itt	eq
 80012f0:	1949      	addeq	r1, r1, r5
 80012f2:	6021      	streq	r1, [r4, #0]
 80012f4:	6054      	str	r4, [r2, #4]
 80012f6:	e7ca      	b.n	800128e <_free_r+0x26>
 80012f8:	b003      	add	sp, #12
 80012fa:	bd30      	pop	{r4, r5, pc}
 80012fc:	20001090 	.word	0x20001090

08001300 <sbrk_aligned>:
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	4e0e      	ldr	r6, [pc, #56]	; (800133c <sbrk_aligned+0x3c>)
 8001304:	460c      	mov	r4, r1
 8001306:	6831      	ldr	r1, [r6, #0]
 8001308:	4605      	mov	r5, r0
 800130a:	b911      	cbnz	r1, 8001312 <sbrk_aligned+0x12>
 800130c:	f000 f8bc 	bl	8001488 <_sbrk_r>
 8001310:	6030      	str	r0, [r6, #0]
 8001312:	4621      	mov	r1, r4
 8001314:	4628      	mov	r0, r5
 8001316:	f000 f8b7 	bl	8001488 <_sbrk_r>
 800131a:	1c43      	adds	r3, r0, #1
 800131c:	d00a      	beq.n	8001334 <sbrk_aligned+0x34>
 800131e:	1cc4      	adds	r4, r0, #3
 8001320:	f024 0403 	bic.w	r4, r4, #3
 8001324:	42a0      	cmp	r0, r4
 8001326:	d007      	beq.n	8001338 <sbrk_aligned+0x38>
 8001328:	1a21      	subs	r1, r4, r0
 800132a:	4628      	mov	r0, r5
 800132c:	f000 f8ac 	bl	8001488 <_sbrk_r>
 8001330:	3001      	adds	r0, #1
 8001332:	d101      	bne.n	8001338 <sbrk_aligned+0x38>
 8001334:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001338:	4620      	mov	r0, r4
 800133a:	bd70      	pop	{r4, r5, r6, pc}
 800133c:	20001094 	.word	0x20001094

08001340 <_malloc_r>:
 8001340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001344:	1ccd      	adds	r5, r1, #3
 8001346:	f025 0503 	bic.w	r5, r5, #3
 800134a:	3508      	adds	r5, #8
 800134c:	2d0c      	cmp	r5, #12
 800134e:	bf38      	it	cc
 8001350:	250c      	movcc	r5, #12
 8001352:	2d00      	cmp	r5, #0
 8001354:	4607      	mov	r7, r0
 8001356:	db01      	blt.n	800135c <_malloc_r+0x1c>
 8001358:	42a9      	cmp	r1, r5
 800135a:	d905      	bls.n	8001368 <_malloc_r+0x28>
 800135c:	230c      	movs	r3, #12
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	2600      	movs	r6, #0
 8001362:	4630      	mov	r0, r6
 8001364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001368:	4e2e      	ldr	r6, [pc, #184]	; (8001424 <_malloc_r+0xe4>)
 800136a:	f000 f89d 	bl	80014a8 <__malloc_lock>
 800136e:	6833      	ldr	r3, [r6, #0]
 8001370:	461c      	mov	r4, r3
 8001372:	bb34      	cbnz	r4, 80013c2 <_malloc_r+0x82>
 8001374:	4629      	mov	r1, r5
 8001376:	4638      	mov	r0, r7
 8001378:	f7ff ffc2 	bl	8001300 <sbrk_aligned>
 800137c:	1c43      	adds	r3, r0, #1
 800137e:	4604      	mov	r4, r0
 8001380:	d14d      	bne.n	800141e <_malloc_r+0xde>
 8001382:	6834      	ldr	r4, [r6, #0]
 8001384:	4626      	mov	r6, r4
 8001386:	2e00      	cmp	r6, #0
 8001388:	d140      	bne.n	800140c <_malloc_r+0xcc>
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	4631      	mov	r1, r6
 800138e:	4638      	mov	r0, r7
 8001390:	eb04 0803 	add.w	r8, r4, r3
 8001394:	f000 f878 	bl	8001488 <_sbrk_r>
 8001398:	4580      	cmp	r8, r0
 800139a:	d13a      	bne.n	8001412 <_malloc_r+0xd2>
 800139c:	6823      	ldr	r3, [r4, #0]
 800139e:	3503      	adds	r5, #3
 80013a0:	1aed      	subs	r5, r5, r3
 80013a2:	f025 0503 	bic.w	r5, r5, #3
 80013a6:	3508      	adds	r5, #8
 80013a8:	2d0c      	cmp	r5, #12
 80013aa:	bf38      	it	cc
 80013ac:	250c      	movcc	r5, #12
 80013ae:	4629      	mov	r1, r5
 80013b0:	4638      	mov	r0, r7
 80013b2:	f7ff ffa5 	bl	8001300 <sbrk_aligned>
 80013b6:	3001      	adds	r0, #1
 80013b8:	d02b      	beq.n	8001412 <_malloc_r+0xd2>
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	442b      	add	r3, r5
 80013be:	6023      	str	r3, [r4, #0]
 80013c0:	e00e      	b.n	80013e0 <_malloc_r+0xa0>
 80013c2:	6822      	ldr	r2, [r4, #0]
 80013c4:	1b52      	subs	r2, r2, r5
 80013c6:	d41e      	bmi.n	8001406 <_malloc_r+0xc6>
 80013c8:	2a0b      	cmp	r2, #11
 80013ca:	d916      	bls.n	80013fa <_malloc_r+0xba>
 80013cc:	1961      	adds	r1, r4, r5
 80013ce:	42a3      	cmp	r3, r4
 80013d0:	6025      	str	r5, [r4, #0]
 80013d2:	bf18      	it	ne
 80013d4:	6059      	strne	r1, [r3, #4]
 80013d6:	6863      	ldr	r3, [r4, #4]
 80013d8:	bf08      	it	eq
 80013da:	6031      	streq	r1, [r6, #0]
 80013dc:	5162      	str	r2, [r4, r5]
 80013de:	604b      	str	r3, [r1, #4]
 80013e0:	4638      	mov	r0, r7
 80013e2:	f104 060b 	add.w	r6, r4, #11
 80013e6:	f000 f865 	bl	80014b4 <__malloc_unlock>
 80013ea:	f026 0607 	bic.w	r6, r6, #7
 80013ee:	1d23      	adds	r3, r4, #4
 80013f0:	1af2      	subs	r2, r6, r3
 80013f2:	d0b6      	beq.n	8001362 <_malloc_r+0x22>
 80013f4:	1b9b      	subs	r3, r3, r6
 80013f6:	50a3      	str	r3, [r4, r2]
 80013f8:	e7b3      	b.n	8001362 <_malloc_r+0x22>
 80013fa:	6862      	ldr	r2, [r4, #4]
 80013fc:	42a3      	cmp	r3, r4
 80013fe:	bf0c      	ite	eq
 8001400:	6032      	streq	r2, [r6, #0]
 8001402:	605a      	strne	r2, [r3, #4]
 8001404:	e7ec      	b.n	80013e0 <_malloc_r+0xa0>
 8001406:	4623      	mov	r3, r4
 8001408:	6864      	ldr	r4, [r4, #4]
 800140a:	e7b2      	b.n	8001372 <_malloc_r+0x32>
 800140c:	4634      	mov	r4, r6
 800140e:	6876      	ldr	r6, [r6, #4]
 8001410:	e7b9      	b.n	8001386 <_malloc_r+0x46>
 8001412:	230c      	movs	r3, #12
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	4638      	mov	r0, r7
 8001418:	f000 f84c 	bl	80014b4 <__malloc_unlock>
 800141c:	e7a1      	b.n	8001362 <_malloc_r+0x22>
 800141e:	6025      	str	r5, [r4, #0]
 8001420:	e7de      	b.n	80013e0 <_malloc_r+0xa0>
 8001422:	bf00      	nop
 8001424:	20001090 	.word	0x20001090

08001428 <_realloc_r>:
 8001428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800142c:	4680      	mov	r8, r0
 800142e:	4614      	mov	r4, r2
 8001430:	460e      	mov	r6, r1
 8001432:	b921      	cbnz	r1, 800143e <_realloc_r+0x16>
 8001434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001438:	4611      	mov	r1, r2
 800143a:	f7ff bf81 	b.w	8001340 <_malloc_r>
 800143e:	b92a      	cbnz	r2, 800144c <_realloc_r+0x24>
 8001440:	f7ff ff12 	bl	8001268 <_free_r>
 8001444:	4625      	mov	r5, r4
 8001446:	4628      	mov	r0, r5
 8001448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800144c:	f000 f838 	bl	80014c0 <_malloc_usable_size_r>
 8001450:	4284      	cmp	r4, r0
 8001452:	4607      	mov	r7, r0
 8001454:	d802      	bhi.n	800145c <_realloc_r+0x34>
 8001456:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800145a:	d812      	bhi.n	8001482 <_realloc_r+0x5a>
 800145c:	4621      	mov	r1, r4
 800145e:	4640      	mov	r0, r8
 8001460:	f7ff ff6e 	bl	8001340 <_malloc_r>
 8001464:	4605      	mov	r5, r0
 8001466:	2800      	cmp	r0, #0
 8001468:	d0ed      	beq.n	8001446 <_realloc_r+0x1e>
 800146a:	42bc      	cmp	r4, r7
 800146c:	4622      	mov	r2, r4
 800146e:	4631      	mov	r1, r6
 8001470:	bf28      	it	cs
 8001472:	463a      	movcs	r2, r7
 8001474:	f7ff fed0 	bl	8001218 <memcpy>
 8001478:	4631      	mov	r1, r6
 800147a:	4640      	mov	r0, r8
 800147c:	f7ff fef4 	bl	8001268 <_free_r>
 8001480:	e7e1      	b.n	8001446 <_realloc_r+0x1e>
 8001482:	4635      	mov	r5, r6
 8001484:	e7df      	b.n	8001446 <_realloc_r+0x1e>
	...

08001488 <_sbrk_r>:
 8001488:	b538      	push	{r3, r4, r5, lr}
 800148a:	4d06      	ldr	r5, [pc, #24]	; (80014a4 <_sbrk_r+0x1c>)
 800148c:	2300      	movs	r3, #0
 800148e:	4604      	mov	r4, r0
 8001490:	4608      	mov	r0, r1
 8001492:	602b      	str	r3, [r5, #0]
 8001494:	f000 f81c 	bl	80014d0 <_sbrk>
 8001498:	1c43      	adds	r3, r0, #1
 800149a:	d102      	bne.n	80014a2 <_sbrk_r+0x1a>
 800149c:	682b      	ldr	r3, [r5, #0]
 800149e:	b103      	cbz	r3, 80014a2 <_sbrk_r+0x1a>
 80014a0:	6023      	str	r3, [r4, #0]
 80014a2:	bd38      	pop	{r3, r4, r5, pc}
 80014a4:	20001098 	.word	0x20001098

080014a8 <__malloc_lock>:
 80014a8:	4801      	ldr	r0, [pc, #4]	; (80014b0 <__malloc_lock+0x8>)
 80014aa:	f7ff bbcb 	b.w	8000c44 <__retarget_lock_acquire_recursive>
 80014ae:	bf00      	nop
 80014b0:	2000108c 	.word	0x2000108c

080014b4 <__malloc_unlock>:
 80014b4:	4801      	ldr	r0, [pc, #4]	; (80014bc <__malloc_unlock+0x8>)
 80014b6:	f7ff bbc6 	b.w	8000c46 <__retarget_lock_release_recursive>
 80014ba:	bf00      	nop
 80014bc:	2000108c 	.word	0x2000108c

080014c0 <_malloc_usable_size_r>:
 80014c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014c4:	1f18      	subs	r0, r3, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	bfbc      	itt	lt
 80014ca:	580b      	ldrlt	r3, [r1, r0]
 80014cc:	18c0      	addlt	r0, r0, r3
 80014ce:	4770      	bx	lr

080014d0 <_sbrk>:
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <_sbrk+0x14>)
 80014d2:	4905      	ldr	r1, [pc, #20]	; (80014e8 <_sbrk+0x18>)
 80014d4:	6813      	ldr	r3, [r2, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bf08      	it	eq
 80014da:	460b      	moveq	r3, r1
 80014dc:	4418      	add	r0, r3
 80014de:	6010      	str	r0, [r2, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	4770      	bx	lr
 80014e4:	2000109c 	.word	0x2000109c
 80014e8:	200010a0 	.word	0x200010a0

080014ec <_init>:
 80014ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ee:	bf00      	nop
 80014f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014f2:	bc08      	pop	{r3}
 80014f4:	469e      	mov	lr, r3
 80014f6:	4770      	bx	lr

080014f8 <_fini>:
 80014f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fa:	bf00      	nop
 80014fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014fe:	bc08      	pop	{r3}
 8001500:	469e      	mov	lr, r3
 8001502:	4770      	bx	lr
 8001504:	0000      	movs	r0, r0
	...
