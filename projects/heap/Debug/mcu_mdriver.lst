
Debug/mcu_mdriver.elf:     file format elf32-littlearm
Debug/mcu_mdriver.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08002575

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00005540 memsz 0x00005540 flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x08005540 align 2**16
         filesz 0x000000c8 memsz 0x00000d18 flags rw-
    LOAD off    0x00000d18 vaddr 0x20000d18 paddr 0x08005608 align 2**16
         filesz 0x00000000 memsz 0x00000600 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004620  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d50  080047e0  080047e0  000147e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005530  08005530  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08005530  08005530  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005530  08005530  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005530  08005530  00015530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08005540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c50  200000c8  08005608  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d18  08005608  00020d18  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0bf  00000000  00000000  000200f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000623a  00000000  00000000  0003b1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000006fa  00000000  00000000  000413ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  00041af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b0  00000000  00000000  00042548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009aa9  00000000  00000000  000426f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003143  00000000  00000000  0004c1a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000003c  00000000  00000000  0004f2e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000157c  00000000  00000000  0004f320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00004362  00000000  00000000  0005089c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 0000069b  00000000  00000000  00054bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000ac  00000000  00000000  00055299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .stab         000000cc  00000000  00000000  00055348  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .stabstr      000001b9  00000000  00000000  00055414  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001c0 l    d  .text	00000000 .text
080047e0 l    d  .rodata	00000000 .rodata
08005530 l    d  .ARM.extab	00000000 .ARM.extab
08005530 l    d  .ARM	00000000 .ARM
08005530 l    d  .preinit_array	00000000 .preinit_array
08005530 l    d  .init_array	00000000 .init_array
08005538 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
200000c8 l    d  .bss	00000000 .bss
20000d18 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 startup_stm32l4s5xx.o
f1e0f85f l       *ABS*	00000000 BootRAM
0800258c l       .text	00000000 LoopCopyDataInit
08002586 l       .text	00000000 CopyDataInit
0800259e l       .text	00000000 LoopFillZerobss
0800259a l       .text	00000000 FillZerobss
080025aa l       .text	00000000 LoopForever
080025c4 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 crtstuff.c
080047c8 l     O .text	00000000 __EH_FRAME_BEGIN__
08000a5c l     F .text	00000000 __do_global_dtors_aux
200000c8 l     O .bss	00000000 completed.1
08005538 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000a80 l     F .text	00000000 frame_dummy
200000cc l     O .bss	00000000 object.0
08005530 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mcu_mdriver.c
200000e8 l     O .bss	00000004 errors
20000000 l     O .data	0000005c tracestr
08000a9c l     F .text	00000032 stack_test
08000ace l     F .text	00000016 heap_test
200000ec l     O .bss	00000004 test_mem_use
08000f1c l     F .text	0000046c read_trace
080013bc l     F .text	00000210 eval_mm_valid
080015cc l     F .text	000001e4 eval_mm_util
08001388 l     F .text	00000032 free_trace
080017b0 l     F .text	00000268 printresults
08000d30 l     F .text	00000170 add_range
08001a80 l     F .text	00000048 malloc_error
08001a44 l     F .text	0000003c unix_error
08004c98 l     O .rodata	0000000a __func__.0
08000ea0 l     F .text	0000004a remove_range
08000eea l     F .text	00000032 clear_ranges
08001a18 l     F .text	0000002c app_error
00000000 l    df *ABS*	00000000 mcu_mlib.c
200000f0 l     O .bss	00000004 mem_start_brk
200000f4 l     O .bss	00000004 mem_brk
00000000 l    df *ABS*	00000000 mm.c
200000f8 l     O .bss	00000004 heap_listp
08001b84 l     F .text	000001b4 coalesce
08001d38 l     F .text	00000074 extend_heap
08001dac l     F .text	00000054 first_fit
08001e00 l     F .text	00000016 find_fit
08001e16 l     F .text	00000098 place
08001eae l     F .text	0000007c shrink_blk
08001f2a l     F .text	000000ba extend_blk
00000000 l    df *ABS*	00000000 mcu_timer.c
080021ec l     F .text	00000034 __NVIC_EnableIRQ
08002220 l     F .text	00000050 __NVIC_SetPriority
200000fc l     O .bss	00000004 systime
00000000 l    df *ABS*	00000000 mcu.c
00000000 l    df *ABS*	00000000 system_stm32l4xx.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
080026a8 l     F .text	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-vfprintf.c
080027d0 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800331c l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfscanf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 nano-vfscanf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strtol.c
08004470 l     F .text	00000104 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 strtoul.c
08004578 l     F .text	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 read.c
00000000 l    df *ABS*	00000000 sbrk.c
20000d14 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 write.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000064 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
0800553c l       .fini_array	00000000 __fini_array_end
08005538 l       .fini_array	00000000 __fini_array_start
08005534 l       .init_array	00000000 __init_array_end
08005530 l       .preinit_array	00000000 __preinit_array_end
08005530 l       .init_array	00000000 __init_array_start
08005530 l       .preinit_array	00000000 __preinit_array_start
080025c4  w    F .text	00000002 RTC_Alarm_IRQHandler
08004718 g     F .text	00000010 _malloc_usable_size_r
080025c4  w    F .text	00000002 EXTI2_IRQHandler
080040b4 g     F .text	000000b4 _scanf_chars
080025c4  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
080025c4  w    F .text	00000002 TIM8_CC_IRQHandler
080046f8 g     F .text	00000020 _isatty_r
08004748 g     F .text	00000010 _getpid
0800350c g     F .text	00000024 _lseek_r
080025c4  w    F .text	00000002 DebugMon_Handler
0800058c g     F .text	0000005a .hidden __floatdidf
08004448 g     F .text	00000024 _kill_r
080025c4  w    F .text	00000002 TIM1_CC_IRQHandler
080025c4  w    F .text	00000002 TSC_IRQHandler
08002b96 g     F .text	00000024 __sseek
080033cc g     F .text	00000070 __sinit
08002fc4 g     F .text	000000a4 __swbuf_r
08002378 g     F .text	0000000a HardFault_Handler
08003370 g     F .text	0000002c __sfmoreglue
0800363c g     F .text	0000000c __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
20000d00 g     O .bss	00000004 output_offset
08002fac g     F .text	00000014 strerror
080025c4  w    F .text	00000002 SysTick_Handler
080035fc g     F .text	00000034 memmove
080025c4  w    F .text	00000002 TAMP_STAMP_IRQHandler
08005540 g       *ABS*	00000000 _sidata
080025c4  w    F .text	00000002 PendSV_Handler
080025c4  w    F .text	00000002 NMI_Handler
08005530 g       .ARM	00000000 __exidx_end
08002102 g     F .text	000000ea mm_realloc
080025c4  w    F .text	00000002 EXTI3_IRQHandler
08002604 g     F .text	0000000c __errno
080025c4  w    F .text	00000002 LPTIM2_IRQHandler
080025c4  w    F .text	00000002 DFSDM1_FLT1_IRQHandler
080046d4 g     F .text	00000024 _fstat_r
20000d10 g     O .bss	00000004 errno
08004168 g     F .text	000001e8 _scanf_i
08002b5a g     F .text	00000004 __seofread
080047e0 g       .text	00000000 _etext
200000c8 g       .bss	00000000 _sbss
080025c4  w    F .text	00000002 GFXMMU_IRQHandler
080025c4  w    F .text	00000002 I2C3_ER_IRQHandler
080025c4  w    F .text	00000002 DFSDM1_FLT2_IRQHandler
08002340 g     F .text	00000004 loop
080022d8 g     F .text	0000000c get_time
0800267c g     F .text	0000001c memcpy
200000e4 g     O .bss	00000004 verbose
08002050 g     F .text	00000076 mm_malloc
08003364 g     F .text	0000000c _cleanup_r
080037f4 g     F .text	000001fc _svfprintf_r
08000514 g     F .text	00000022 .hidden __floatsidf
080025c4  w    F .text	00000002 EXTI0_IRQHandler
080025c4  w    F .text	00000002 I2C2_EV_IRQHandler
080025c4  w    F .text	00000002 CAN1_RX0_IRQHandler
080025c4  w    F .text	00000002 FPU_IRQHandler
08002be0 g     F .text	000003cc _strerror_r
2000005c g     O .data	00000004 SystemCoreClock
080025c4  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
080043e6 g     F .text	00000050 _raise_r
08004738 g     F .text	00000010 _fstat
080025c8 g     F .text	0000003c __assert_func
080025c4  w    F .text	00000002 UsageFault_Handler
080025c4  w    F .text	00000002 LTDC_ER_IRQHandler
08003a6a g     F .text	0000003a __ssrefill_r
0800446c g     F .text	00000004 _getpid_r
200000c8 g       .bss	00000000 __bss_start__
080004f4 g     F .text	0000001e .hidden __aeabi_ui2d
20000000 g       .data	00000000 _sdata
080025c4  w    F .text	00000002 SPI1_IRQHandler
080025c4  w    F .text	00000002 OCTOSPI1_IRQHandler
08000270 g     F .text	00000000 .hidden __aeabi_drsub
08002a80 g     F .text	00000020 _sbrk_r
080025c4  w    F .text	00000002 TIM6_DAC_IRQHandler
08004350 g     F .text	00000024 _read_r
20000900 g     O .bss	00000400 msg
080025c4  w    F .text	00000002 DCMI_IRQHandler
08000538 g     F .text	00000042 .hidden __extendsfdf2
08003aa4 g     F .text	000002f0 __ssvfscanf_r
080025c4  w    F .text	00000002 TIM8_UP_IRQHandler
0800083c g     F .text	000001d0 .hidden __aeabi_ddiv
0800027c g     F .text	00000276 .hidden __adddf3
08005530 g       .ARM	00000000 __exidx_start
080005e8 g     F .text	00000254 .hidden __aeabi_dmul
08004758 g     F .text	00000010 _isatty
20000d0e g     O .bss	00000001 __lock___sinit_recursive_mutex
08004ce0 g     O .rodata	00000004 _global_impure_ptr
080036e0 g     F .text	0000005e _realloc_r
08002634 g     F .text	00000048 __libc_init_array
080025c4  w    F .text	00000002 OCTOSPI2_IRQHandler
080025c4  w    F .text	00000002 DMA2_Channel2_IRQHandler
080025c4  w    F .text	00000002 DMA1_Channel4_IRQHandler
080025c4  w    F .text	00000002 SAI2_IRQHandler
08003168 g     F .text	0000000e abort
080004f4 g     F .text	0000001e .hidden __floatunsidf
080025c4  w    F .text	00000002 ADC1_IRQHandler
08004798 g     F .text	0000001c _sbrk
080025c4  w    F .text	00000002 DFSDM1_FLT3_IRQHandler
080047c8 g     F .text	00000000 _init
080025c4  w    F .text	00000002 USART3_IRQHandler
08002344 g     F .text	00000034 var_print
20000d18 g       .bss	00000000 _ebss
080025c4  w    F .text	00000002 DMA1_Channel7_IRQHandler
08002574  w    F .text	00000038 Reset_Handler
080025c4  w    F .text	00000002 CAN1_RX1_IRQHandler
08000a0c g     F .text	0000004e .hidden __fixdfsi
08001af0 g     F .text	00000060 mem_sbrk
08001ac8 g     F .text	00000028 mem_init
080025c4  w    F .text	00000002 UART5_IRQHandler
20000d0c g     O .bss	00000001 __lock___malloc_recursive_mutex
080022e4 g     F .text	0000005c timer_init
08002610 g     F .text	00000024 fprintf
080025c4  w    F .text	00000002 TIM4_IRQHandler
0800027c g     F .text	00000276 .hidden __aeabi_dadd
08002bc2 g     F .text	0000001e strcat
080025c4  w    F .text	00000002 DMA2_Channel1_IRQHandler
0800057c g     F .text	0000006a .hidden __aeabi_ul2d
0800538c g     O .rodata	00000020 __sf_fake_stderr
20000d18 g       ._user_heap_stack	00000000 end
080025c4  w    F .text	00000002 I2C1_EV_IRQHandler
0800350a g     F .text	00000002 __retarget_lock_release_recursive
0800373e g     F .text	000000b4 __ssputs_r
080025c4  w    F .text	00000002 DMAMUX1_OVR_IRQHandler
080025c4  w    F .text	00000002 DMA1_Channel6_IRQHandler
080027fe g     F .text	00000024 __sfputs_r
080025c4  w    F .text	00000002 UART4_IRQHandler
080025c4  w    F .text	00000002 DMA2_Channel4_IRQHandler
0800339c g     F .text	0000000c __sfp_lock_acquire
080001d0 g     F .text	00000000 memchr
20000d18 g       .bss	00000000 __bss_end__
08001b5c g     F .text	00000010 mem_heap_hi
08003648 g     F .text	00000098 _free_r
080025c4  w    F .text	00000002 TIM3_IRQHandler
080025c4  w    F .text	00000002 RCC_IRQHandler
00000200 g       *ABS*	00000000 _Min_Heap_Size
080025c4  w    F .text	00000002 DMA1_Channel1_IRQHandler
080039f0 g     F .text	0000007a _sungetc_r
08000278 g     F .text	0000027a .hidden __aeabi_dsub
080025c4 g       .text	00000002 Default_Handler
080025c4  w    F .text	00000002 DMA2_Channel7_IRQHandler
08002fc0 g     F .text	00000004 _user_strerror
0800057c g     F .text	0000006a .hidden __floatundidf
08004778 g     F .text	00000010 _lseek
080025c4  w    F .text	00000002 EXTI15_10_IRQHandler
080023d0 g     F .text	000001a4 set_sysclk_to_120
0800465c g     F .text	00000004 _strtoul_r
080025c4  w    F .text	00000002 TIM7_IRQHandler
080025c4  w    F .text	00000002 SDMMC1_IRQHandler
08003178 g     F .text	00000020 _close_r
08000514 g     F .text	00000022 .hidden __aeabi_i2d
080025c4  w    F .text	00000002 TIM5_IRQHandler
080025c4  w    F .text	00000002 I2C3_EV_IRQHandler
08002ae0 g     F .text	00000058 sscanf
0800308c g     F .text	000000dc __swsetup_r
080025c4  w    F .text	00000002 EXTI9_5_IRQHandler
0800083c g     F .text	000001d0 .hidden __divdf3
0800343c g     F .text	0000008c __sfp
080025c4  w    F .text	00000002 RTC_WKUP_IRQHandler
080033c0 g     F .text	0000000c __sinit_lock_release
080025c4  w    F .text	00000002 LTDC_IRQHandler
080005e8 g     F .text	00000254 .hidden __muldf3
08002b38 g     F .text	00000022 __sread
08001fe4 g     F .text	0000006c mm_init
08003630 g     F .text	0000000c __malloc_lock
080025c4  w    F .text	00000002 PVD_PVM_IRQHandler
080032a4 g     F .text	00000078 _fflush_r
08001b6c g     F .text	00000018 mem_heapsize
080020c6 g     F .text	0000003c mm_free
080025c4  w    F .text	00000002 SPI2_IRQHandler
080053ac g     O .rodata	00000020 __sf_fake_stdin
08003508 g     F .text	00000002 __retarget_lock_acquire_recursive
08002698 g     F .text	00000010 memset
080025c4  w    F .text	00000002 MemManage_Handler
08000ae4 g     F .text	0000024c main
08003506 g     F .text	00000002 __retarget_lock_init_recursive
080025c4  w    F .text	00000002 CAN1_TX_IRQHandler
080025c4  w    F .text	00000002 SVC_Handler
08002bba g     F .text	00000008 __sclose
080025c4  w    F .text	00000002 DMA2_Channel5_IRQHandler
08004574 g     F .text	00000004 _strtol_r
20000100 g     O .bss	00000800 output_str
080026e8 g     F .text	000000e8 _malloc_r
0800058c g     F .text	0000005a .hidden __aeabi_l2d
08004660 g     F .text	00000074 __submore
080025c4  w    F .text	00000002 DMA1_Channel5_IRQHandler
080025c4  w    F .text	00000002 EXTI4_IRQHandler
08002ae0 g     F .text	00000058 siscanf
08002384 g     F .text	0000004c SystemInit
080025c4  w    F .text	00000002 RNG_IRQHandler
080047d4 g     F .text	00000000 _fini
080025c4  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08002aa0 g     F .text	00000040 sprintf
08003068 g     F .text	00000024 _write_r
080025c4  w    F .text	00000002 DMA1_Channel3_IRQHandler
080025c4  w    F .text	00000002 COMP_IRQHandler
08003d94 g     F .text	000000da _printf_common
20000060 g     O .data	00000004 _impure_ptr
08003198 g     F .text	0000010c __sflush_r
080025c4  w    F .text	00000002 HASH_CRS_IRQHandler
080037f4 g     F .text	000001fc _svfiprintf_r
080025c4  w    F .text	00000002 WWDG_IRQHandler
080025c4  w    F .text	00000002 I2C4_EV_IRQHandler
080025c4  w    F .text	00000002 LPUART1_IRQHandler
080025c4  w    F .text	00000002 DMA2_Channel6_IRQHandler
08002270 g     F .text	00000068 TIM2_IRQHandler
08003aa4 g     F .text	000002f0 __ssvfiscanf_r
080025c4  w    F .text	00000002 DMA2D_IRQHandler
08003530 g     F .text	0000004c __swhatbuf_r
200a0000 g       .isr_vector	00000000 _estack
080025c4  w    F .text	00000002 EXTI1_IRQHandler
080047b4 g     F .text	00000010 _write
200000c8 g       .data	00000000 _edata
080025c4  w    F .text	00000002 AES_IRQHandler
08001b50 g     F .text	0000000c mem_heap_lo
080025c4  w    F .text	00000002 USART2_IRQHandler
08002b5e g     F .text	00000038 __swrite
080025c4  w    F .text	00000002 DFSDM1_FLT0_IRQHandler
08002610 g     F .text	00000024 fiprintf
08002824 g     F .text	0000025c _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
080034c8 g     F .text	0000003e _fwalk_reent
08000a0c g     F .text	0000004e .hidden __aeabi_d2iz
08004768 g     F .text	00000010 _kill
080025c4  w    F .text	00000002 I2C2_ER_IRQHandler
080025c4  w    F .text	00000002 DMA1_Channel2_IRQHandler
080033a8 g     F .text	0000000c __sfp_lock_release
080053cc g     O .rodata	00000020 __sf_fake_stdout
08002aa0 g     F .text	00000040 siprintf
08004374 g     F .text	00000072 __sccl
080025c4  w    F .text	00000002 TIM8_BRK_IRQHandler
08005429 g     O .rodata	00000101 _ctype_
08004788 g     F .text	00000010 _read
080025c4  w    F .text	00000002 CAN1_SCE_IRQHandler
080025c4  w    F .text	00000002 FLASH_IRQHandler
080047c4 g     F .text	00000002 _exit
080025c4  w    F .text	00000002 BusFault_Handler
080025c4  w    F .text	00000002 USART1_IRQHandler
0800357c g     F .text	00000080 __smakebuf_r
080001c0 g     F .text	00000010 strlen
080025c4  w    F .text	00000002 OTG_FS_IRQHandler
08003e70 g     F .text	00000244 _printf_i
080025c4  w    F .text	00000002 SPI3_IRQHandler
20000d08 g     O .bss	00000004 __malloc_sbrk_start
080025c4  w    F .text	00000002 I2C1_ER_IRQHandler
080025c4  w    F .text	00000002 FMC_IRQHandler
08000538 g     F .text	00000042 .hidden __aeabi_f2d
20000d04 g     O .bss	00000004 __malloc_free_list
080025c4  w    F .text	00000002 LPTIM1_IRQHandler
08000278 g     F .text	0000027a .hidden __subdf3
08002824 g     F .text	0000025c _vfprintf_r
080025c4  w    F .text	00000002 I2C4_ER_IRQHandler
080025c4  w    F .text	00000002 SAI1_IRQHandler
20000d0d g     O .bss	00000001 __lock___sfp_recursive_mutex
08004728 g     F .text	00000010 _close
08004438 g     F .text	00000010 raise
080033b4 g     F .text	0000000c __sinit_lock_acquire
080025c4  w    F .text	00000002 DMA2_Channel3_IRQHandler
080025c4  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

080001c0 <strlen>:
 80001c0:	4603      	mov	r3, r0
 80001c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001c6:	2a00      	cmp	r2, #0
 80001c8:	d1fb      	bne.n	80001c2 <strlen+0x2>
 80001ca:	1a18      	subs	r0, r3, r0
 80001cc:	3801      	subs	r0, #1
 80001ce:	4770      	bx	lr

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__do_global_dtors_aux>:
 8000a5c:	b510      	push	{r4, lr}
 8000a5e:	4c05      	ldr	r4, [pc, #20]	; (8000a74 <__do_global_dtors_aux+0x18>)
 8000a60:	7823      	ldrb	r3, [r4, #0]
 8000a62:	b933      	cbnz	r3, 8000a72 <__do_global_dtors_aux+0x16>
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__do_global_dtors_aux+0x1c>)
 8000a66:	b113      	cbz	r3, 8000a6e <__do_global_dtors_aux+0x12>
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <__do_global_dtors_aux+0x20>)
 8000a6a:	f3af 8000 	nop.w
 8000a6e:	2301      	movs	r3, #1
 8000a70:	7023      	strb	r3, [r4, #0]
 8000a72:	bd10      	pop	{r4, pc}
 8000a74:	200000c8 	.word	0x200000c8
 8000a78:	00000000 	.word	0x00000000
 8000a7c:	080047c8 	.word	0x080047c8

08000a80 <frame_dummy>:
 8000a80:	b508      	push	{r3, lr}
 8000a82:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <frame_dummy+0x10>)
 8000a84:	b11b      	cbz	r3, 8000a8e <frame_dummy+0xe>
 8000a86:	4903      	ldr	r1, [pc, #12]	; (8000a94 <frame_dummy+0x14>)
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <frame_dummy+0x18>)
 8000a8a:	f3af 8000 	nop.w
 8000a8e:	bd08      	pop	{r3, pc}
 8000a90:	00000000 	.word	0x00000000
 8000a94:	200000cc 	.word	0x200000cc
 8000a98:	080047c8 	.word	0x080047c8

08000a9c <stack_test>:

// Test file string
static char tracestr[] = TESTSTRING;

// Test for stack overflow
static void stack_test(void) {
 8000a9c:	b500      	push	{lr}
 8000a9e:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
 8000aa2:	b081      	sub	sp, #4
	char buffer_array[10*KB] = {0};
 8000aa4:	f50d 6300 	add.w	r3, sp, #2048	; 0x800
 8000aa8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	f242 72fc 	movw	r2, #10236	; 0x27fc
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fded 	bl	8002698 <memset>
	stack_test();
 8000abe:	f7ff ffed 	bl	8000a9c <stack_test>
}
 8000ac2:	bf00      	nop
 8000ac4:	f50d 5d20 	add.w	sp, sp, #10240	; 0x2800
 8000ac8:	b001      	add	sp, #4
 8000aca:	f85d fb04 	ldr.w	pc, [sp], #4

08000ace <heap_test>:

// Test for stack overflow
static void heap_test(void) {
 8000ace:	b508      	push	{r3, lr}
	while(1) {
		if(!mm_malloc(10*KB)){
 8000ad0:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8000ad4:	f001 fabc 	bl	8002050 <mm_malloc>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1f8      	bne.n	8000ad0 <heap_test+0x2>
			loop();
 8000ade:	f001 fc2f 	bl	8002340 <loop>
		if(!mm_malloc(10*KB)){
 8000ae2:	e7f5      	b.n	8000ad0 <heap_test+0x2>

08000ae4 <main>:

/**************
 * Main routine
 **************/
int main(void)
{
 8000ae4:	b500      	push	{lr}
 8000ae6:	b0a3      	sub	sp, #140	; 0x8c
    int i=0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	9320      	str	r3, [sp, #128]	; 0x80
    int num_tracefiles = 0;    /* the number of traces in that array */
 8000aec:	2300      	movs	r3, #0
 8000aee:	931f      	str	r3, [sp, #124]	; 0x7c
    trace_t *trace = NULL;     /* stores a single trace file in memory */
 8000af0:	2300      	movs	r3, #0
 8000af2:	931e      	str	r3, [sp, #120]	; 0x78
    range_t *ranges = NULL;    /* keeps track of block extents for one trace */
 8000af4:	2300      	movs	r3, #0
 8000af6:	9308      	str	r3, [sp, #32]
    //speed_t speed_params;      /* input parameters to the xx_speed routines */ 
	
	// Test start and end time
	size_t start_time, end_time;

    int autograder = 0;  /* If set, emit summary info for autograder (-g) */
 8000af8:	2300      	movs	r3, #0
 8000afa:	931d      	str	r3, [sp, #116]	; 0x74
	int p1_int;
	int p2_int;
	int perfindex_int;

    /* Initialize the simulated memory system in memlib.c */
    mem_init(); 
 8000afc:	f000 ffe4 	bl	8001ac8 <mem_init>
	mm_init();
 8000b00:	f001 fa70 	bl	8001fe4 <mm_init>
	timer_init();
 8000b04:	f001 fbee 	bl	80022e4 <timer_init>

	start_time = get_time();
 8000b08:	f001 fbe6 	bl	80022d8 <get_time>
 8000b0c:	901c      	str	r0, [sp, #112]	; 0x70

    /* Evaluate student's mm malloc package using the K-best scheme */
	trace = read_trace();
 8000b0e:	f000 fa05 	bl	8000f1c <read_trace>
 8000b12:	901e      	str	r0, [sp, #120]	; 0x78
	mm_stats.ops = trace->num_ops;
 8000b14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fcfb 	bl	8000514 <__aeabi_i2d>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	460b      	mov	r3, r1
 8000b22:	e9cd 2300 	strd	r2, r3, [sp]
	if (verbose > 1) {
 8000b26:	4b74      	ldr	r3, [pc, #464]	; (8000cf8 <main+0x214>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	dd06      	ble.n	8000b3c <main+0x58>
	    sprintf(msg, "Checking mm_malloc for correctness, ");
 8000b2e:	4973      	ldr	r1, [pc, #460]	; (8000cfc <main+0x218>)
 8000b30:	4873      	ldr	r0, [pc, #460]	; (8000d00 <main+0x21c>)
 8000b32:	f001 ffb5 	bl	8002aa0 <siprintf>
		var_print(msg);
 8000b36:	4872      	ldr	r0, [pc, #456]	; (8000d00 <main+0x21c>)
 8000b38:	f001 fc04 	bl	8002344 <var_print>
	}
	mm_stats.valid = eval_mm_valid(trace, i, &ranges);
 8000b3c:	ab08      	add	r3, sp, #32
 8000b3e:	461a      	mov	r2, r3
 8000b40:	9920      	ldr	r1, [sp, #128]	; 0x80
 8000b42:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000b44:	f000 fc3a 	bl	80013bc <eval_mm_valid>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	9302      	str	r3, [sp, #8]
	if (mm_stats.valid) {
 8000b4c:	9b02      	ldr	r3, [sp, #8]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d035      	beq.n	8000bbe <main+0xda>
	    if (verbose > 1) {
 8000b52:	4b69      	ldr	r3, [pc, #420]	; (8000cf8 <main+0x214>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	dd06      	ble.n	8000b68 <main+0x84>
			sprintf(msg, "efficiency, ");
 8000b5a:	496a      	ldr	r1, [pc, #424]	; (8000d04 <main+0x220>)
 8000b5c:	4868      	ldr	r0, [pc, #416]	; (8000d00 <main+0x21c>)
 8000b5e:	f001 ff9f 	bl	8002aa0 <siprintf>
			var_print(msg);
 8000b62:	4867      	ldr	r0, [pc, #412]	; (8000d00 <main+0x21c>)
 8000b64:	f001 fbee 	bl	8002344 <var_print>
		}
	    mm_stats.util = eval_mm_util(trace, i, &ranges);
 8000b68:	ab08      	add	r3, sp, #32
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8000b6e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000b70:	f000 fd2c 	bl	80015cc <eval_mm_util>
 8000b74:	4602      	mov	r2, r0
 8000b76:	460b      	mov	r3, r1
 8000b78:	e9cd 2306 	strd	r2, r3, [sp, #24]
	    if (verbose > 1) {
 8000b7c:	4b5e      	ldr	r3, [pc, #376]	; (8000cf8 <main+0x214>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	dd06      	ble.n	8000b92 <main+0xae>
			sprintf(msg, "and performance.\n");
 8000b84:	4960      	ldr	r1, [pc, #384]	; (8000d08 <main+0x224>)
 8000b86:	485e      	ldr	r0, [pc, #376]	; (8000d00 <main+0x21c>)
 8000b88:	f001 ff8a 	bl	8002aa0 <siprintf>
			var_print(msg);
 8000b8c:	485c      	ldr	r0, [pc, #368]	; (8000d00 <main+0x21c>)
 8000b8e:	f001 fbd9 	bl	8002344 <var_print>
		}
	    //mm_stats.secs = fsecs(eval_mm_speed, &speed_params);
		end_time = get_time();
 8000b92:	f001 fba1 	bl	80022d8 <get_time>
 8000b96:	901b      	str	r0, [sp, #108]	; 0x6c
		mm_stats.secs = (end_time-start_time)/1000.0f;
 8000b98:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000b9a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	ee07 3a90 	vmov	s15, r3
 8000ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ba6:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8000d0c <main+0x228>
 8000baa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000bae:	ee16 0a90 	vmov	r0, s13
 8000bb2:	f7ff fcc1 	bl	8000538 <__aeabi_f2d>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	460b      	mov	r3, r1
 8000bba:	e9cd 2304 	strd	r2, r3, [sp, #16]
	}
	free_trace(trace);
 8000bbe:	981e      	ldr	r0, [sp, #120]	; 0x78
 8000bc0:	f000 fbe2 	bl	8001388 <free_trace>

    /* Display the mm results in a compact table */
    if (verbose) {
 8000bc4:	4b4c      	ldr	r3, [pc, #304]	; (8000cf8 <main+0x214>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d012      	beq.n	8000bf2 <main+0x10e>
		sprintf(msg, "\nResults for mm malloc:\n");
 8000bcc:	4950      	ldr	r1, [pc, #320]	; (8000d10 <main+0x22c>)
 8000bce:	484c      	ldr	r0, [pc, #304]	; (8000d00 <main+0x21c>)
 8000bd0:	f001 ff66 	bl	8002aa0 <siprintf>
		var_print(msg);
 8000bd4:	484a      	ldr	r0, [pc, #296]	; (8000d00 <main+0x21c>)
 8000bd6:	f001 fbb5 	bl	8002344 <var_print>
		printresults(num_tracefiles, &mm_stats);
 8000bda:	466b      	mov	r3, sp
 8000bdc:	4619      	mov	r1, r3
 8000bde:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8000be0:	f000 fde6 	bl	80017b0 <printresults>
		sprintf(msg, "\n");
 8000be4:	494b      	ldr	r1, [pc, #300]	; (8000d14 <main+0x230>)
 8000be6:	4846      	ldr	r0, [pc, #280]	; (8000d00 <main+0x21c>)
 8000be8:	f001 ff5a 	bl	8002aa0 <siprintf>
		var_print(msg);
 8000bec:	4844      	ldr	r0, [pc, #272]	; (8000d00 <main+0x21c>)
 8000bee:	f001 fba9 	bl	8002344 <var_print>
    }

    /* 
     * Accumulate the aggregate statistics for the student's mm package 
     */
    secs = 0;
 8000bf2:	f04f 0200 	mov.w	r2, #0
 8000bf6:	f04f 0300 	mov.w	r3, #0
 8000bfa:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    ops = 0;
 8000bfe:	f04f 0200 	mov.w	r2, #0
 8000c02:	f04f 0300 	mov.w	r3, #0
 8000c06:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    util = 0;
 8000c0a:	f04f 0200 	mov.w	r2, #0
 8000c0e:	f04f 0300 	mov.w	r3, #0
 8000c12:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    numcorrect = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	9321      	str	r3, [sp, #132]	; 0x84
	secs = mm_stats.secs;
 8000c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000c1e:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	ops = mm_stats.ops;
 8000c22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000c26:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	util = mm_stats.util;
 8000c2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000c2e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	if (mm_stats.valid)
 8000c32:	9b02      	ldr	r3, [sp, #8]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d002      	beq.n	8000c3e <main+0x15a>
	    numcorrect++;
 8000c38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	9321      	str	r3, [sp, #132]	; 0x84
    avg_mm_util = util;
 8000c3e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8000c42:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48

    /* 
     * Compute and print the performance index 
     */
    if (errors == 0) {
 8000c46:	4b34      	ldr	r3, [pc, #208]	; (8000d18 <main+0x234>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d130      	bne.n	8000cb0 <main+0x1cc>
	avg_mm_throughput = ops/secs;
 8000c4e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8000c52:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8000c56:	f7ff fdf1 	bl	800083c <__aeabi_ddiv>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40

	p1 = avg_mm_util;
 8000c62:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8000c66:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	p2 = avg_mm_throughput;
 8000c6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8000c6e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30

	p1_int = p1*100;
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <main+0x238>)
 8000c78:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8000c7c:	f7ff fcb4 	bl	80005e8 <__aeabi_dmul>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4610      	mov	r0, r2
 8000c86:	4619      	mov	r1, r3
 8000c88:	f7ff fec0 	bl	8000a0c <__aeabi_d2iz>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	930b      	str	r3, [sp, #44]	; 0x2c
	p2_int = (int)p2;
 8000c90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000c94:	f7ff feba 	bl	8000a0c <__aeabi_d2iz>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	930a      	str	r3, [sp, #40]	; 0x28

	sprintf(msg, "Utilization: %d%%. Throughput: %d\n",
 8000c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000ca0:	491f      	ldr	r1, [pc, #124]	; (8000d20 <main+0x23c>)
 8000ca2:	4817      	ldr	r0, [pc, #92]	; (8000d00 <main+0x21c>)
 8000ca4:	f001 fefc 	bl	8002aa0 <siprintf>
	       p1_int, 
	       p2_int);
	
	var_print(msg);
 8000ca8:	4815      	ldr	r0, [pc, #84]	; (8000d00 <main+0x21c>)
 8000caa:	f001 fb4b 	bl	8002344 <var_print>
 8000cae:	e009      	b.n	8000cc4 <main+0x1e0>
    }
    else { /* There were errors */
	sprintf(msg, "Terminated with %d errors\n", errors);
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <main+0x234>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	491b      	ldr	r1, [pc, #108]	; (8000d24 <main+0x240>)
 8000cb8:	4811      	ldr	r0, [pc, #68]	; (8000d00 <main+0x21c>)
 8000cba:	f001 fef1 	bl	8002aa0 <siprintf>
	var_print(msg);
 8000cbe:	4810      	ldr	r0, [pc, #64]	; (8000d00 <main+0x21c>)
 8000cc0:	f001 fb40 	bl	8002344 <var_print>
    }

    if (autograder) {
 8000cc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d00f      	beq.n	8000cea <main+0x206>
	sprintf(msg, "correct:%d\n", numcorrect);
 8000cca:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8000ccc:	4916      	ldr	r1, [pc, #88]	; (8000d28 <main+0x244>)
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <main+0x21c>)
 8000cd0:	f001 fee6 	bl	8002aa0 <siprintf>
	var_print(msg);
 8000cd4:	480a      	ldr	r0, [pc, #40]	; (8000d00 <main+0x21c>)
 8000cd6:	f001 fb35 	bl	8002344 <var_print>
	sprintf(msg, "perfidx:%d\n", perfindex_int);
 8000cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cdc:	4913      	ldr	r1, [pc, #76]	; (8000d2c <main+0x248>)
 8000cde:	4808      	ldr	r0, [pc, #32]	; (8000d00 <main+0x21c>)
 8000ce0:	f001 fede 	bl	8002aa0 <siprintf>
	var_print(msg);
 8000ce4:	4806      	ldr	r0, [pc, #24]	; (8000d00 <main+0x21c>)
 8000ce6:	f001 fb2d 	bl	8002344 <var_print>
    }

	loop();
 8000cea:	f001 fb29 	bl	8002340 <loop>
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	b023      	add	sp, #140	; 0x8c
 8000cf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cf8:	200000e4 	.word	0x200000e4
 8000cfc:	080047e0 	.word	0x080047e0
 8000d00:	20000900 	.word	0x20000900
 8000d04:	08004808 	.word	0x08004808
 8000d08:	08004818 	.word	0x08004818
 8000d0c:	447a0000 	.word	0x447a0000
 8000d10:	0800482c 	.word	0x0800482c
 8000d14:	08004848 	.word	0x08004848
 8000d18:	200000e8 	.word	0x200000e8
 8000d1c:	40590000 	.word	0x40590000
 8000d20:	0800484c 	.word	0x0800484c
 8000d24:	08004870 	.word	0x08004870
 8000d28:	0800488c 	.word	0x0800488c
 8000d2c:	08004898 	.word	0x08004898

08000d30 <add_range>:
 *     size bytes at addr lo. After checking the block for correctness,
 *     we create a range struct for this block and add it to the range list. 
 */
static int add_range(range_t **ranges, char *lo, int size, 
		     int tracenum, int opnum)
{
 8000d30:	b510      	push	{r4, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	9005      	str	r0, [sp, #20]
 8000d36:	9104      	str	r1, [sp, #16]
 8000d38:	9203      	str	r2, [sp, #12]
 8000d3a:	9302      	str	r3, [sp, #8]
    char *hi = lo + size - 1;
 8000d3c:	9b03      	ldr	r3, [sp, #12]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	9a04      	ldr	r2, [sp, #16]
 8000d42:	4413      	add	r3, r2
 8000d44:	9306      	str	r3, [sp, #24]
    range_t *p;

    assert(size > 0);
 8000d46:	9b03      	ldr	r3, [sp, #12]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	dc06      	bgt.n	8000d5a <add_range+0x2a>
 8000d4c:	4b4b      	ldr	r3, [pc, #300]	; (8000e7c <add_range+0x14c>)
 8000d4e:	4a4c      	ldr	r2, [pc, #304]	; (8000e80 <add_range+0x150>)
 8000d50:	f240 111b 	movw	r1, #283	; 0x11b
 8000d54:	484b      	ldr	r0, [pc, #300]	; (8000e84 <add_range+0x154>)
 8000d56:	f001 fc37 	bl	80025c8 <__assert_func>

    /* Payload addresses must be ALIGNMENT-byte aligned */
    if (!IS_ALIGNED(lo)) {
 8000d5a:	9b04      	ldr	r3, [sp, #16]
 8000d5c:	f003 0307 	and.w	r3, r3, #7
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d00c      	beq.n	8000d7e <add_range+0x4e>
	sprintf(msg, "Payload address (%p) not aligned to %d bytes", 
 8000d64:	2308      	movs	r3, #8
 8000d66:	9a04      	ldr	r2, [sp, #16]
 8000d68:	4947      	ldr	r1, [pc, #284]	; (8000e88 <add_range+0x158>)
 8000d6a:	4848      	ldr	r0, [pc, #288]	; (8000e8c <add_range+0x15c>)
 8000d6c:	f001 fe98 	bl	8002aa0 <siprintf>
		lo, ALIGNMENT);
        malloc_error(tracenum, opnum, msg);
 8000d70:	4a46      	ldr	r2, [pc, #280]	; (8000e8c <add_range+0x15c>)
 8000d72:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000d74:	9802      	ldr	r0, [sp, #8]
 8000d76:	f000 fe83 	bl	8001a80 <malloc_error>
        return 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e07b      	b.n	8000e76 <add_range+0x146>
    }

    /* The payload must lie within the extent of the heap */
    if ((lo < (char *)mem_heap_lo()) || (lo > (char *)mem_heap_hi()) || 
 8000d7e:	f000 fee7 	bl	8001b50 <mem_heap_lo>
 8000d82:	4602      	mov	r2, r0
 8000d84:	9b04      	ldr	r3, [sp, #16]
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d311      	bcc.n	8000dae <add_range+0x7e>
 8000d8a:	f000 fee7 	bl	8001b5c <mem_heap_hi>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	9b04      	ldr	r3, [sp, #16]
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d80b      	bhi.n	8000dae <add_range+0x7e>
	(hi < (char *)mem_heap_lo()) || (hi > (char *)mem_heap_hi())) {
 8000d96:	f000 fedb 	bl	8001b50 <mem_heap_lo>
 8000d9a:	4602      	mov	r2, r0
    if ((lo < (char *)mem_heap_lo()) || (lo > (char *)mem_heap_hi()) || 
 8000d9c:	9b06      	ldr	r3, [sp, #24]
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d305      	bcc.n	8000dae <add_range+0x7e>
	(hi < (char *)mem_heap_lo()) || (hi > (char *)mem_heap_hi())) {
 8000da2:	f000 fedb 	bl	8001b5c <mem_heap_hi>
 8000da6:	4602      	mov	r2, r0
 8000da8:	9b06      	ldr	r3, [sp, #24]
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d914      	bls.n	8000dd8 <add_range+0xa8>
	sprintf(msg, "Payload (%p:%p) lies outside heap (%p:%p)",
 8000dae:	f000 fecf 	bl	8001b50 <mem_heap_lo>
 8000db2:	4604      	mov	r4, r0
 8000db4:	f000 fed2 	bl	8001b5c <mem_heap_hi>
 8000db8:	4603      	mov	r3, r0
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	9400      	str	r4, [sp, #0]
 8000dbe:	9b06      	ldr	r3, [sp, #24]
 8000dc0:	9a04      	ldr	r2, [sp, #16]
 8000dc2:	4933      	ldr	r1, [pc, #204]	; (8000e90 <add_range+0x160>)
 8000dc4:	4831      	ldr	r0, [pc, #196]	; (8000e8c <add_range+0x15c>)
 8000dc6:	f001 fe6b 	bl	8002aa0 <siprintf>
		lo, hi, mem_heap_lo(), mem_heap_hi());
	malloc_error(tracenum, opnum, msg);
 8000dca:	4a30      	ldr	r2, [pc, #192]	; (8000e8c <add_range+0x15c>)
 8000dcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000dce:	9802      	ldr	r0, [sp, #8]
 8000dd0:	f000 fe56 	bl	8001a80 <malloc_error>
        return 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e04e      	b.n	8000e76 <add_range+0x146>
    }

    /* The payload must not overlap any other payloads */
    for (p = *ranges;  p != NULL;  p = p->next) {
 8000dd8:	9b05      	ldr	r3, [sp, #20]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	9307      	str	r3, [sp, #28]
 8000dde:	e029      	b.n	8000e34 <add_range+0x104>
        if ((lo >= p->lo && lo <= p-> hi) ||
 8000de0:	9b07      	ldr	r3, [sp, #28]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	9a04      	ldr	r2, [sp, #16]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d304      	bcc.n	8000df4 <add_range+0xc4>
 8000dea:	9b07      	ldr	r3, [sp, #28]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	9a04      	ldr	r2, [sp, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d909      	bls.n	8000e08 <add_range+0xd8>
            (hi >= p->lo && hi <= p->hi)) {
 8000df4:	9b07      	ldr	r3, [sp, #28]
 8000df6:	681b      	ldr	r3, [r3, #0]
        if ((lo >= p->lo && lo <= p-> hi) ||
 8000df8:	9a06      	ldr	r2, [sp, #24]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d317      	bcc.n	8000e2e <add_range+0xfe>
            (hi >= p->lo && hi <= p->hi)) {
 8000dfe:	9b07      	ldr	r3, [sp, #28]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	9a06      	ldr	r2, [sp, #24]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d812      	bhi.n	8000e2e <add_range+0xfe>
	    sprintf(msg, "Payload (%p:%p) overlaps another payload (%p:%p)\n",
 8000e08:	9b07      	ldr	r3, [sp, #28]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	9a07      	ldr	r2, [sp, #28]
 8000e0e:	6852      	ldr	r2, [r2, #4]
 8000e10:	9201      	str	r2, [sp, #4]
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	9b06      	ldr	r3, [sp, #24]
 8000e16:	9a04      	ldr	r2, [sp, #16]
 8000e18:	491e      	ldr	r1, [pc, #120]	; (8000e94 <add_range+0x164>)
 8000e1a:	481c      	ldr	r0, [pc, #112]	; (8000e8c <add_range+0x15c>)
 8000e1c:	f001 fe40 	bl	8002aa0 <siprintf>
		    lo, hi, p->lo, p->hi);
	    malloc_error(tracenum, opnum, msg);
 8000e20:	4a1a      	ldr	r2, [pc, #104]	; (8000e8c <add_range+0x15c>)
 8000e22:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000e24:	9802      	ldr	r0, [sp, #8]
 8000e26:	f000 fe2b 	bl	8001a80 <malloc_error>
	    return 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e023      	b.n	8000e76 <add_range+0x146>
    for (p = *ranges;  p != NULL;  p = p->next) {
 8000e2e:	9b07      	ldr	r3, [sp, #28]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	9307      	str	r3, [sp, #28]
 8000e34:	9b07      	ldr	r3, [sp, #28]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1d2      	bne.n	8000de0 <add_range+0xb0>

    /* 
     * Everything looks OK, so remember the extent of this block 
     * by creating a range struct and adding it the range list.
     */
    if ((p = (range_t *)mm_malloc(sizeof(range_t))) == NULL)
 8000e3a:	200c      	movs	r0, #12
 8000e3c:	f001 f908 	bl	8002050 <mm_malloc>
 8000e40:	9007      	str	r0, [sp, #28]
 8000e42:	9b07      	ldr	r3, [sp, #28]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <add_range+0x11e>
		unix_error("malloc error in add_range");
 8000e48:	4813      	ldr	r0, [pc, #76]	; (8000e98 <add_range+0x168>)
 8000e4a:	f000 fdfb 	bl	8001a44 <unix_error>
	test_mem_use += sizeof(range_t);
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <add_range+0x16c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	330c      	adds	r3, #12
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <add_range+0x16c>)
 8000e58:	601a      	str	r2, [r3, #0]
    p->next = *ranges;
 8000e5a:	9b05      	ldr	r3, [sp, #20]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	9b07      	ldr	r3, [sp, #28]
 8000e60:	609a      	str	r2, [r3, #8]
    p->lo = lo;
 8000e62:	9b07      	ldr	r3, [sp, #28]
 8000e64:	9a04      	ldr	r2, [sp, #16]
 8000e66:	601a      	str	r2, [r3, #0]
    p->hi = hi;
 8000e68:	9b07      	ldr	r3, [sp, #28]
 8000e6a:	9a06      	ldr	r2, [sp, #24]
 8000e6c:	605a      	str	r2, [r3, #4]
    *ranges = p;
 8000e6e:	9b05      	ldr	r3, [sp, #20]
 8000e70:	9a07      	ldr	r2, [sp, #28]
 8000e72:	601a      	str	r2, [r3, #0]
    return 1;
 8000e74:	2301      	movs	r3, #1
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	b008      	add	sp, #32
 8000e7a:	bd10      	pop	{r4, pc}
 8000e7c:	080048a4 	.word	0x080048a4
 8000e80:	08004c98 	.word	0x08004c98
 8000e84:	080048b0 	.word	0x080048b0
 8000e88:	080048c0 	.word	0x080048c0
 8000e8c:	20000900 	.word	0x20000900
 8000e90:	080048f0 	.word	0x080048f0
 8000e94:	0800491c 	.word	0x0800491c
 8000e98:	08004950 	.word	0x08004950
 8000e9c:	200000ec 	.word	0x200000ec

08000ea0 <remove_range>:

/* 
 * remove_range - Free the range record of block whose payload starts at lo 
 */
static void remove_range(range_t **ranges, char *lo)
{
 8000ea0:	b500      	push	{lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	9001      	str	r0, [sp, #4]
 8000ea6:	9100      	str	r1, [sp, #0]
    range_t *p;
    range_t **prevpp = ranges;
 8000ea8:	9b01      	ldr	r3, [sp, #4]
 8000eaa:	9302      	str	r3, [sp, #8]

    for (p = *ranges;  p != NULL; p = p->next) {
 8000eac:	9b01      	ldr	r3, [sp, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	9303      	str	r3, [sp, #12]
 8000eb2:	e012      	b.n	8000eda <remove_range+0x3a>
        if (p->lo == lo) {
 8000eb4:	9b03      	ldr	r3, [sp, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	9a00      	ldr	r2, [sp, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d107      	bne.n	8000ece <remove_range+0x2e>
	    *prevpp = p->next;
 8000ebe:	9b03      	ldr	r3, [sp, #12]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	9b02      	ldr	r3, [sp, #8]
 8000ec4:	601a      	str	r2, [r3, #0]
            mm_free(p);
 8000ec6:	9803      	ldr	r0, [sp, #12]
 8000ec8:	f001 f8fd 	bl	80020c6 <mm_free>
            break;
 8000ecc:	e009      	b.n	8000ee2 <remove_range+0x42>
        }
        prevpp = &(p->next);
 8000ece:	9b03      	ldr	r3, [sp, #12]
 8000ed0:	3308      	adds	r3, #8
 8000ed2:	9302      	str	r3, [sp, #8]
    for (p = *ranges;  p != NULL; p = p->next) {
 8000ed4:	9b03      	ldr	r3, [sp, #12]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	9303      	str	r3, [sp, #12]
 8000eda:	9b03      	ldr	r3, [sp, #12]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1e9      	bne.n	8000eb4 <remove_range+0x14>
    }
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	b005      	add	sp, #20
 8000ee6:	f85d fb04 	ldr.w	pc, [sp], #4

08000eea <clear_ranges>:

/*
 * clear_ranges - free all of the range records for a trace 
 */
static void clear_ranges(range_t **ranges)
{
 8000eea:	b500      	push	{lr}
 8000eec:	b085      	sub	sp, #20
 8000eee:	9001      	str	r0, [sp, #4]
    range_t *p;
    range_t *pnext;

    for (p = *ranges;  p != NULL;  p = pnext) {
 8000ef0:	9b01      	ldr	r3, [sp, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	9303      	str	r3, [sp, #12]
 8000ef6:	e007      	b.n	8000f08 <clear_ranges+0x1e>
        pnext = p->next;
 8000ef8:	9b03      	ldr	r3, [sp, #12]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	9302      	str	r3, [sp, #8]
        mm_free(p);
 8000efe:	9803      	ldr	r0, [sp, #12]
 8000f00:	f001 f8e1 	bl	80020c6 <mm_free>
    for (p = *ranges;  p != NULL;  p = pnext) {
 8000f04:	9b02      	ldr	r3, [sp, #8]
 8000f06:	9303      	str	r3, [sp, #12]
 8000f08:	9b03      	ldr	r3, [sp, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f4      	bne.n	8000ef8 <clear_ranges+0xe>
    }
    *ranges = NULL;
 8000f0e:	9b01      	ldr	r3, [sp, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	b005      	add	sp, #20
 8000f18:	f85d fb04 	ldr.w	pc, [sp], #4

08000f1c <read_trace>:

/*
 * read_trace - read a trace file and store it in memory
 */
static trace_t *read_trace()
{
 8000f1c:	b500      	push	{lr}
 8000f1e:	f6ad 0d2c 	subw	sp, sp, #2092	; 0x82c
    trace_t *trace;
    char type[MAXLINE];
    char path[MAXLINE];
    unsigned index, size;
    unsigned max_index = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
    unsigned op_index;
	char * scanptr = tracestr;
 8000f28:	4bac      	ldr	r3, [pc, #688]	; (80011dc <read_trace+0x2c0>)
 8000f2a:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
	int bytes_scanned = 0;
 8000f2e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f32:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]

    /* Allocate the trace record */
    if ((trace = (trace_t *) mm_malloc(sizeof(trace_t))) == NULL)
 8000f3a:	201c      	movs	r0, #28
 8000f3c:	f001 f888 	bl	8002050 <mm_malloc>
 8000f40:	f8cd 0818 	str.w	r0, [sp, #2072]	; 0x818
 8000f44:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <read_trace+0x36>
		unix_error("malloc 1 failed in read_trance");
 8000f4c:	48a4      	ldr	r0, [pc, #656]	; (80011e0 <read_trace+0x2c4>)
 8000f4e:	f000 fd79 	bl	8001a44 <unix_error>
	test_mem_use += sizeof(trace_t);
 8000f52:	4ba4      	ldr	r3, [pc, #656]	; (80011e4 <read_trace+0x2c8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	331c      	adds	r3, #28
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4ba2      	ldr	r3, [pc, #648]	; (80011e4 <read_trace+0x2c8>)
 8000f5c:	601a      	str	r2, [r3, #0]
    /* Read the trace file header */
    //if ((tracefile = fmemopen(tracestr, strlen(tracestr), "r")) == NULL) {
	//sprintf(msg, "Could not open %s in read_trace", path);
	//unix_error(msg);
    //}
    sscanf(scanptr, "%d%n", &(trace->sugg_heapsize), &bytes_scanned); /* not used */
 8000f5e:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
 8000f62:	ab03      	add	r3, sp, #12
 8000f64:	49a0      	ldr	r1, [pc, #640]	; (80011e8 <read_trace+0x2cc>)
 8000f66:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000f6a:	f001 fdb9 	bl	8002ae0 <siscanf>
	scanptr += bytes_scanned;
 8000f6e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f72:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000f7e:	4413      	add	r3, r2
 8000f80:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->num_ids), &bytes_scanned);     
 8000f84:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000f88:	1d1a      	adds	r2, r3, #4
 8000f8a:	ab03      	add	r3, sp, #12
 8000f8c:	4996      	ldr	r1, [pc, #600]	; (80011e8 <read_trace+0x2cc>)
 8000f8e:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000f92:	f001 fda5 	bl	8002ae0 <siscanf>
	scanptr += bytes_scanned;
 8000f96:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000f9a:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000fa6:	4413      	add	r3, r2
 8000fa8:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->num_ops), &bytes_scanned);     
 8000fac:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000fb0:	f103 0208 	add.w	r2, r3, #8
 8000fb4:	ab03      	add	r3, sp, #12
 8000fb6:	498c      	ldr	r1, [pc, #560]	; (80011e8 <read_trace+0x2cc>)
 8000fb8:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000fbc:	f001 fd90 	bl	8002ae0 <siscanf>
	scanptr += bytes_scanned;
 8000fc0:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000fc4:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000fd0:	4413      	add	r3, r2
 8000fd2:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    sscanf(scanptr, "%d%n", &(trace->weight), &bytes_scanned);        /* not used */
 8000fd6:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8000fda:	f103 020c 	add.w	r2, r3, #12
 8000fde:	ab03      	add	r3, sp, #12
 8000fe0:	4981      	ldr	r1, [pc, #516]	; (80011e8 <read_trace+0x2cc>)
 8000fe2:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8000fe6:	f001 fd7b 	bl	8002ae0 <siscanf>
	scanptr += bytes_scanned;
 8000fea:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8000fee:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8000ffa:	4413      	add	r3, r2
 8000ffc:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
    
    /* We'll store each request line in the trace in this array */
    if ((trace->ops = 
	 (traceop_t *)mm_malloc(trace->num_ops * sizeof(traceop_t))) == NULL)
 8001000:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	461a      	mov	r2, r3
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4618      	mov	r0, r3
 8001012:	f001 f81d 	bl	8002050 <mm_malloc>
 8001016:	4602      	mov	r2, r0
    if ((trace->ops = 
 8001018:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <read_trace+0x112>
		unix_error("malloc 2 failed in read_trace");
 8001028:	4870      	ldr	r0, [pc, #448]	; (80011ec <read_trace+0x2d0>)
 800102a:	f000 fd0b 	bl	8001a44 <unix_error>
	test_mem_use += sizeof(traceop_t);
 800102e:	4b6d      	ldr	r3, [pc, #436]	; (80011e4 <read_trace+0x2c8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	330c      	adds	r3, #12
 8001034:	461a      	mov	r2, r3
 8001036:	4b6b      	ldr	r3, [pc, #428]	; (80011e4 <read_trace+0x2c8>)
 8001038:	601a      	str	r2, [r3, #0]
	

    /* We'll keep an array of pointers to the allocated blocks here... */
    if ((trace->blocks = 
	 (char **)mm_malloc(trace->num_ids * sizeof(char *))) == NULL)
 800103a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4618      	mov	r0, r3
 8001044:	f001 f804 	bl	8002050 <mm_malloc>
 8001048:	4602      	mov	r2, r0
    if ((trace->blocks = 
 800104a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800104e:	615a      	str	r2, [r3, #20]
 8001050:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d102      	bne.n	8001060 <read_trace+0x144>
		unix_error("malloc 3 failed in read_trace");
 800105a:	4865      	ldr	r0, [pc, #404]	; (80011f0 <read_trace+0x2d4>)
 800105c:	f000 fcf2 	bl	8001a44 <unix_error>
	test_mem_use += trace->num_ids * sizeof(char *);
 8001060:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4a5e      	ldr	r2, [pc, #376]	; (80011e4 <read_trace+0x2c8>)
 800106a:	6812      	ldr	r2, [r2, #0]
 800106c:	4413      	add	r3, r2
 800106e:	461a      	mov	r2, r3
 8001070:	4b5c      	ldr	r3, [pc, #368]	; (80011e4 <read_trace+0x2c8>)
 8001072:	601a      	str	r2, [r3, #0]

    /* ... along with the corresponding byte sizes of each block */
    if ((trace->block_sizes = 
	 (size_t *)mm_malloc(trace->num_ids * sizeof(size_t))) == NULL)
 8001074:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4618      	mov	r0, r3
 800107e:	f000 ffe7 	bl	8002050 <mm_malloc>
 8001082:	4602      	mov	r2, r0
    if ((trace->block_sizes = 
 8001084:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 8001088:	619a      	str	r2, [r3, #24]
 800108a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <read_trace+0x17e>
		unix_error("malloc 4 failed in read_trace");
 8001094:	4857      	ldr	r0, [pc, #348]	; (80011f4 <read_trace+0x2d8>)
 8001096:	f000 fcd5 	bl	8001a44 <unix_error>
	test_mem_use += trace->num_ids * sizeof(size_t);
 800109a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4a50      	ldr	r2, [pc, #320]	; (80011e4 <read_trace+0x2c8>)
 80010a4:	6812      	ldr	r2, [r2, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b4e      	ldr	r3, [pc, #312]	; (80011e4 <read_trace+0x2c8>)
 80010ac:	601a      	str	r2, [r3, #0]
    
    /* read every request line in the trace file */
    index = 0;
 80010ae:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80010b2:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
    op_index = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8cd 3820 	str.w	r3, [sp, #2080]	; 0x820
    while (sscanf(scanptr, "%s%n", type, &bytes_scanned) != EOF) {
 80010c0:	e143      	b.n	800134a <read_trace+0x42e>
		scanptr += bytes_scanned;
 80010c2:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80010c6:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 80010d2:	4413      	add	r3, r2
 80010d4:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
		switch(type[0]) {
 80010d8:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80010dc:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	3b61      	subs	r3, #97	; 0x61
 80010e4:	2b12      	cmp	r3, #18
 80010e6:	f200 810f 	bhi.w	8001308 <read_trace+0x3ec>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <read_trace+0x1d4>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	0800113d 	.word	0x0800113d
 80010f4:	08001309 	.word	0x08001309
 80010f8:	08001309 	.word	0x08001309
 80010fc:	08001309 	.word	0x08001309
 8001100:	08001309 	.word	0x08001309
 8001104:	0800129d 	.word	0x0800129d
 8001108:	08001309 	.word	0x08001309
 800110c:	08001303 	.word	0x08001303
 8001110:	08001309 	.word	0x08001309
 8001114:	08001309 	.word	0x08001309
 8001118:	08001309 	.word	0x08001309
 800111c:	08001309 	.word	0x08001309
 8001120:	08001309 	.word	0x08001309
 8001124:	08001309 	.word	0x08001309
 8001128:	08001309 	.word	0x08001309
 800112c:	08001309 	.word	0x08001309
 8001130:	08001309 	.word	0x08001309
 8001134:	080011fd 	.word	0x080011fd
 8001138:	080012fd 	.word	0x080012fd
		case 'a':
			sscanf(scanptr, "%u %u%n", &index, &size, &bytes_scanned);
 800113c:	a904      	add	r1, sp, #16
 800113e:	aa05      	add	r2, sp, #20
 8001140:	ab03      	add	r3, sp, #12
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	460b      	mov	r3, r1
 8001146:	492c      	ldr	r1, [pc, #176]	; (80011f8 <read_trace+0x2dc>)
 8001148:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 800114c:	f001 fcc8 	bl	8002ae0 <siscanf>
			scanptr += bytes_scanned;
 8001150:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001154:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8001160:	4413      	add	r3, r2
 8001162:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = ALLOC;
 8001166:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800116a:	6919      	ldr	r1, [r3, #16]
 800116c:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 800117e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001182:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800118c:	6919      	ldr	r1, [r3, #16]
 800118e:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	4602      	mov	r2, r0
 800119e:	605a      	str	r2, [r3, #4]
			trace->ops[op_index].size = size;
 80011a0:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80011a4:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 80011ae:	6919      	ldr	r1, [r3, #16]
 80011b0:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	4602      	mov	r2, r0
 80011c0:	609a      	str	r2, [r3, #8]
			max_index = (index > max_index) ? index : max_index;
 80011c2:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80011c6:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f8dd 2824 	ldr.w	r2, [sp, #2084]	; 0x824
 80011d0:	4293      	cmp	r3, r2
 80011d2:	bf38      	it	cc
 80011d4:	4613      	movcc	r3, r2
 80011d6:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
			break;
 80011da:	e0b1      	b.n	8001340 <read_trace+0x424>
 80011dc:	20000000 	.word	0x20000000
 80011e0:	0800496c 	.word	0x0800496c
 80011e4:	200000ec 	.word	0x200000ec
 80011e8:	0800498c 	.word	0x0800498c
 80011ec:	08004994 	.word	0x08004994
 80011f0:	080049b4 	.word	0x080049b4
 80011f4:	080049d4 	.word	0x080049d4
 80011f8:	080049f4 	.word	0x080049f4
		case 'r':
			sscanf(scanptr, "%u %u%n", &index, &size, &bytes_scanned);
 80011fc:	a904      	add	r1, sp, #16
 80011fe:	aa05      	add	r2, sp, #20
 8001200:	ab03      	add	r3, sp, #12
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	460b      	mov	r3, r1
 8001206:	495b      	ldr	r1, [pc, #364]	; (8001374 <read_trace+0x458>)
 8001208:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 800120c:	f001 fc68 	bl	8002ae0 <siscanf>
			scanptr += bytes_scanned;
 8001210:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001214:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 8001220:	4413      	add	r3, r2
 8001222:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = REALLOC;
 8001226:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800122a:	6919      	ldr	r1, [r3, #16]
 800122c:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	2202      	movs	r2, #2
 800123c:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 800123e:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001242:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800124c:	6919      	ldr	r1, [r3, #16]
 800124e:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	4602      	mov	r2, r0
 800125e:	605a      	str	r2, [r3, #4]
			trace->ops[op_index].size = size;
 8001260:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001264:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 800126e:	6919      	ldr	r1, [r3, #16]
 8001270:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	4602      	mov	r2, r0
 8001280:	609a      	str	r2, [r3, #8]
			max_index = (index > max_index) ? index : max_index;
 8001282:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001286:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f8dd 2824 	ldr.w	r2, [sp, #2084]	; 0x824
 8001290:	4293      	cmp	r3, r2
 8001292:	bf38      	it	cc
 8001294:	4613      	movcc	r3, r2
 8001296:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
			break;
 800129a:	e051      	b.n	8001340 <read_trace+0x424>
		case 'f':
			sscanf(scanptr, "%u%n", &index, &bytes_scanned);
 800129c:	ab03      	add	r3, sp, #12
 800129e:	aa05      	add	r2, sp, #20
 80012a0:	4935      	ldr	r1, [pc, #212]	; (8001378 <read_trace+0x45c>)
 80012a2:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 80012a6:	f001 fc1b 	bl	8002ae0 <siscanf>
			scanptr += bytes_scanned;
 80012aa:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80012ae:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	f8dd 381c 	ldr.w	r3, [sp, #2076]	; 0x81c
 80012ba:	4413      	add	r3, r2
 80012bc:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
			trace->ops[op_index].type = FREE;
 80012c0:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 80012c4:	6919      	ldr	r1, [r3, #16]
 80012c6:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
			trace->ops[op_index].index = index;
 80012d8:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80012dc:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
 80012e6:	6919      	ldr	r1, [r3, #16]
 80012e8:	f8dd 2820 	ldr.w	r2, [sp, #2080]	; 0x820
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	4602      	mov	r2, r0
 80012f8:	605a      	str	r2, [r3, #4]
			break;
 80012fa:	e021      	b.n	8001340 <read_trace+0x424>
		case 's':
			stack_test();
 80012fc:	f7ff fbce 	bl	8000a9c <stack_test>
			break;
 8001300:	e01e      	b.n	8001340 <read_trace+0x424>
		case 'h':
			heap_test();
 8001302:	f7ff fbe4 	bl	8000ace <heap_test>
			break;
 8001306:	e01b      	b.n	8001340 <read_trace+0x424>
		default:
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
			   type[0], scanptr-bytes_scanned, path);
 8001308:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 800130c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001310:	781b      	ldrb	r3, [r3, #0]
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
 8001312:	4619      	mov	r1, r3
			   type[0], scanptr-bytes_scanned, path);
 8001314:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8001318:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	425b      	negs	r3, r3
			sprintf(msg, "Bogus type character (%c) in string (%s) in tracefile %s\n", 
 8001320:	f8dd 281c 	ldr.w	r2, [sp, #2076]	; 0x81c
 8001324:	441a      	add	r2, r3
 8001326:	ab06      	add	r3, sp, #24
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	4613      	mov	r3, r2
 800132c:	460a      	mov	r2, r1
 800132e:	4913      	ldr	r1, [pc, #76]	; (800137c <read_trace+0x460>)
 8001330:	4813      	ldr	r0, [pc, #76]	; (8001380 <read_trace+0x464>)
 8001332:	f001 fbb5 	bl	8002aa0 <siprintf>
			var_print(msg);
 8001336:	4812      	ldr	r0, [pc, #72]	; (8001380 <read_trace+0x464>)
 8001338:	f001 f804 	bl	8002344 <var_print>
			loop();
 800133c:	f001 f800 	bl	8002340 <loop>
		}
		op_index++;
 8001340:	f8dd 3820 	ldr.w	r3, [sp, #2080]	; 0x820
 8001344:	3301      	adds	r3, #1
 8001346:	f8cd 3820 	str.w	r3, [sp, #2080]	; 0x820
    while (sscanf(scanptr, "%s%n", type, &bytes_scanned) != EOF) {
 800134a:	ab03      	add	r3, sp, #12
 800134c:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <read_trace+0x468>)
 8001352:	f8dd 081c 	ldr.w	r0, [sp, #2076]	; 0x81c
 8001356:	f001 fbc3 	bl	8002ae0 <siscanf>
 800135a:	4603      	mov	r3, r0
 800135c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001360:	f47f aeaf 	bne.w	80010c2 <read_trace+0x1a6>
    }
	// Removed to allow shortened trace files
    //assert(max_index == trace->num_ids - 1);
    //assert(trace->num_ops == op_index);
    
    return trace;
 8001364:	f8dd 3818 	ldr.w	r3, [sp, #2072]	; 0x818
}
 8001368:	4618      	mov	r0, r3
 800136a:	f60d 0d2c 	addw	sp, sp, #2092	; 0x82c
 800136e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001372:	bf00      	nop
 8001374:	080049f4 	.word	0x080049f4
 8001378:	080049fc 	.word	0x080049fc
 800137c:	08004a04 	.word	0x08004a04
 8001380:	20000900 	.word	0x20000900
 8001384:	08004a40 	.word	0x08004a40

08001388 <free_trace>:
/*
 * free_trace - Free the trace record and the three arrays it points
 *              to, all of which were allocated in read_trace().
 */
void free_trace(trace_t *trace)
{
 8001388:	b500      	push	{lr}
 800138a:	b083      	sub	sp, #12
 800138c:	9001      	str	r0, [sp, #4]
    mm_free(trace->ops);         /* free the three arrays... */
 800138e:	9b01      	ldr	r3, [sp, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fe97 	bl	80020c6 <mm_free>
    mm_free(trace->blocks);      
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fe92 	bl	80020c6 <mm_free>
    mm_free(trace->block_sizes);
 80013a2:	9b01      	ldr	r3, [sp, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fe8d 	bl	80020c6 <mm_free>
    mm_free(trace);              /* and the trace record itself... */
 80013ac:	9801      	ldr	r0, [sp, #4]
 80013ae:	f000 fe8a 	bl	80020c6 <mm_free>
}
 80013b2:	bf00      	nop
 80013b4:	b003      	add	sp, #12
 80013b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080013bc <eval_mm_valid>:

/*
 * eval_mm_valid - Check the mm malloc package for correctness
 */
static int eval_mm_valid(trace_t *trace, int tracenum, range_t **ranges) 
{
 80013bc:	b500      	push	{lr}
 80013be:	b08f      	sub	sp, #60	; 0x3c
 80013c0:	9005      	str	r0, [sp, #20]
 80013c2:	9104      	str	r1, [sp, #16]
 80013c4:	9203      	str	r2, [sp, #12]
    char *newp;
    char *oldp;
    char *p;
    
    /* Reset the heap and free any records in the range list */
    clear_ranges(ranges);
 80013c6:	9803      	ldr	r0, [sp, #12]
 80013c8:	f7ff fd8f 	bl	8000eea <clear_ranges>
	return 0;
    }
	*/

    /* Interpret each operation in the trace in order */
    for (i = 0;  i < trace->num_ops;  i++) {
 80013cc:	2300      	movs	r3, #0
 80013ce:	930d      	str	r3, [sp, #52]	; 0x34
 80013d0:	e0e4      	b.n	800159c <eval_mm_valid+0x1e0>
	index = trace->ops[i].index;
 80013d2:	9b05      	ldr	r3, [sp, #20]
 80013d4:	6919      	ldr	r1, [r3, #16]
 80013d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	930a      	str	r3, [sp, #40]	; 0x28
	size = trace->ops[i].size;
 80013e6:	9b05      	ldr	r3, [sp, #20]
 80013e8:	6919      	ldr	r1, [r3, #16]
 80013ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	9309      	str	r3, [sp, #36]	; 0x24

        switch (trace->ops[i].type) {
 80013fa:	9b05      	ldr	r3, [sp, #20]
 80013fc:	6919      	ldr	r1, [r3, #16]
 80013fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d03a      	beq.n	8001486 <eval_mm_valid+0xca>
 8001410:	2b02      	cmp	r3, #2
 8001412:	f300 80ac 	bgt.w	800156e <eval_mm_valid+0x1b2>
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <eval_mm_valid+0x66>
 800141a:	2b01      	cmp	r3, #1
 800141c:	f000 8098 	beq.w	8001550 <eval_mm_valid+0x194>
 8001420:	e0a5      	b.n	800156e <eval_mm_valid+0x1b2>

        case ALLOC: /* mm_malloc */

	    /* Call the student's malloc */
	    if ((p = mm_malloc(size)) == NULL) {
 8001422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001424:	4618      	mov	r0, r3
 8001426:	f000 fe13 	bl	8002050 <mm_malloc>
 800142a:	9006      	str	r0, [sp, #24]
 800142c:	9b06      	ldr	r3, [sp, #24]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <eval_mm_valid+0x84>
		malloc_error(tracenum, i, "mm_malloc failed.");
 8001432:	4a60      	ldr	r2, [pc, #384]	; (80015b4 <eval_mm_valid+0x1f8>)
 8001434:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001436:	9804      	ldr	r0, [sp, #16]
 8001438:	f000 fb22 	bl	8001a80 <malloc_error>
		return 0;
 800143c:	2300      	movs	r3, #0
 800143e:	e0b4      	b.n	80015aa <eval_mm_valid+0x1ee>
	    /* 
	     * Test the range of the new block for correctness and add it 
	     * to the range list if OK. The block must be  be aligned properly,
	     * and must not overlap any currently allocated block. 
	     */ 
	    if (add_range(ranges, p, size, tracenum, i) == 0)
 8001440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	9b04      	ldr	r3, [sp, #16]
 8001446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001448:	9906      	ldr	r1, [sp, #24]
 800144a:	9803      	ldr	r0, [sp, #12]
 800144c:	f7ff fc70 	bl	8000d30 <add_range>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <eval_mm_valid+0x9e>
		return 0;
 8001456:	2300      	movs	r3, #0
 8001458:	e0a7      	b.n	80015aa <eval_mm_valid+0x1ee>
	    /* ADDED: cgw
	     * fill range with low byte of index.  This will be used later
	     * if we realloc the block and wish to make sure that the old
	     * data was copied to the new block
	     */
	    memset(p, index & 0xFF, size);
 800145a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800145c:	b2db      	uxtb	r3, r3
 800145e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001460:	4619      	mov	r1, r3
 8001462:	9806      	ldr	r0, [sp, #24]
 8001464:	f001 f918 	bl	8002698 <memset>

	    /* Remember region */
	    trace->blocks[index] = p;
 8001468:	9b05      	ldr	r3, [sp, #20]
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	9a06      	ldr	r2, [sp, #24]
 8001474:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 8001476:	9b05      	ldr	r3, [sp, #20]
 8001478:	699a      	ldr	r2, [r3, #24]
 800147a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001482:	601a      	str	r2, [r3, #0]
	    break;
 8001484:	e087      	b.n	8001596 <eval_mm_valid+0x1da>

        case REALLOC: /* mm_realloc */
	    
	    /* Call the student's realloc */
	    oldp = trace->blocks[index];
 8001486:	9b05      	ldr	r3, [sp, #20]
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	9308      	str	r3, [sp, #32]
	    if ((newp = mm_realloc(oldp, size)) == NULL) {
 8001494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001496:	4619      	mov	r1, r3
 8001498:	9808      	ldr	r0, [sp, #32]
 800149a:	f000 fe32 	bl	8002102 <mm_realloc>
 800149e:	9007      	str	r0, [sp, #28]
 80014a0:	9b07      	ldr	r3, [sp, #28]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d106      	bne.n	80014b4 <eval_mm_valid+0xf8>
		malloc_error(tracenum, i, "mm_realloc failed.");
 80014a6:	4a44      	ldr	r2, [pc, #272]	; (80015b8 <eval_mm_valid+0x1fc>)
 80014a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80014aa:	9804      	ldr	r0, [sp, #16]
 80014ac:	f000 fae8 	bl	8001a80 <malloc_error>
		return 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	e07a      	b.n	80015aa <eval_mm_valid+0x1ee>
	    }
	    
	    /* Remove the old region from the range list */
	    remove_range(ranges, oldp);
 80014b4:	9908      	ldr	r1, [sp, #32]
 80014b6:	9803      	ldr	r0, [sp, #12]
 80014b8:	f7ff fcf2 	bl	8000ea0 <remove_range>
	    
	    /* Check new block for correctness and add it to range list */
	    if (add_range(ranges, newp, size, tracenum, i) == 0)
 80014bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	9b04      	ldr	r3, [sp, #16]
 80014c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014c4:	9907      	ldr	r1, [sp, #28]
 80014c6:	9803      	ldr	r0, [sp, #12]
 80014c8:	f7ff fc32 	bl	8000d30 <add_range>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <eval_mm_valid+0x11a>
		return 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e069      	b.n	80015aa <eval_mm_valid+0x1ee>
	    /* ADDED: cgw
	     * Make sure that the new block contains the data from the old 
	     * block and then fill in the new block with the low order byte
	     * of the new index
	     */
	    oldsize = trace->block_sizes[index];
 80014d6:	9b05      	ldr	r3, [sp, #20]
 80014d8:	699a      	ldr	r2, [r3, #24]
 80014da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	930b      	str	r3, [sp, #44]	; 0x2c
	    if (size < oldsize) oldsize = size;
 80014e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014e8:	429a      	cmp	r2, r3
 80014ea:	da01      	bge.n	80014f0 <eval_mm_valid+0x134>
 80014ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014ee:	930b      	str	r3, [sp, #44]	; 0x2c
	    for (j = 0; j < oldsize; j++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	930c      	str	r3, [sp, #48]	; 0x30
 80014f4:	e012      	b.n	800151c <eval_mm_valid+0x160>
	      if (newp[j] != (index & 0xFF)) {
 80014f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80014f8:	9a07      	ldr	r2, [sp, #28]
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001502:	b2db      	uxtb	r3, r3
 8001504:	429a      	cmp	r2, r3
 8001506:	d006      	beq.n	8001516 <eval_mm_valid+0x15a>
		malloc_error(tracenum, i, "mm_realloc did not preserve the "
 8001508:	4a2c      	ldr	r2, [pc, #176]	; (80015bc <eval_mm_valid+0x200>)
 800150a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800150c:	9804      	ldr	r0, [sp, #16]
 800150e:	f000 fab7 	bl	8001a80 <malloc_error>
			     "data from old block");
		return 0;
 8001512:	2300      	movs	r3, #0
 8001514:	e049      	b.n	80015aa <eval_mm_valid+0x1ee>
	    for (j = 0; j < oldsize; j++) {
 8001516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001518:	3301      	adds	r3, #1
 800151a:	930c      	str	r3, [sp, #48]	; 0x30
 800151c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800151e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001520:	429a      	cmp	r2, r3
 8001522:	dbe8      	blt.n	80014f6 <eval_mm_valid+0x13a>
	      }
	    }
	    memset(newp, index & 0xFF, size);
 8001524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001526:	b2db      	uxtb	r3, r3
 8001528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	9807      	ldr	r0, [sp, #28]
 800152e:	f001 f8b3 	bl	8002698 <memset>

	    /* Remember region */
	    trace->blocks[index] = newp;
 8001532:	9b05      	ldr	r3, [sp, #20]
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	9a07      	ldr	r2, [sp, #28]
 800153e:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 8001540:	9b05      	ldr	r3, [sp, #20]
 8001542:	699a      	ldr	r2, [r3, #24]
 8001544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800154c:	601a      	str	r2, [r3, #0]
	    break;
 800154e:	e022      	b.n	8001596 <eval_mm_valid+0x1da>

        case FREE: /* mm_free */
	    
	    /* Remove region from list and call student's free function */
	    p = trace->blocks[index];
 8001550:	9b05      	ldr	r3, [sp, #20]
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	9306      	str	r3, [sp, #24]
	    remove_range(ranges, p);
 800155e:	9906      	ldr	r1, [sp, #24]
 8001560:	9803      	ldr	r0, [sp, #12]
 8001562:	f7ff fc9d 	bl	8000ea0 <remove_range>
	    mm_free(p);
 8001566:	9806      	ldr	r0, [sp, #24]
 8001568:	f000 fdad 	bl	80020c6 <mm_free>
	    break;
 800156c:	e013      	b.n	8001596 <eval_mm_valid+0x1da>

	default:
		sprintf(msg, "Type %d", trace->ops[i].type);
 800156e:	9b05      	ldr	r3, [sp, #20]
 8001570:	6919      	ldr	r1, [r3, #16]
 8001572:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	490f      	ldr	r1, [pc, #60]	; (80015c0 <eval_mm_valid+0x204>)
 8001584:	480f      	ldr	r0, [pc, #60]	; (80015c4 <eval_mm_valid+0x208>)
 8001586:	f001 fa8b 	bl	8002aa0 <siprintf>
		var_print(msg);
 800158a:	480e      	ldr	r0, [pc, #56]	; (80015c4 <eval_mm_valid+0x208>)
 800158c:	f000 feda 	bl	8002344 <var_print>
	    app_error("Nonexistent request type in eval_mm_valid");
 8001590:	480d      	ldr	r0, [pc, #52]	; (80015c8 <eval_mm_valid+0x20c>)
 8001592:	f000 fa41 	bl	8001a18 <app_error>
    for (i = 0;  i < trace->num_ops;  i++) {
 8001596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001598:	3301      	adds	r3, #1
 800159a:	930d      	str	r3, [sp, #52]	; 0x34
 800159c:	9b05      	ldr	r3, [sp, #20]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80015a2:	429a      	cmp	r2, r3
 80015a4:	f6ff af15 	blt.w	80013d2 <eval_mm_valid+0x16>
        }

    }

    /* As far as we know, this is a valid malloc package */
    return 1;
 80015a8:	2301      	movs	r3, #1
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	b00f      	add	sp, #60	; 0x3c
 80015ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80015b2:	bf00      	nop
 80015b4:	08004a48 	.word	0x08004a48
 80015b8:	08004a5c 	.word	0x08004a5c
 80015bc:	08004a70 	.word	0x08004a70
 80015c0:	08004aa4 	.word	0x08004aa4
 80015c4:	20000900 	.word	0x20000900
 80015c8:	08004aac 	.word	0x08004aac

080015cc <eval_mm_util>:
 *   doesn't allow the students to decrement the brk pointer, so brk
 *   is always the high water mark of the heap. 
 *   
 */
static double eval_mm_util(trace_t *trace, int tracenum, range_t **ranges)
{   
 80015cc:	b530      	push	{r4, r5, lr}
 80015ce:	b08f      	sub	sp, #60	; 0x3c
 80015d0:	9003      	str	r0, [sp, #12]
 80015d2:	9102      	str	r1, [sp, #8]
 80015d4:	9201      	str	r2, [sp, #4]
    int i;
    int index;
    int size, newsize, oldsize;
    int max_total_size = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	930c      	str	r3, [sp, #48]	; 0x30
    int total_size = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	930b      	str	r3, [sp, #44]	; 0x2c
    /* initialize the heap and the mm malloc package */
    //mem_reset_brk();
    //if (mm_init() < 0)
	//app_error("mm_init failed in eval_mm_util");

    for (i = 0;  i < trace->num_ops;  i++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	930d      	str	r3, [sp, #52]	; 0x34
 80015e2:	e0ba      	b.n	800175a <eval_mm_util+0x18e>
        switch (trace->ops[i].type) {
 80015e4:	9b03      	ldr	r3, [sp, #12]
 80015e6:	6919      	ldr	r1, [r3, #16]
 80015e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d040      	beq.n	800167c <eval_mm_util+0xb0>
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	f300 80a7 	bgt.w	800174e <eval_mm_util+0x182>
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <eval_mm_util+0x40>
 8001604:	2b01      	cmp	r3, #1
 8001606:	f000 8082 	beq.w	800170e <eval_mm_util+0x142>
 800160a:	e0a0      	b.n	800174e <eval_mm_util+0x182>

        case ALLOC: /* mm_alloc */
	    index = trace->ops[i].index;
 800160c:	9b03      	ldr	r3, [sp, #12]
 800160e:	6919      	ldr	r1, [r3, #16]
 8001610:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	930a      	str	r3, [sp, #40]	; 0x28
	    size = trace->ops[i].size;
 8001620:	9b03      	ldr	r3, [sp, #12]
 8001622:	6919      	ldr	r1, [r3, #16]
 8001624:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	9305      	str	r3, [sp, #20]

	    if ((p = mm_malloc(size)) == NULL) 
 8001634:	9b05      	ldr	r3, [sp, #20]
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fd0a 	bl	8002050 <mm_malloc>
 800163c:	9004      	str	r0, [sp, #16]
 800163e:	9b04      	ldr	r3, [sp, #16]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <eval_mm_util+0x7e>
		app_error("mm_malloc failed in eval_mm_util");
 8001644:	4856      	ldr	r0, [pc, #344]	; (80017a0 <eval_mm_util+0x1d4>)
 8001646:	f000 f9e7 	bl	8001a18 <app_error>
	    
	    /* Remember region and size */
	    trace->blocks[index] = p;
 800164a:	9b03      	ldr	r3, [sp, #12]
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	9a04      	ldr	r2, [sp, #16]
 8001656:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = size;
 8001658:	9b03      	ldr	r3, [sp, #12]
 800165a:	699a      	ldr	r2, [r3, #24]
 800165c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	9a05      	ldr	r2, [sp, #20]
 8001664:	601a      	str	r2, [r3, #0]
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size += size;
 8001666:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001668:	9b05      	ldr	r3, [sp, #20]
 800166a:	4413      	add	r3, r2
 800166c:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    /* Update statistics */
	    max_total_size = (total_size > max_total_size) ?
 800166e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001672:	4293      	cmp	r3, r2
 8001674:	bfb8      	it	lt
 8001676:	4613      	movlt	r3, r2
 8001678:	930c      	str	r3, [sp, #48]	; 0x30
		total_size : max_total_size;
	    break;
 800167a:	e06b      	b.n	8001754 <eval_mm_util+0x188>

	case REALLOC: /* mm_realloc */
	    index = trace->ops[i].index;
 800167c:	9b03      	ldr	r3, [sp, #12]
 800167e:	6919      	ldr	r1, [r3, #16]
 8001680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	930a      	str	r3, [sp, #40]	; 0x28
	    newsize = trace->ops[i].size;
 8001690:	9b03      	ldr	r3, [sp, #12]
 8001692:	6919      	ldr	r1, [r3, #16]
 8001694:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	440b      	add	r3, r1
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	9309      	str	r3, [sp, #36]	; 0x24
	    oldsize = trace->block_sizes[index];
 80016a4:	9b03      	ldr	r3, [sp, #12]
 80016a6:	699a      	ldr	r2, [r3, #24]
 80016a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	9308      	str	r3, [sp, #32]

	    oldp = trace->blocks[index];
 80016b2:	9b03      	ldr	r3, [sp, #12]
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	9307      	str	r3, [sp, #28]
	    if ((newp = mm_realloc(oldp,newsize)) == NULL)
 80016c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	9807      	ldr	r0, [sp, #28]
 80016c6:	f000 fd1c 	bl	8002102 <mm_realloc>
 80016ca:	9006      	str	r0, [sp, #24]
 80016cc:	9b06      	ldr	r3, [sp, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <eval_mm_util+0x10c>
		app_error("mm_realloc failed in eval_mm_util");
 80016d2:	4834      	ldr	r0, [pc, #208]	; (80017a4 <eval_mm_util+0x1d8>)
 80016d4:	f000 f9a0 	bl	8001a18 <app_error>

	    /* Remember region and size */
	    trace->blocks[index] = newp;
 80016d8:	9b03      	ldr	r3, [sp, #12]
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	9a06      	ldr	r2, [sp, #24]
 80016e4:	601a      	str	r2, [r3, #0]
	    trace->block_sizes[index] = newsize;
 80016e6:	9b03      	ldr	r3, [sp, #12]
 80016e8:	699a      	ldr	r2, [r3, #24]
 80016ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016f2:	601a      	str	r2, [r3, #0]
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size += (newsize - oldsize);
 80016f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016f6:	9b08      	ldr	r3, [sp, #32]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80016fc:	4413      	add	r3, r2
 80016fe:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    /* Update statistics */
	    max_total_size = (total_size > max_total_size) ?
 8001700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001704:	4293      	cmp	r3, r2
 8001706:	bfb8      	it	lt
 8001708:	4613      	movlt	r3, r2
 800170a:	930c      	str	r3, [sp, #48]	; 0x30
		total_size : max_total_size;
	    break;
 800170c:	e022      	b.n	8001754 <eval_mm_util+0x188>

        case FREE: /* mm_free */
	    index = trace->ops[i].index;
 800170e:	9b03      	ldr	r3, [sp, #12]
 8001710:	6919      	ldr	r1, [r3, #16]
 8001712:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	930a      	str	r3, [sp, #40]	; 0x28
	    size = trace->block_sizes[index];
 8001722:	9b03      	ldr	r3, [sp, #12]
 8001724:	699a      	ldr	r2, [r3, #24]
 8001726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	9305      	str	r3, [sp, #20]
	    p = trace->blocks[index];
 8001730:	9b03      	ldr	r3, [sp, #12]
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	9304      	str	r3, [sp, #16]
	    
	    mm_free(p);
 800173e:	9804      	ldr	r0, [sp, #16]
 8001740:	f000 fcc1 	bl	80020c6 <mm_free>
	    
	    /* Keep track of current total size
	     * of all allocated blocks */
	    total_size -= size;
 8001744:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001746:	9b05      	ldr	r3, [sp, #20]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	930b      	str	r3, [sp, #44]	; 0x2c
	    
	    break;
 800174c:	e002      	b.n	8001754 <eval_mm_util+0x188>

	default:
	    app_error("Nonexistent request type in eval_mm_util");
 800174e:	4816      	ldr	r0, [pc, #88]	; (80017a8 <eval_mm_util+0x1dc>)
 8001750:	f000 f962 	bl	8001a18 <app_error>
    for (i = 0;  i < trace->num_ops;  i++) {
 8001754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001756:	3301      	adds	r3, #1
 8001758:	930d      	str	r3, [sp, #52]	; 0x34
 800175a:	9b03      	ldr	r3, [sp, #12]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001760:	429a      	cmp	r2, r3
 8001762:	f6ff af3f 	blt.w	80015e4 <eval_mm_util+0x18>

        }
    }
	max_total_size += test_mem_use;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <eval_mm_util+0x1e0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800176c:	4413      	add	r3, r2
 800176e:	930c      	str	r3, [sp, #48]	; 0x30

    return ((double)max_total_size / (double)mem_heapsize());
 8001770:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001772:	f7fe fecf 	bl	8000514 <__aeabi_i2d>
 8001776:	4604      	mov	r4, r0
 8001778:	460d      	mov	r5, r1
 800177a:	f000 f9f7 	bl	8001b6c <mem_heapsize>
 800177e:	4603      	mov	r3, r0
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe feb7 	bl	80004f4 <__aeabi_ui2d>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4620      	mov	r0, r4
 800178c:	4629      	mov	r1, r5
 800178e:	f7ff f855 	bl	800083c <__aeabi_ddiv>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
}
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	b00f      	add	sp, #60	; 0x3c
 800179c:	bd30      	pop	{r4, r5, pc}
 800179e:	bf00      	nop
 80017a0:	08004ad8 	.word	0x08004ad8
 80017a4:	08004afc 	.word	0x08004afc
 80017a8:	08004b20 	.word	0x08004b20
 80017ac:	200000ec 	.word	0x200000ec

080017b0 <printresults>:

/*
 * printresults - prints a performance summary for some malloc package
 */
static void printresults(int n, stats_t *stats) 
{
 80017b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017b4:	b093      	sub	sp, #76	; 0x4c
 80017b6:	9009      	str	r0, [sp, #36]	; 0x24
 80017b8:	9108      	str	r1, [sp, #32]
    int i;
    double secs = 0;
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    double ops = 0;
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    double util = 0;
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28

    /* Print the individual results for each trace */
    sprintf(msg, "%5s%7s %5s%8s%10s%6s\n", 
 80017de:	4b7b      	ldr	r3, [pc, #492]	; (80019cc <printresults+0x21c>)
 80017e0:	9303      	str	r3, [sp, #12]
 80017e2:	4b7b      	ldr	r3, [pc, #492]	; (80019d0 <printresults+0x220>)
 80017e4:	9302      	str	r3, [sp, #8]
 80017e6:	4b7b      	ldr	r3, [pc, #492]	; (80019d4 <printresults+0x224>)
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	4b7b      	ldr	r3, [pc, #492]	; (80019d8 <printresults+0x228>)
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	4b7b      	ldr	r3, [pc, #492]	; (80019dc <printresults+0x22c>)
 80017f0:	4a7b      	ldr	r2, [pc, #492]	; (80019e0 <printresults+0x230>)
 80017f2:	497c      	ldr	r1, [pc, #496]	; (80019e4 <printresults+0x234>)
 80017f4:	487c      	ldr	r0, [pc, #496]	; (80019e8 <printresults+0x238>)
 80017f6:	f001 f953 	bl	8002aa0 <siprintf>
	   "trace", " valid", "util", "ops", "secs", "Kops");
	var_print(msg);
 80017fa:	487b      	ldr	r0, [pc, #492]	; (80019e8 <printresults+0x238>)
 80017fc:	f000 fda2 	bl	8002344 <var_print>
    for (i=0; i < n; i++) {
 8001800:	2300      	movs	r3, #0
 8001802:	9311      	str	r3, [sp, #68]	; 0x44
 8001804:	e08a      	b.n	800191c <printresults+0x16c>
	if (stats[i].valid) {
 8001806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001808:	015b      	lsls	r3, r3, #5
 800180a:	9a08      	ldr	r2, [sp, #32]
 800180c:	4413      	add	r3, r2
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d06f      	beq.n	80018f4 <printresults+0x144>
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
		   i,
		   "yes",
		   stats[i].util*100.0,
 8001814:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001816:	015b      	lsls	r3, r3, #5
 8001818:	9a08      	ldr	r2, [sp, #32]
 800181a:	4413      	add	r3, r2
 800181c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b71      	ldr	r3, [pc, #452]	; (80019ec <printresults+0x23c>)
 8001826:	f7fe fedf 	bl	80005e8 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4690      	mov	r8, r2
 8001830:	4699      	mov	r9, r3
		   stats[i].ops,
 8001832:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001834:	015b      	lsls	r3, r3, #5
 8001836:	9a08      	ldr	r2, [sp, #32]
 8001838:	4413      	add	r3, r2
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 800183a:	e9d3 4500 	ldrd	r4, r5, [r3]
		   stats[i].secs,
 800183e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001840:	015b      	lsls	r3, r3, #5
 8001842:	9a08      	ldr	r2, [sp, #32]
 8001844:	4413      	add	r3, r2
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001846:	e9d3 6704 	ldrd	r6, r7, [r3, #16]
		   (stats[i].ops/1e3)/stats[i].secs);
 800184a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800184c:	015b      	lsls	r3, r3, #5
 800184e:	9a08      	ldr	r2, [sp, #32]
 8001850:	4413      	add	r3, r2
 8001852:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	4b65      	ldr	r3, [pc, #404]	; (80019f0 <printresults+0x240>)
 800185c:	f7fe ffee 	bl	800083c <__aeabi_ddiv>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800186a:	015b      	lsls	r3, r3, #5
 800186c:	9a08      	ldr	r2, [sp, #32]
 800186e:	4413      	add	r3, r2
 8001870:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	    sprintf(msg, "%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001874:	f7fe ffe2 	bl	800083c <__aeabi_ddiv>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001880:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001884:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001888:	e9cd 8900 	strd	r8, r9, [sp]
 800188c:	4b59      	ldr	r3, [pc, #356]	; (80019f4 <printresults+0x244>)
 800188e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001890:	4959      	ldr	r1, [pc, #356]	; (80019f8 <printresults+0x248>)
 8001892:	4855      	ldr	r0, [pc, #340]	; (80019e8 <printresults+0x238>)
 8001894:	f001 f904 	bl	8002aa0 <siprintf>
		var_print(msg);
 8001898:	4853      	ldr	r0, [pc, #332]	; (80019e8 <printresults+0x238>)
 800189a:	f000 fd53 	bl	8002344 <var_print>
	    secs += stats[i].secs;
 800189e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018a0:	015b      	lsls	r3, r3, #5
 80018a2:	9a08      	ldr	r2, [sp, #32]
 80018a4:	4413      	add	r3, r2
 80018a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80018aa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80018ae:	f7fe fce5 	bl	800027c <__adddf3>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	    ops += stats[i].ops;
 80018ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018bc:	015b      	lsls	r3, r3, #5
 80018be:	9a08      	ldr	r2, [sp, #32]
 80018c0:	4413      	add	r3, r2
 80018c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80018ca:	f7fe fcd7 	bl	800027c <__adddf3>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	    util += stats[i].util;
 80018d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018d8:	015b      	lsls	r3, r3, #5
 80018da:	9a08      	ldr	r2, [sp, #32]
 80018dc:	4413      	add	r3, r2
 80018de:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80018e6:	f7fe fcc9 	bl	800027c <__adddf3>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80018f2:	e010      	b.n	8001916 <printresults+0x166>
	}
	else {
	    sprintf(msg,"%2d%10s%6s%8s%10s%6s\n", 
 80018f4:	4b41      	ldr	r3, [pc, #260]	; (80019fc <printresults+0x24c>)
 80018f6:	9303      	str	r3, [sp, #12]
 80018f8:	4b40      	ldr	r3, [pc, #256]	; (80019fc <printresults+0x24c>)
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <printresults+0x24c>)
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <printresults+0x24c>)
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <printresults+0x250>)
 8001906:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001908:	493e      	ldr	r1, [pc, #248]	; (8001a04 <printresults+0x254>)
 800190a:	4837      	ldr	r0, [pc, #220]	; (80019e8 <printresults+0x238>)
 800190c:	f001 f8c8 	bl	8002aa0 <siprintf>
		   "no",
		   "-",
		   "-",
		   "-",
		   "-");
		var_print(msg);
 8001910:	4835      	ldr	r0, [pc, #212]	; (80019e8 <printresults+0x238>)
 8001912:	f000 fd17 	bl	8002344 <var_print>
    for (i=0; i < n; i++) {
 8001916:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001918:	3301      	adds	r3, #1
 800191a:	9311      	str	r3, [sp, #68]	; 0x44
 800191c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800191e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001920:	429a      	cmp	r2, r3
 8001922:	f6ff af70 	blt.w	8001806 <printresults+0x56>
	}
    }

    /* Print the aggregate results for the set of traces */
    if (errors == 0) {
 8001926:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <printresults+0x258>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d13b      	bne.n	80019a6 <printresults+0x1f6>
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
	       "Total       ",
	       (util/n)*100.0,
 800192e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001930:	f7fe fdf0 	bl	8000514 <__aeabi_i2d>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800193c:	f7fe ff7e 	bl	800083c <__aeabi_ddiv>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	4b27      	ldr	r3, [pc, #156]	; (80019ec <printresults+0x23c>)
 800194e:	f7fe fe4b 	bl	80005e8 <__aeabi_dmul>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4614      	mov	r4, r2
 8001958:	461d      	mov	r5, r3
	       ops, 
	       secs,
	       (ops/1e3)/secs);
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <printresults+0x240>)
 8001960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001964:	f7fe ff6a 	bl	800083c <__aeabi_ddiv>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
	sprintf(msg, "%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
 8001970:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8001974:	f7fe ff62 	bl	800083c <__aeabi_ddiv>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001980:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8001984:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001988:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800198c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001990:	e9cd 4500 	strd	r4, r5, [sp]
 8001994:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <printresults+0x25c>)
 8001996:	491e      	ldr	r1, [pc, #120]	; (8001a10 <printresults+0x260>)
 8001998:	4813      	ldr	r0, [pc, #76]	; (80019e8 <printresults+0x238>)
 800199a:	f001 f881 	bl	8002aa0 <siprintf>
	var_print(msg);
 800199e:	4812      	ldr	r0, [pc, #72]	; (80019e8 <printresults+0x238>)
 80019a0:	f000 fcd0 	bl	8002344 <var_print>
	       "-", 
	       "-");
	var_print(msg);
    }

}
 80019a4:	e00e      	b.n	80019c4 <printresults+0x214>
	sprintf(msg, "%12s%6s%8s%10s%6s\n", 
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <printresults+0x24c>)
 80019a8:	9302      	str	r3, [sp, #8]
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <printresults+0x24c>)
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	4b13      	ldr	r3, [pc, #76]	; (80019fc <printresults+0x24c>)
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <printresults+0x24c>)
 80019b4:	4a15      	ldr	r2, [pc, #84]	; (8001a0c <printresults+0x25c>)
 80019b6:	4917      	ldr	r1, [pc, #92]	; (8001a14 <printresults+0x264>)
 80019b8:	480b      	ldr	r0, [pc, #44]	; (80019e8 <printresults+0x238>)
 80019ba:	f001 f871 	bl	8002aa0 <siprintf>
	var_print(msg);
 80019be:	480a      	ldr	r0, [pc, #40]	; (80019e8 <printresults+0x238>)
 80019c0:	f000 fcc0 	bl	8002344 <var_print>
}
 80019c4:	bf00      	nop
 80019c6:	b013      	add	sp, #76	; 0x4c
 80019c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019cc:	08004b74 	.word	0x08004b74
 80019d0:	08004b7c 	.word	0x08004b7c
 80019d4:	08004b84 	.word	0x08004b84
 80019d8:	08004b88 	.word	0x08004b88
 80019dc:	08004b4c 	.word	0x08004b4c
 80019e0:	08004b54 	.word	0x08004b54
 80019e4:	08004b5c 	.word	0x08004b5c
 80019e8:	20000900 	.word	0x20000900
 80019ec:	40590000 	.word	0x40590000
 80019f0:	408f4000 	.word	0x408f4000
 80019f4:	08004b90 	.word	0x08004b90
 80019f8:	08004b94 	.word	0x08004b94
 80019fc:	08004bd0 	.word	0x08004bd0
 8001a00:	08004bb4 	.word	0x08004bb4
 8001a04:	08004bb8 	.word	0x08004bb8
 8001a08:	200000e8 	.word	0x200000e8
 8001a0c:	08004bd4 	.word	0x08004bd4
 8001a10:	08004be4 	.word	0x08004be4
 8001a14:	08004c04 	.word	0x08004c04

08001a18 <app_error>:

/* 
 * app_error - Report an arbitrary application error
 */
void app_error(char * err_msg) 
{
 8001a18:	b500      	push	{lr}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	9001      	str	r0, [sp, #4]
    sprintf(msg, "%s\n", err_msg);
 8001a1e:	9a01      	ldr	r2, [sp, #4]
 8001a20:	4906      	ldr	r1, [pc, #24]	; (8001a3c <app_error+0x24>)
 8001a22:	4807      	ldr	r0, [pc, #28]	; (8001a40 <app_error+0x28>)
 8001a24:	f001 f83c 	bl	8002aa0 <siprintf>
	var_print(msg);
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <app_error+0x28>)
 8001a2a:	f000 fc8b 	bl	8002344 <var_print>
	loop();
 8001a2e:	f000 fc87 	bl	8002340 <loop>
}
 8001a32:	bf00      	nop
 8001a34:	b003      	add	sp, #12
 8001a36:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a3a:	bf00      	nop
 8001a3c:	08004c18 	.word	0x08004c18
 8001a40:	20000900 	.word	0x20000900

08001a44 <unix_error>:

/* 
 * unix_error - Report a Unix-style error
 */
void unix_error(char * err_msg) 
{
 8001a44:	b500      	push	{lr}
 8001a46:	b083      	sub	sp, #12
 8001a48:	9001      	str	r0, [sp, #4]
    sprintf(msg, "%s: %s\n", err_msg, strerror(errno));
 8001a4a:	f000 fddb 	bl	8002604 <__errno>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f001 faaa 	bl	8002fac <strerror>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	9a01      	ldr	r2, [sp, #4]
 8001a5c:	4906      	ldr	r1, [pc, #24]	; (8001a78 <unix_error+0x34>)
 8001a5e:	4807      	ldr	r0, [pc, #28]	; (8001a7c <unix_error+0x38>)
 8001a60:	f001 f81e 	bl	8002aa0 <siprintf>
	var_print(msg);
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <unix_error+0x38>)
 8001a66:	f000 fc6d 	bl	8002344 <var_print>
	loop();
 8001a6a:	f000 fc69 	bl	8002340 <loop>
}
 8001a6e:	bf00      	nop
 8001a70:	b003      	add	sp, #12
 8001a72:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a76:	bf00      	nop
 8001a78:	08004c1c 	.word	0x08004c1c
 8001a7c:	20000900 	.word	0x20000900

08001a80 <malloc_error>:

/*
 * malloc_error - Report an error returned by the mm_malloc package
 */
void malloc_error(int tracenum, int opnum, char *err_msg)
{
 8001a80:	b500      	push	{lr}
 8001a82:	b087      	sub	sp, #28
 8001a84:	9005      	str	r0, [sp, #20]
 8001a86:	9104      	str	r1, [sp, #16]
 8001a88:	9203      	str	r2, [sp, #12]
    errors++;
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <malloc_error+0x3c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <malloc_error+0x3c>)
 8001a92:	6013      	str	r3, [r2, #0]
    sprintf(msg, "ERROR [trace %d, line %d]: %s\n", tracenum, LINENUM(opnum), err_msg);
 8001a94:	9b04      	ldr	r3, [sp, #16]
 8001a96:	1d5a      	adds	r2, r3, #5
 8001a98:	9b03      	ldr	r3, [sp, #12]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	9a05      	ldr	r2, [sp, #20]
 8001aa0:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <malloc_error+0x40>)
 8001aa2:	4808      	ldr	r0, [pc, #32]	; (8001ac4 <malloc_error+0x44>)
 8001aa4:	f000 fffc 	bl	8002aa0 <siprintf>
	var_print(msg);
 8001aa8:	4806      	ldr	r0, [pc, #24]	; (8001ac4 <malloc_error+0x44>)
 8001aaa:	f000 fc4b 	bl	8002344 <var_print>
	loop();
 8001aae:	f000 fc47 	bl	8002340 <loop>
}
 8001ab2:	bf00      	nop
 8001ab4:	b007      	add	sp, #28
 8001ab6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001aba:	bf00      	nop
 8001abc:	200000e8 	.word	0x200000e8
 8001ac0:	08004c24 	.word	0x08004c24
 8001ac4:	20000900 	.word	0x20000900

08001ac8 <mem_init>:
/* 
 * mem_init - initialize the memory system model
 */
void mem_init(void)
{
	mem_start_brk = (char *)ALIGN((size_t)(&__malloc_sbrk_start));
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <mem_init+0x1c>)
 8001aca:	3307      	adds	r3, #7
 8001acc:	f023 0307 	bic.w	r3, r3, #7
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <mem_init+0x20>)
 8001ad4:	601a      	str	r2, [r3, #0]
    mem_brk = mem_start_brk;
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <mem_init+0x20>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <mem_init+0x24>)
 8001adc:	6013      	str	r3, [r2, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000d08 	.word	0x20000d08
 8001ae8:	200000f0 	.word	0x200000f0
 8001aec:	200000f4 	.word	0x200000f4

08001af0 <mem_sbrk>:
 * mem_sbrk - simple model of the sbrk function. Extends the heap 
 *    by incr bytes and returns the start address of the new area. In
 *    this model, the heap cannot be shrunk.
 */
void *mem_sbrk(int incr) 
{
 8001af0:	b530      	push	{r4, r5, lr}
 8001af2:	b091      	sub	sp, #68	; 0x44
 8001af4:	9001      	str	r0, [sp, #4]
    char *old_brk = mem_brk;
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <mem_sbrk+0x58>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	930f      	str	r3, [sp, #60]	; 0x3c
	register size_t * stack_top asm("sp");

    if ( (incr < 0) || ((mem_brk + incr) > (char *)(stack_top))) {
 8001afc:	9b01      	ldr	r3, [sp, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	db06      	blt.n	8001b10 <mem_sbrk+0x20>
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <mem_sbrk+0x58>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	9b01      	ldr	r3, [sp, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	466a      	mov	r2, sp
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d911      	bls.n	8001b34 <mem_sbrk+0x44>
		char output_str[] = "ERROR: mem_sbrk failed. Ran out of memory...\n";
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <mem_sbrk+0x5c>)
 8001b12:	ac03      	add	r4, sp, #12
 8001b14:	461d      	mov	r5, r3
 8001b16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b22:	c407      	stmia	r4!, {r0, r1, r2}
 8001b24:	8023      	strh	r3, [r4, #0]
		var_print(output_str);
 8001b26:	ab03      	add	r3, sp, #12
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 fc0b 	bl	8002344 <var_print>
		return (void *)-1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b32:	e006      	b.n	8001b42 <mem_sbrk+0x52>
    }
    mem_brk += incr;
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <mem_sbrk+0x58>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	9b01      	ldr	r3, [sp, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a02      	ldr	r2, [pc, #8]	; (8001b48 <mem_sbrk+0x58>)
 8001b3e:	6013      	str	r3, [r2, #0]
    return (void *)old_brk;
 8001b40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	b011      	add	sp, #68	; 0x44
 8001b46:	bd30      	pop	{r4, r5, pc}
 8001b48:	200000f4 	.word	0x200000f4
 8001b4c:	08004c44 	.word	0x08004c44

08001b50 <mem_heap_lo>:
/*
 * mem_heap_lo - return address of the first heap byte
 */
void *mem_heap_lo()
{
    return (void *)mem_start_brk;
 8001b50:	4b01      	ldr	r3, [pc, #4]	; (8001b58 <mem_heap_lo+0x8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	4770      	bx	lr
 8001b58:	200000f0 	.word	0x200000f0

08001b5c <mem_heap_hi>:
/* 
 * mem_heap_hi - return address of last heap byte
 */
void *mem_heap_hi()
{
    return (void *)(mem_brk - 1);
 8001b5c:	4b02      	ldr	r3, [pc, #8]	; (8001b68 <mem_heap_hi+0xc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3b01      	subs	r3, #1
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	200000f4 	.word	0x200000f4

08001b6c <mem_heapsize>:
/*
 * mem_heapsize() - returns the heap size in bytes
 */
size_t mem_heapsize() 
{
    return (size_t)(mem_brk - mem_start_brk);
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <mem_heapsize+0x10>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <mem_heapsize+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	1ad3      	subs	r3, r2, r3
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	200000f4 	.word	0x200000f4
 8001b80:	200000f0 	.word	0x200000f0

08001b84 <coalesce>:

// Pointer to prologue block
static void * heap_listp;

// Coalesce free blocks with adjacent free blocks, return pointer to coalesced free block
static void * coalesce(void * bp) {
 8001b84:	b086      	sub	sp, #24
 8001b86:	9001      	str	r0, [sp, #4]
	// Alloc bit of prev and next block
	size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));
 8001b88:	9b01      	ldr	r3, [sp, #4]
 8001b8a:	3b08      	subs	r3, #8
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 0207 	bic.w	r2, r3, #7
 8001b92:	f06f 0303 	mvn.w	r3, #3
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	9a01      	ldr	r2, [sp, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 0207 	bic.w	r2, r3, #7
 8001ba2:	9b01      	ldr	r3, [sp, #4]
 8001ba4:	3b08      	subs	r3, #8
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 0307 	bic.w	r3, r3, #7
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	3b08      	subs	r3, #8
 8001bb0:	9a01      	ldr	r2, [sp, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	9305      	str	r3, [sp, #20]
	size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
 8001bbc:	9b01      	ldr	r3, [sp, #4]
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 0307 	bic.w	r3, r3, #7
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	9a01      	ldr	r2, [sp, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	9304      	str	r3, [sp, #16]
	// Current block size
	size_t size = GET_SIZE(HDRP(bp));
 8001bd4:	9b01      	ldr	r3, [sp, #4]
 8001bd6:	3b04      	subs	r3, #4
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 0307 	bic.w	r3, r3, #7
 8001bde:	9303      	str	r3, [sp, #12]

	if (prev_alloc && next_alloc) {
 8001be0:	9b05      	ldr	r3, [sp, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <coalesce+0x6c>
 8001be6:	9b04      	ldr	r3, [sp, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <coalesce+0x6c>
		// Neither are free
		return bp;
 8001bec:	9b01      	ldr	r3, [sp, #4]
 8001bee:	e0a0      	b.n	8001d32 <coalesce+0x1ae>
	} else if (prev_alloc && !next_alloc) {
 8001bf0:	9b05      	ldr	r3, [sp, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d01f      	beq.n	8001c36 <coalesce+0xb2>
 8001bf6:	9b04      	ldr	r3, [sp, #16]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d11c      	bne.n	8001c36 <coalesce+0xb2>
		// Coalesce with next block
		size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
 8001bfc:	9b01      	ldr	r3, [sp, #4]
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 0307 	bic.w	r3, r3, #7
 8001c06:	3b04      	subs	r3, #4
 8001c08:	9a01      	ldr	r2, [sp, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 0307 	bic.w	r3, r3, #7
 8001c12:	9a03      	ldr	r2, [sp, #12]
 8001c14:	4413      	add	r3, r2
 8001c16:	9303      	str	r3, [sp, #12]
		PUT(HDRP(bp), PACK(size, 0));
 8001c18:	9b01      	ldr	r3, [sp, #4]
 8001c1a:	3b04      	subs	r3, #4
 8001c1c:	9a03      	ldr	r2, [sp, #12]
 8001c1e:	601a      	str	r2, [r3, #0]
		PUT(FTRP(bp), PACK(size, 0));
 8001c20:	9b01      	ldr	r3, [sp, #4]
 8001c22:	3b04      	subs	r3, #4
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 0307 	bic.w	r3, r3, #7
 8001c2a:	3b08      	subs	r3, #8
 8001c2c:	9a01      	ldr	r2, [sp, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	9a03      	ldr	r2, [sp, #12]
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	e07c      	b.n	8001d30 <coalesce+0x1ac>
	} else if (!prev_alloc && next_alloc) {
 8001c36:	9b05      	ldr	r3, [sp, #20]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d132      	bne.n	8001ca2 <coalesce+0x11e>
 8001c3c:	9b04      	ldr	r3, [sp, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d02f      	beq.n	8001ca2 <coalesce+0x11e>
		// Coalesce with previous block
		size += GET_SIZE(HDRP(PREV_BLKP(bp)));
 8001c42:	9b01      	ldr	r3, [sp, #4]
 8001c44:	3b08      	subs	r3, #8
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 0207 	bic.w	r2, r3, #7
 8001c4c:	f06f 0303 	mvn.w	r3, #3
 8001c50:	1a9b      	subs	r3, r3, r2
 8001c52:	9a01      	ldr	r2, [sp, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 0307 	bic.w	r3, r3, #7
 8001c5c:	9a03      	ldr	r2, [sp, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	9303      	str	r3, [sp, #12]
		PUT(FTRP(bp), PACK(size, 0));
 8001c62:	9b01      	ldr	r3, [sp, #4]
 8001c64:	3b04      	subs	r3, #4
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f023 0307 	bic.w	r3, r3, #7
 8001c6c:	3b08      	subs	r3, #8
 8001c6e:	9a01      	ldr	r2, [sp, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	9a03      	ldr	r2, [sp, #12]
 8001c74:	601a      	str	r2, [r3, #0]
		PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
 8001c76:	9b01      	ldr	r3, [sp, #4]
 8001c78:	3b08      	subs	r3, #8
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 0207 	bic.w	r2, r3, #7
 8001c80:	f06f 0303 	mvn.w	r3, #3
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	9a01      	ldr	r2, [sp, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	9a03      	ldr	r2, [sp, #12]
 8001c8c:	601a      	str	r2, [r3, #0]
		bp = PREV_BLKP(bp);
 8001c8e:	9b01      	ldr	r3, [sp, #4]
 8001c90:	3b08      	subs	r3, #8
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f023 0307 	bic.w	r3, r3, #7
 8001c98:	425b      	negs	r3, r3
 8001c9a:	9a01      	ldr	r2, [sp, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	e046      	b.n	8001d30 <coalesce+0x1ac>
	} else {
		// Both blocks are free
		size += GET_SIZE(HDRP(NEXT_BLKP(bp))) + GET_SIZE(HDRP(PREV_BLKP(bp)));
 8001ca2:	9b01      	ldr	r3, [sp, #4]
 8001ca4:	3b04      	subs	r3, #4
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f023 0307 	bic.w	r3, r3, #7
 8001cac:	3b04      	subs	r3, #4
 8001cae:	9a01      	ldr	r2, [sp, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 0207 	bic.w	r2, r3, #7
 8001cb8:	9b01      	ldr	r3, [sp, #4]
 8001cba:	3b08      	subs	r3, #8
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 0107 	bic.w	r1, r3, #7
 8001cc2:	f06f 0303 	mvn.w	r3, #3
 8001cc6:	1a5b      	subs	r3, r3, r1
 8001cc8:	9901      	ldr	r1, [sp, #4]
 8001cca:	440b      	add	r3, r1
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 0307 	bic.w	r3, r3, #7
 8001cd2:	4413      	add	r3, r2
 8001cd4:	9a03      	ldr	r2, [sp, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	9303      	str	r3, [sp, #12]
		PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
 8001cda:	9b01      	ldr	r3, [sp, #4]
 8001cdc:	3b08      	subs	r3, #8
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f023 0207 	bic.w	r2, r3, #7
 8001ce4:	f06f 0303 	mvn.w	r3, #3
 8001ce8:	1a9b      	subs	r3, r3, r2
 8001cea:	9a01      	ldr	r2, [sp, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	9a03      	ldr	r2, [sp, #12]
 8001cf0:	601a      	str	r2, [r3, #0]
		PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));
 8001cf2:	9b01      	ldr	r3, [sp, #4]
 8001cf4:	3b04      	subs	r3, #4
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 0207 	bic.w	r2, r3, #7
 8001cfc:	9b01      	ldr	r3, [sp, #4]
 8001cfe:	3b04      	subs	r3, #4
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 0307 	bic.w	r3, r3, #7
 8001d06:	3b04      	subs	r3, #4
 8001d08:	9901      	ldr	r1, [sp, #4]
 8001d0a:	440b      	add	r3, r1
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 0307 	bic.w	r3, r3, #7
 8001d12:	4413      	add	r3, r2
 8001d14:	3b08      	subs	r3, #8
 8001d16:	9a01      	ldr	r2, [sp, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	9a03      	ldr	r2, [sp, #12]
 8001d1c:	601a      	str	r2, [r3, #0]
		bp = PREV_BLKP(bp);
 8001d1e:	9b01      	ldr	r3, [sp, #4]
 8001d20:	3b08      	subs	r3, #8
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f023 0307 	bic.w	r3, r3, #7
 8001d28:	425b      	negs	r3, r3
 8001d2a:	9a01      	ldr	r2, [sp, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	9301      	str	r3, [sp, #4]
	}
	return bp;
 8001d30:	9b01      	ldr	r3, [sp, #4]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	b006      	add	sp, #24
 8001d36:	4770      	bx	lr

08001d38 <extend_heap>:

// Extend heap by 1 chunk
static void * extend_heap(size_t words) {
 8001d38:	b500      	push	{lr}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	9001      	str	r0, [sp, #4]
	char * bp;
	size_t size;

	size = (words % 2) ? (words+1) * WSIZE : words * WSIZE; // Maintain double word alignment
 8001d3e:	9b01      	ldr	r3, [sp, #4]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <extend_heap+0x18>
 8001d48:	9b01      	ldr	r3, [sp, #4]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	e001      	b.n	8001d54 <extend_heap+0x1c>
 8001d50:	9b01      	ldr	r3, [sp, #4]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	9303      	str	r3, [sp, #12]
	if ((long)(bp = mem_sbrk(size)) == -1) {
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fec9 	bl	8001af0 <mem_sbrk>
 8001d5e:	9002      	str	r0, [sp, #8]
 8001d60:	9b02      	ldr	r3, [sp, #8]
 8001d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d66:	d101      	bne.n	8001d6c <extend_heap+0x34>
		return NULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	e01b      	b.n	8001da4 <extend_heap+0x6c>
	}

	// Free block header and footer
	PUT(HDRP(bp), PACK(size, 0));
 8001d6c:	9b02      	ldr	r3, [sp, #8]
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	9a03      	ldr	r2, [sp, #12]
 8001d72:	601a      	str	r2, [r3, #0]
	PUT(FTRP(bp), PACK(size, 0));
 8001d74:	9b02      	ldr	r3, [sp, #8]
 8001d76:	3b04      	subs	r3, #4
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0307 	bic.w	r3, r3, #7
 8001d7e:	3b08      	subs	r3, #8
 8001d80:	9a02      	ldr	r2, [sp, #8]
 8001d82:	4413      	add	r3, r2
 8001d84:	9a03      	ldr	r2, [sp, #12]
 8001d86:	601a      	str	r2, [r3, #0]
	// New epilogue header
	PUT(HDRP(NEXT_BLKP(bp)), PACK(0,1));
 8001d88:	9b02      	ldr	r3, [sp, #8]
 8001d8a:	3b04      	subs	r3, #4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 0307 	bic.w	r3, r3, #7
 8001d92:	3b04      	subs	r3, #4
 8001d94:	9a02      	ldr	r2, [sp, #8]
 8001d96:	4413      	add	r3, r2
 8001d98:	2201      	movs	r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

	// Coalesce previous block
	return coalesce(bp);
 8001d9c:	9802      	ldr	r0, [sp, #8]
 8001d9e:	f7ff fef1 	bl	8001b84 <coalesce>
 8001da2:	4603      	mov	r3, r0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	b005      	add	sp, #20
 8001da8:	f85d fb04 	ldr.w	pc, [sp], #4

08001dac <first_fit>:

// Inline to avoid unused warnings
// First fit search for implicit free list, return pointer to payload section, NULL if no fit found
static inline void *first_fit(size_t asize) {
 8001dac:	b084      	sub	sp, #16
 8001dae:	9001      	str	r0, [sp, #4]
	void * cur_search = heap_listp;
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <first_fit+0x50>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	9303      	str	r3, [sp, #12]
	// Repeat until epilogue block is reached
	while ((GET_SIZE(HDRP(cur_search))!=0)) {
 8001db6:	e018      	b.n	8001dea <first_fit+0x3e>
		if ((GET_ALLOC(HDRP(cur_search))==0) && (GET_SIZE(HDRP(cur_search)) >= asize)) {
 8001db8:	9b03      	ldr	r3, [sp, #12]
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <first_fit+0x2e>
 8001dc6:	9b03      	ldr	r3, [sp, #12]
 8001dc8:	3b04      	subs	r3, #4
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 0307 	bic.w	r3, r3, #7
 8001dd0:	9a01      	ldr	r2, [sp, #4]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d801      	bhi.n	8001dda <first_fit+0x2e>
			return cur_search;
 8001dd6:	9b03      	ldr	r3, [sp, #12]
 8001dd8:	e00d      	b.n	8001df6 <first_fit+0x4a>
		} else {
			cur_search = NEXT_BLKP(cur_search);
 8001dda:	9b03      	ldr	r3, [sp, #12]
 8001ddc:	3b04      	subs	r3, #4
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 0307 	bic.w	r3, r3, #7
 8001de4:	9a03      	ldr	r2, [sp, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	9303      	str	r3, [sp, #12]
	while ((GET_SIZE(HDRP(cur_search))!=0)) {
 8001dea:	9b03      	ldr	r3, [sp, #12]
 8001dec:	3b04      	subs	r3, #4
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b07      	cmp	r3, #7
 8001df2:	d8e1      	bhi.n	8001db8 <first_fit+0xc>
		}
	}
	return NULL;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	b004      	add	sp, #16
 8001dfa:	4770      	bx	lr
 8001dfc:	200000f8 	.word	0x200000f8

08001e00 <find_fit>:
	}
	return best_result;
}

// Place fit algorithm here
static void * find_fit(size_t asize) {
 8001e00:	b500      	push	{lr}
 8001e02:	b083      	sub	sp, #12
 8001e04:	9001      	str	r0, [sp, #4]
	return first_fit(asize);
 8001e06:	9801      	ldr	r0, [sp, #4]
 8001e08:	f7ff ffd0 	bl	8001dac <first_fit>
 8001e0c:	4603      	mov	r3, r0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	b003      	add	sp, #12
 8001e12:	f85d fb04 	ldr.w	pc, [sp], #4

08001e16 <place>:

// Put an asize allocated block at bp
static void place(void * bp, size_t asize) {
 8001e16:	b086      	sub	sp, #24
 8001e18:	9001      	str	r0, [sp, #4]
 8001e1a:	9100      	str	r1, [sp, #0]
	size_t original_size = GET_SIZE(HDRP(bp));
 8001e1c:	9b01      	ldr	r3, [sp, #4]
 8001e1e:	3b04      	subs	r3, #4
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 0307 	bic.w	r3, r3, #7
 8001e26:	9305      	str	r3, [sp, #20]
	size_t free_size;
	void * free_p;
	// Check if there is free block leftover 
	if (original_size >= (asize + DSIZE)) {
 8001e28:	9b00      	ldr	r3, [sp, #0]
 8001e2a:	3308      	adds	r3, #8
 8001e2c:	9a05      	ldr	r2, [sp, #20]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d328      	bcc.n	8001e84 <place+0x6e>
		// Split block into allocated and free blocks
		free_size = original_size-asize;
 8001e32:	9a05      	ldr	r2, [sp, #20]
 8001e34:	9b00      	ldr	r3, [sp, #0]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	9304      	str	r3, [sp, #16]
		// Header and footer of free block
		free_p = (char *)(bp) + asize;
 8001e3a:	9a01      	ldr	r2, [sp, #4]
 8001e3c:	9b00      	ldr	r3, [sp, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	9303      	str	r3, [sp, #12]
		PUT(HDRP(free_p), PACK(free_size, 0));
 8001e42:	9b03      	ldr	r3, [sp, #12]
 8001e44:	3b04      	subs	r3, #4
 8001e46:	9a04      	ldr	r2, [sp, #16]
 8001e48:	601a      	str	r2, [r3, #0]
		PUT(FTRP(free_p), PACK(free_size, 0));
 8001e4a:	9b03      	ldr	r3, [sp, #12]
 8001e4c:	3b04      	subs	r3, #4
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f023 0307 	bic.w	r3, r3, #7
 8001e54:	3b08      	subs	r3, #8
 8001e56:	9a03      	ldr	r2, [sp, #12]
 8001e58:	4413      	add	r3, r2
 8001e5a:	9a04      	ldr	r2, [sp, #16]
 8001e5c:	601a      	str	r2, [r3, #0]
		// Header and footer of allocated block
		PUT(HDRP(bp), PACK(asize, 1));
 8001e5e:	9b01      	ldr	r3, [sp, #4]
 8001e60:	3b04      	subs	r3, #4
 8001e62:	9a00      	ldr	r2, [sp, #0]
 8001e64:	f042 0201 	orr.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
		PUT(FTRP(bp), PACK(asize, 1));
 8001e6a:	9b01      	ldr	r3, [sp, #4]
 8001e6c:	3b04      	subs	r3, #4
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f023 0307 	bic.w	r3, r3, #7
 8001e74:	3b08      	subs	r3, #8
 8001e76:	9a01      	ldr	r2, [sp, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	9a00      	ldr	r2, [sp, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
	} else {
		// Allocate entire block
		PUT(HDRP(bp), PACK(original_size, 1));
		PUT(FTRP(bp), PACK(original_size, 1));
	}
}
 8001e82:	e011      	b.n	8001ea8 <place+0x92>
		PUT(HDRP(bp), PACK(original_size, 1));
 8001e84:	9b01      	ldr	r3, [sp, #4]
 8001e86:	3b04      	subs	r3, #4
 8001e88:	9a05      	ldr	r2, [sp, #20]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
		PUT(FTRP(bp), PACK(original_size, 1));
 8001e90:	9b01      	ldr	r3, [sp, #4]
 8001e92:	3b04      	subs	r3, #4
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 0307 	bic.w	r3, r3, #7
 8001e9a:	3b08      	subs	r3, #8
 8001e9c:	9a01      	ldr	r2, [sp, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	9a05      	ldr	r2, [sp, #20]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	b006      	add	sp, #24
 8001eac:	4770      	bx	lr

08001eae <shrink_blk>:

// Shrink current block
static void shrink_blk(void * bp, size_t asize) {
 8001eae:	b500      	push	{lr}
 8001eb0:	b087      	sub	sp, #28
 8001eb2:	9001      	str	r0, [sp, #4]
 8001eb4:	9100      	str	r1, [sp, #0]
	size_t original_size = GET_SIZE(HDRP(bp));
 8001eb6:	9b01      	ldr	r3, [sp, #4]
 8001eb8:	3b04      	subs	r3, #4
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 0307 	bic.w	r3, r3, #7
 8001ec0:	9305      	str	r3, [sp, #20]
	size_t free_size;
	void * free_p;
	// Check if there is free block leftover 
	if (original_size > (asize + DSIZE)) {
 8001ec2:	9b00      	ldr	r3, [sp, #0]
 8001ec4:	3308      	adds	r3, #8
 8001ec6:	9a05      	ldr	r2, [sp, #20]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d92a      	bls.n	8001f22 <shrink_blk+0x74>
		// Split block into allocated and free blocks
		free_size = original_size-asize;
 8001ecc:	9a05      	ldr	r2, [sp, #20]
 8001ece:	9b00      	ldr	r3, [sp, #0]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	9304      	str	r3, [sp, #16]
		// Header and footer of free block
		free_p = (char *)(bp) + asize;
 8001ed4:	9a01      	ldr	r2, [sp, #4]
 8001ed6:	9b00      	ldr	r3, [sp, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	9303      	str	r3, [sp, #12]
		PUT(HDRP(free_p), PACK(free_size, 0));
 8001edc:	9b03      	ldr	r3, [sp, #12]
 8001ede:	3b04      	subs	r3, #4
 8001ee0:	9a04      	ldr	r2, [sp, #16]
 8001ee2:	601a      	str	r2, [r3, #0]
		PUT(FTRP(bp), PACK(free_size, 0));
 8001ee4:	9b01      	ldr	r3, [sp, #4]
 8001ee6:	3b04      	subs	r3, #4
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 0307 	bic.w	r3, r3, #7
 8001eee:	3b08      	subs	r3, #8
 8001ef0:	9a01      	ldr	r2, [sp, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	9a04      	ldr	r2, [sp, #16]
 8001ef6:	601a      	str	r2, [r3, #0]
		// Header and footer of allocated block
		PUT(HDRP(bp), PACK(asize, 1));
 8001ef8:	9b01      	ldr	r3, [sp, #4]
 8001efa:	3b04      	subs	r3, #4
 8001efc:	9a00      	ldr	r2, [sp, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
		PUT(FTRP(bp), PACK(asize, 1));
 8001f04:	9b01      	ldr	r3, [sp, #4]
 8001f06:	3b04      	subs	r3, #4
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 0307 	bic.w	r3, r3, #7
 8001f0e:	3b08      	subs	r3, #8
 8001f10:	9a01      	ldr	r2, [sp, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	9a00      	ldr	r2, [sp, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
		coalesce(free_p);
 8001f1c:	9803      	ldr	r0, [sp, #12]
 8001f1e:	f7ff fe31 	bl	8001b84 <coalesce>
	}
	// No change needed otherwise
}
 8001f22:	bf00      	nop
 8001f24:	b007      	add	sp, #28
 8001f26:	f85d fb04 	ldr.w	pc, [sp], #4

08001f2a <extend_blk>:

// Extend current block
static void extend_blk(void * bp, size_t asize) {
 8001f2a:	b500      	push	{lr}
 8001f2c:	b087      	sub	sp, #28
 8001f2e:	9001      	str	r0, [sp, #4]
 8001f30:	9100      	str	r1, [sp, #0]
	size_t combined_size = GET_SIZE(HDRP(bp)) + GET_SIZE(HDRP(NEXT_BLKP(bp)));
 8001f32:	9b01      	ldr	r3, [sp, #4]
 8001f34:	3b04      	subs	r3, #4
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 0207 	bic.w	r2, r3, #7
 8001f3c:	9b01      	ldr	r3, [sp, #4]
 8001f3e:	3b04      	subs	r3, #4
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 0307 	bic.w	r3, r3, #7
 8001f46:	3b04      	subs	r3, #4
 8001f48:	9901      	ldr	r1, [sp, #4]
 8001f4a:	440b      	add	r3, r1
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 0307 	bic.w	r3, r3, #7
 8001f52:	4413      	add	r3, r2
 8001f54:	9305      	str	r3, [sp, #20]
	size_t free_size;
	void * free_p;
	// Check if there is free block leftover 
	if (combined_size > (asize + DSIZE)) {
 8001f56:	9b00      	ldr	r3, [sp, #0]
 8001f58:	3308      	adds	r3, #8
 8001f5a:	9a05      	ldr	r2, [sp, #20]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d92b      	bls.n	8001fb8 <extend_blk+0x8e>
		free_size = combined_size-asize;
 8001f60:	9a05      	ldr	r2, [sp, #20]
 8001f62:	9b00      	ldr	r3, [sp, #0]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	9304      	str	r3, [sp, #16]
		// Header and footer of remaining free block
		free_p = (char *)(bp) + asize;
 8001f68:	9a01      	ldr	r2, [sp, #4]
 8001f6a:	9b00      	ldr	r3, [sp, #0]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	9303      	str	r3, [sp, #12]
		PUT(HDRP(free_p), PACK(free_size, 0));
 8001f70:	9b03      	ldr	r3, [sp, #12]
 8001f72:	3b04      	subs	r3, #4
 8001f74:	9a04      	ldr	r2, [sp, #16]
 8001f76:	601a      	str	r2, [r3, #0]
		PUT(FTRP(free_p), PACK(free_size, 0));
 8001f78:	9b03      	ldr	r3, [sp, #12]
 8001f7a:	3b04      	subs	r3, #4
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 0307 	bic.w	r3, r3, #7
 8001f82:	3b08      	subs	r3, #8
 8001f84:	9a03      	ldr	r2, [sp, #12]
 8001f86:	4413      	add	r3, r2
 8001f88:	9a04      	ldr	r2, [sp, #16]
 8001f8a:	601a      	str	r2, [r3, #0]
		// Header and footer of new allocated block
		PUT(HDRP(bp), PACK(asize, 1));
 8001f8c:	9b01      	ldr	r3, [sp, #4]
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	9a00      	ldr	r2, [sp, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
		PUT(FTRP(bp), PACK(asize, 1));
 8001f98:	9b01      	ldr	r3, [sp, #4]
 8001f9a:	3b04      	subs	r3, #4
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 0307 	bic.w	r3, r3, #7
 8001fa2:	3b08      	subs	r3, #8
 8001fa4:	9a01      	ldr	r2, [sp, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	9a00      	ldr	r2, [sp, #0]
 8001faa:	f042 0201 	orr.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
		coalesce(free_p);
 8001fb0:	9803      	ldr	r0, [sp, #12]
 8001fb2:	f7ff fde7 	bl	8001b84 <coalesce>
	} else {
		// Use whole block
		PUT(HDRP(bp), PACK(combined_size, 1));
		PUT(FTRP(bp), PACK(combined_size, 1));
	}
}
 8001fb6:	e011      	b.n	8001fdc <extend_blk+0xb2>
		PUT(HDRP(bp), PACK(combined_size, 1));
 8001fb8:	9b01      	ldr	r3, [sp, #4]
 8001fba:	3b04      	subs	r3, #4
 8001fbc:	9a05      	ldr	r2, [sp, #20]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
		PUT(FTRP(bp), PACK(combined_size, 1));
 8001fc4:	9b01      	ldr	r3, [sp, #4]
 8001fc6:	3b04      	subs	r3, #4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 0307 	bic.w	r3, r3, #7
 8001fce:	3b08      	subs	r3, #8
 8001fd0:	9a01      	ldr	r2, [sp, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	9a05      	ldr	r2, [sp, #20]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	b007      	add	sp, #28
 8001fe0:	f85d fb04 	ldr.w	pc, [sp], #4

08001fe4 <mm_init>:

int mm_init(void)
{
 8001fe4:	b508      	push	{r3, lr}
	// Allocate initial heap
	if ((heap_listp = mem_sbrk(4*WSIZE)) == (void *)-1) {
 8001fe6:	2010      	movs	r0, #16
 8001fe8:	f7ff fd82 	bl	8001af0 <mem_sbrk>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a17      	ldr	r2, [pc, #92]	; (800204c <mm_init+0x68>)
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <mm_init+0x68>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ffa:	d102      	bne.n	8002002 <mm_init+0x1e>
		return -1;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002000:	e022      	b.n	8002048 <mm_init+0x64>
	}
	PUT(heap_listp, 0); //Padding
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <mm_init+0x68>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
	// Prologue header and footer
	PUT(heap_listp + WSIZE, PACK(DSIZE, 1));
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <mm_init+0x68>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3304      	adds	r3, #4
 8002010:	2209      	movs	r2, #9
 8002012:	601a      	str	r2, [r3, #0]
	PUT(heap_listp + WSIZE*2, PACK(DSIZE, 1));
 8002014:	4b0d      	ldr	r3, [pc, #52]	; (800204c <mm_init+0x68>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3308      	adds	r3, #8
 800201a:	2209      	movs	r2, #9
 800201c:	601a      	str	r2, [r3, #0]
	// Epilogue header
	PUT(heap_listp + WSIZE*3, PACK(0, 1));
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <mm_init+0x68>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	330c      	adds	r3, #12
 8002024:	2201      	movs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]
	heap_listp += 2*WSIZE;
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <mm_init+0x68>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3308      	adds	r3, #8
 800202e:	4a07      	ldr	r2, [pc, #28]	; (800204c <mm_init+0x68>)
 8002030:	6013      	str	r3, [r2, #0]

	// Extend heap by a chunk
	if (extend_heap(CHUNKSIZE/WSIZE) == NULL){
 8002032:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002036:	f7ff fe7f 	bl	8001d38 <extend_heap>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <mm_init+0x62>
		return -1;
 8002040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002044:	e000      	b.n	8002048 <mm_init+0x64>
	}

    return 0;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd08      	pop	{r3, pc}
 800204c:	200000f8 	.word	0x200000f8

08002050 <mm_malloc>:

void *mm_malloc(size_t size)
{
 8002050:	b500      	push	{lr}
 8002052:	b087      	sub	sp, #28
 8002054:	9001      	str	r0, [sp, #4]
	size_t asize; // Adjusted block size
	size_t extendsize; // Amount to extend heap by
	char * bp;

	// Ignore 0 size
	if (size == 0) {
 8002056:	9b01      	ldr	r3, [sp, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <mm_malloc+0x10>
		return NULL;
 800205c:	2300      	movs	r3, #0
 800205e:	e02e      	b.n	80020be <mm_malloc+0x6e>
	}

	// Add overhead and alignment to block size
	if (size <= DSIZE) {
 8002060:	9b01      	ldr	r3, [sp, #4]
 8002062:	2b08      	cmp	r3, #8
 8002064:	d802      	bhi.n	800206c <mm_malloc+0x1c>
		asize = 2*DSIZE;
 8002066:	2310      	movs	r3, #16
 8002068:	9305      	str	r3, [sp, #20]
 800206a:	e004      	b.n	8002076 <mm_malloc+0x26>
	} else {
		asize = DSIZE * ((size + (DSIZE) + (DSIZE-1))/DSIZE); // Add overhead and make rounding floor
 800206c:	9b01      	ldr	r3, [sp, #4]
 800206e:	330f      	adds	r3, #15
 8002070:	f023 0307 	bic.w	r3, r3, #7
 8002074:	9305      	str	r3, [sp, #20]
	}

	// Search free block for fit
	if ((bp = find_fit(asize)) != NULL) {
 8002076:	9805      	ldr	r0, [sp, #20]
 8002078:	f7ff fec2 	bl	8001e00 <find_fit>
 800207c:	9004      	str	r0, [sp, #16]
 800207e:	9b04      	ldr	r3, [sp, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <mm_malloc+0x40>
		place(bp, asize);
 8002084:	9905      	ldr	r1, [sp, #20]
 8002086:	9804      	ldr	r0, [sp, #16]
 8002088:	f7ff fec5 	bl	8001e16 <place>
		return bp;
 800208c:	9b04      	ldr	r3, [sp, #16]
 800208e:	e016      	b.n	80020be <mm_malloc+0x6e>
	}

	// Need to extend heap
	extendsize = MAX(asize, CHUNKSIZE);
 8002090:	9b05      	ldr	r3, [sp, #20]
 8002092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002096:	bf38      	it	cc
 8002098:	f44f 5380 	movcc.w	r3, #4096	; 0x1000
 800209c:	9303      	str	r3, [sp, #12]
	if ((bp = extend_heap(extendsize/WSIZE)) == NULL) {
 800209e:	9b03      	ldr	r3, [sp, #12]
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fe48 	bl	8001d38 <extend_heap>
 80020a8:	9004      	str	r0, [sp, #16]
 80020aa:	9b04      	ldr	r3, [sp, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <mm_malloc+0x64>
		// Not enough memory
		return NULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e004      	b.n	80020be <mm_malloc+0x6e>
	}
	place(bp, asize);
 80020b4:	9905      	ldr	r1, [sp, #20]
 80020b6:	9804      	ldr	r0, [sp, #16]
 80020b8:	f7ff fead 	bl	8001e16 <place>
	return bp;
 80020bc:	9b04      	ldr	r3, [sp, #16]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	b007      	add	sp, #28
 80020c2:	f85d fb04 	ldr.w	pc, [sp], #4

080020c6 <mm_free>:

void mm_free(void *ptr)
{
 80020c6:	b500      	push	{lr}
 80020c8:	b085      	sub	sp, #20
 80020ca:	9001      	str	r0, [sp, #4]
	size_t size = GET_SIZE(HDRP(ptr));
 80020cc:	9b01      	ldr	r3, [sp, #4]
 80020ce:	3b04      	subs	r3, #4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 0307 	bic.w	r3, r3, #7
 80020d6:	9303      	str	r3, [sp, #12]
	
	// Set header and footer to free
	PUT(HDRP(ptr), PACK(size, 0));
 80020d8:	9b01      	ldr	r3, [sp, #4]
 80020da:	3b04      	subs	r3, #4
 80020dc:	9a03      	ldr	r2, [sp, #12]
 80020de:	601a      	str	r2, [r3, #0]
	PUT(FTRP(ptr), PACK(size, 0));
 80020e0:	9b01      	ldr	r3, [sp, #4]
 80020e2:	3b04      	subs	r3, #4
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 0307 	bic.w	r3, r3, #7
 80020ea:	3b08      	subs	r3, #8
 80020ec:	9a01      	ldr	r2, [sp, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	9a03      	ldr	r2, [sp, #12]
 80020f2:	601a      	str	r2, [r3, #0]
	coalesce(ptr);
 80020f4:	9801      	ldr	r0, [sp, #4]
 80020f6:	f7ff fd45 	bl	8001b84 <coalesce>
}
 80020fa:	bf00      	nop
 80020fc:	b005      	add	sp, #20
 80020fe:	f85d fb04 	ldr.w	pc, [sp], #4

08002102 <mm_realloc>:

void *mm_realloc(void *ptr, size_t size)
{
 8002102:	b500      	push	{lr}
 8002104:	b089      	sub	sp, #36	; 0x24
 8002106:	9001      	str	r0, [sp, #4]
 8002108:	9100      	str	r1, [sp, #0]
    void *oldptr = ptr;
 800210a:	9b01      	ldr	r3, [sp, #4]
 800210c:	9306      	str	r3, [sp, #24]
	size_t asize;
	size_t next_size;
	size_t next_alloc;

	// Special cases
	if (ptr == NULL) {
 800210e:	9b01      	ldr	r3, [sp, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d105      	bne.n	8002120 <mm_realloc+0x1e>
		newptr = mm_malloc(size);
 8002114:	9800      	ldr	r0, [sp, #0]
 8002116:	f7ff ff9b 	bl	8002050 <mm_malloc>
 800211a:	9002      	str	r0, [sp, #8]
		return newptr;
 800211c:	9b02      	ldr	r3, [sp, #8]
 800211e:	e061      	b.n	80021e4 <mm_realloc+0xe2>
	}
	if (size == 0) {
 8002120:	9b00      	ldr	r3, [sp, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d104      	bne.n	8002130 <mm_realloc+0x2e>
		mm_free(ptr);
 8002126:	9801      	ldr	r0, [sp, #4]
 8002128:	f7ff ffcd 	bl	80020c6 <mm_free>
		return ptr;
 800212c:	9b01      	ldr	r3, [sp, #4]
 800212e:	e059      	b.n	80021e4 <mm_realloc+0xe2>
	}

	blk_size = GET_SIZE(HDRP(oldptr));
 8002130:	9b06      	ldr	r3, [sp, #24]
 8002132:	3b04      	subs	r3, #4
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 0307 	bic.w	r3, r3, #7
 800213a:	9305      	str	r3, [sp, #20]

	// Add overhead and alignment to block size
	if (size <= DSIZE) {
 800213c:	9b00      	ldr	r3, [sp, #0]
 800213e:	2b08      	cmp	r3, #8
 8002140:	d802      	bhi.n	8002148 <mm_realloc+0x46>
		asize = 2*DSIZE;
 8002142:	2310      	movs	r3, #16
 8002144:	9307      	str	r3, [sp, #28]
 8002146:	e004      	b.n	8002152 <mm_realloc+0x50>
	} else {
		asize = DSIZE * ((size + (DSIZE) + (DSIZE-1))/DSIZE); // Add overhead and make rounding floor
 8002148:	9b00      	ldr	r3, [sp, #0]
 800214a:	330f      	adds	r3, #15
 800214c:	f023 0307 	bic.w	r3, r3, #7
 8002150:	9307      	str	r3, [sp, #28]
	}

	if (blk_size < asize) {
 8002152:	9a05      	ldr	r2, [sp, #20]
 8002154:	9b07      	ldr	r3, [sp, #28]
 8002156:	429a      	cmp	r2, r3
 8002158:	d239      	bcs.n	80021ce <mm_realloc+0xcc>
		next_size = GET_SIZE(HDRP(NEXT_BLKP(oldptr)));
 800215a:	9b06      	ldr	r3, [sp, #24]
 800215c:	3b04      	subs	r3, #4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 0307 	bic.w	r3, r3, #7
 8002164:	3b04      	subs	r3, #4
 8002166:	9a06      	ldr	r2, [sp, #24]
 8002168:	4413      	add	r3, r2
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f023 0307 	bic.w	r3, r3, #7
 8002170:	9304      	str	r3, [sp, #16]
		next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(oldptr)));
 8002172:	9b06      	ldr	r3, [sp, #24]
 8002174:	3b04      	subs	r3, #4
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 0307 	bic.w	r3, r3, #7
 800217c:	3b04      	subs	r3, #4
 800217e:	9a06      	ldr	r2, [sp, #24]
 8002180:	4413      	add	r3, r2
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	9303      	str	r3, [sp, #12]
		if ((next_alloc == 0) && ((next_size + blk_size) >= asize)) {
 800218a:	9b03      	ldr	r3, [sp, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10b      	bne.n	80021a8 <mm_realloc+0xa6>
 8002190:	9a04      	ldr	r2, [sp, #16]
 8002192:	9b05      	ldr	r3, [sp, #20]
 8002194:	4413      	add	r3, r2
 8002196:	9a07      	ldr	r2, [sp, #28]
 8002198:	429a      	cmp	r2, r3
 800219a:	d805      	bhi.n	80021a8 <mm_realloc+0xa6>
			// Can combine with next free block
			extend_blk(oldptr, asize);
 800219c:	9907      	ldr	r1, [sp, #28]
 800219e:	9806      	ldr	r0, [sp, #24]
 80021a0:	f7ff fec3 	bl	8001f2a <extend_blk>
			return oldptr;
 80021a4:	9b06      	ldr	r3, [sp, #24]
 80021a6:	e01d      	b.n	80021e4 <mm_realloc+0xe2>
		} else {
			// Need to malloc new block
			newptr = mm_malloc(size);
 80021a8:	9800      	ldr	r0, [sp, #0]
 80021aa:	f7ff ff51 	bl	8002050 <mm_malloc>
 80021ae:	9002      	str	r0, [sp, #8]
			if (newptr == NULL)
 80021b0:	9b02      	ldr	r3, [sp, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <mm_realloc+0xb8>
			  return NULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e014      	b.n	80021e4 <mm_realloc+0xe2>
			memcpy(newptr, oldptr, size);
 80021ba:	9a00      	ldr	r2, [sp, #0]
 80021bc:	9906      	ldr	r1, [sp, #24]
 80021be:	9802      	ldr	r0, [sp, #8]
 80021c0:	f000 fa5c 	bl	800267c <memcpy>
			mm_free(oldptr);
 80021c4:	9806      	ldr	r0, [sp, #24]
 80021c6:	f7ff ff7e 	bl	80020c6 <mm_free>
			return newptr;
 80021ca:	9b02      	ldr	r3, [sp, #8]
 80021cc:	e00a      	b.n	80021e4 <mm_realloc+0xe2>
		}
	} else if (blk_size > asize) {
 80021ce:	9a05      	ldr	r2, [sp, #20]
 80021d0:	9b07      	ldr	r3, [sp, #28]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d905      	bls.n	80021e2 <mm_realloc+0xe0>
		// Need to shrink block
		shrink_blk(oldptr, asize);
 80021d6:	9907      	ldr	r1, [sp, #28]
 80021d8:	9806      	ldr	r0, [sp, #24]
 80021da:	f7ff fe68 	bl	8001eae <shrink_blk>
		return oldptr;
 80021de:	9b06      	ldr	r3, [sp, #24]
 80021e0:	e000      	b.n	80021e4 <mm_realloc+0xe2>
	} else {
		// Do nothing
		return ptr;
 80021e2:	9b01      	ldr	r3, [sp, #4]
	}
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	b009      	add	sp, #36	; 0x24
 80021e8:	f85d fb04 	ldr.w	pc, [sp], #4

080021ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ec:	b082      	sub	sp, #8
 80021ee:	4603      	mov	r3, r0
 80021f0:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f4:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db0c      	blt.n	8002216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	4905      	ldr	r1, [pc, #20]	; (800221c <__NVIC_EnableIRQ+0x30>)
 8002206:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2001      	movs	r0, #1
 800220e:	fa00 f202 	lsl.w	r2, r0, r2
 8002212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002216:	bf00      	nop
 8002218:	b002      	add	sp, #8
 800221a:	4770      	bx	lr
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002220:	b082      	sub	sp, #8
 8002222:	4603      	mov	r3, r0
 8002224:	9100      	str	r1, [sp, #0]
 8002226:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 800222a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800222e:	2b00      	cmp	r3, #0
 8002230:	db0a      	blt.n	8002248 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002232:	9b00      	ldr	r3, [sp, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	490c      	ldr	r1, [pc, #48]	; (8002268 <__NVIC_SetPriority+0x48>)
 8002238:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800223c:	0112      	lsls	r2, r2, #4
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	440b      	add	r3, r1
 8002242:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002246:	e00b      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	9b00      	ldr	r3, [sp, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4907      	ldr	r1, [pc, #28]	; (800226c <__NVIC_SetPriority+0x4c>)
 800224e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	b002      	add	sp, #8
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <TIM2_IRQHandler>:

/*************************************************
* timer 2 interrupt handler
*************************************************/
void TIM2_IRQHandler(void)
{
 8002270:	b508      	push	{r3, lr}
	systime++;
 8002272:	4b16      	ldr	r3, [pc, #88]	; (80022cc <TIM2_IRQHandler+0x5c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	4a14      	ldr	r2, [pc, #80]	; (80022cc <TIM2_IRQHandler+0x5c>)
 800227a:	6013      	str	r3, [r2, #0]
	register size_t * stack_top asm("sp");

	// Stall if stack is overflowing to heap
	if (mem_heap_hi() > (void *)(stack_top)) {
 800227c:	f7ff fc6e 	bl	8001b5c <mem_heap_hi>
 8002280:	4602      	mov	r2, r0
 8002282:	466b      	mov	r3, sp
 8002284:	429a      	cmp	r2, r3
 8002286:	d908      	bls.n	800229a <TIM2_IRQHandler+0x2a>
		sprintf(msg, "Stack overflow detected");
 8002288:	4911      	ldr	r1, [pc, #68]	; (80022d0 <TIM2_IRQHandler+0x60>)
 800228a:	4812      	ldr	r0, [pc, #72]	; (80022d4 <TIM2_IRQHandler+0x64>)
 800228c:	f000 fc08 	bl	8002aa0 <siprintf>
		var_print(msg);
 8002290:	4810      	ldr	r0, [pc, #64]	; (80022d4 <TIM2_IRQHandler+0x64>)
 8002292:	f000 f857 	bl	8002344 <var_print>
		loop();
 8002296:	f000 f853 	bl	8002340 <loop>
	}

    // clear interrupt status
    if (TIM2->DIER & 0x01) {
 800229a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00e      	beq.n	80022c6 <TIM2_IRQHandler+0x56>
        if (TIM2->SR & 0x01) {
 80022a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <TIM2_IRQHandler+0x56>
            TIM2->SR &= ~(1U << 0);
 80022b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	6113      	str	r3, [r2, #16]
        }
    }
}
 80022c6:	bf00      	nop
 80022c8:	bd08      	pop	{r3, pc}
 80022ca:	bf00      	nop
 80022cc:	200000fc 	.word	0x200000fc
 80022d0:	08004c74 	.word	0x08004c74
 80022d4:	20000900 	.word	0x20000900

080022d8 <get_time>:

// Returns system time in ms
size_t get_time(void) {
	return systime;
 80022d8:	4b01      	ldr	r3, [pc, #4]	; (80022e0 <get_time+0x8>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	4770      	bx	lr
 80022e0:	200000fc 	.word	0x200000fc

080022e4 <timer_init>:

/*************************************************
* main code starts from here
*************************************************/
void timer_init(void)
{
 80022e4:	b508      	push	{r3, lr}
	// Set system clock
	set_sysclk_to_120();		
 80022e6:	f000 f873 	bl	80023d0 <set_sysclk_to_120>

    // enable TIM2 clock (bit0)
    RCC->APB1ENR1 |= (1 << 0);
 80022ea:	4b14      	ldr	r3, [pc, #80]	; (800233c <timer_init+0x58>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	4a13      	ldr	r2, [pc, #76]	; (800233c <timer_init+0x58>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6593      	str	r3, [r2, #88]	; 0x58

	// Formula: Clock speed = (sysclk/APB1_prescaler)*2/(PSC+1)
	// For STM32L4S5: 120M/4*2 = 60M, 60M/5999+1 = 10 khz clock speed
    TIM2->PSC = 5999;
 80022f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022fa:	f241 726f 	movw	r2, #5999	; 0x176f
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28

	// Set auto reload value to 100 to give 1 ms timer interrupts
    TIM2->ARR = 10;
 8002300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002304:	220a      	movs	r2, #10
 8002306:	62da      	str	r2, [r3, #44]	; 0x2c

    // Update Interrupt Enable
    TIM2->DIER |= (1 << 0);
 8002308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	60d3      	str	r3, [r2, #12]

    NVIC_SetPriority(TIM2_IRQn, 2); // Priority level 2
 8002318:	2102      	movs	r1, #2
 800231a:	201c      	movs	r0, #28
 800231c:	f7ff ff80 	bl	8002220 <__NVIC_SetPriority>
    // enable TIM2 IRQ from NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 8002320:	201c      	movs	r0, #28
 8002322:	f7ff ff63 	bl	80021ec <__NVIC_EnableIRQ>

    // Enable Timer 2 module (CEN, bit0)
    TIM2->CR1 |= (1 << 0);
 8002326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6013      	str	r3, [r2, #0]
}
 8002336:	bf00      	nop
 8002338:	bd08      	pop	{r3, pc}
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000

08002340 <loop>:
char output_str[MAXLINE*2];
char msg[MAXLINE];
size_t output_offset=0;

void loop() {
	while(1) {}
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <loop>

08002344 <var_print>:
}

// Append printed output to output_str
void var_print(char * str) {
 8002344:	b500      	push	{lr}
 8002346:	b083      	sub	sp, #12
 8002348:	9001      	str	r0, [sp, #4]
	if (output_offset + strlen(str) <= MAXLINE*2) {
 800234a:	9801      	ldr	r0, [sp, #4]
 800234c:	f7fd ff38 	bl	80001c0 <strlen>
 8002350:	4602      	mov	r2, r0
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <var_print+0x2c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4413      	add	r3, r2
 8002358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800235c:	d804      	bhi.n	8002368 <var_print+0x24>
		strcat(output_str, str);
 800235e:	9901      	ldr	r1, [sp, #4]
 8002360:	4804      	ldr	r0, [pc, #16]	; (8002374 <var_print+0x30>)
 8002362:	f000 fc2e 	bl	8002bc2 <strcat>
	} else {
		while(1){}
	}
}
 8002366:	e000      	b.n	800236a <var_print+0x26>
		while(1){}
 8002368:	e7fe      	b.n	8002368 <var_print+0x24>
}
 800236a:	b003      	add	sp, #12
 800236c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002370:	20000d00 	.word	0x20000d00
 8002374:	20000100 	.word	0x20000100

08002378 <HardFault_Handler>:

// Hardfault Handler - Send exit signal
void HardFault_Handler(void) {
 8002378:	b508      	push	{r3, lr}
	loop();
 800237a:	f7ff ffe1 	bl	8002340 <loop>
}
 800237e:	bf00      	nop
 8002380:	bd08      	pop	{r3, pc}
	...

08002384 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <SystemInit+0x44>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	4a0f      	ldr	r2, [pc, #60]	; (80023c8 <SystemInit+0x44>)
 800238c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  	// Set MSION bit
	RCC->CR |= 1U<<0;
 8002394:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <SystemInit+0x48>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0c      	ldr	r2, [pc, #48]	; (80023cc <SystemInit+0x48>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6013      	str	r3, [r2, #0]

	// Reset HSEON, CSSON, PLLON, and HSEBYP bit
	RCC->CR &= ~((1U<<16) | (1U<<19) | (1U<<24) | (1U<<18));
 80023a0:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <SystemInit+0x48>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a09      	ldr	r2, [pc, #36]	; (80023cc <SystemInit+0x48>)
 80023a6:	f023 7386 	bic.w	r3, r3, #17563648	; 0x10c0000
 80023aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
	// Reset RCC clock configuration
	RCC->CFGR = 0x00000000;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <SystemInit+0x48>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
	RCC->PLLCFGR = 0x00001000;	
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <SystemInit+0x48>)
 80023b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023bc:	60da      	str	r2, [r3, #12]
	// Disable all clock interrupts
	RCC->CIER = 0x00000000;
 80023be:	4b03      	ldr	r3, [pc, #12]	; (80023cc <SystemInit+0x48>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	619a      	str	r2, [r3, #24]
}
 80023c4:	bf00      	nop
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00
 80023cc:	40021000 	.word	0x40021000

080023d0 <set_sysclk_to_120>:
}

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

// Set system clock to 120 MHz and perform other initialization tasks
void set_sysclk_to_120(void) {
 80023d0:	b088      	sub	sp, #32
	// Actual bit values for PLL fields
	uint32_t pllm = PLL_M-1;
 80023d2:	2300      	movs	r3, #0
 80023d4:	9307      	str	r3, [sp, #28]
	uint32_t plln = PLL_N;
 80023d6:	2314      	movs	r3, #20
 80023d8:	9306      	str	r3, [sp, #24]
	uint32_t pllr = PLL_R/2 - 1;
 80023da:	2303      	movs	r3, #3
 80023dc:	9305      	str	r3, [sp, #20]
	volatile uint32_t * cr = &(RCC->CR);
 80023de:	4b5d      	ldr	r3, [pc, #372]	; (8002554 <set_sysclk_to_120+0x184>)
 80023e0:	9304      	str	r3, [sp, #16]
	volatile uint32_t * bdcr = &(RCC->BDCR);
 80023e2:	4b5d      	ldr	r3, [pc, #372]	; (8002558 <set_sysclk_to_120+0x188>)
 80023e4:	9303      	str	r3, [sp, #12]
	volatile uint32_t * pllcfgr = &(RCC->PLLCFGR);
 80023e6:	4b5d      	ldr	r3, [pc, #372]	; (800255c <set_sysclk_to_120+0x18c>)
 80023e8:	9302      	str	r3, [sp, #8]
	volatile uint32_t * cfgr = &(RCC->CFGR);
 80023ea:	4b5d      	ldr	r3, [pc, #372]	; (8002560 <set_sysclk_to_120+0x190>)
 80023ec:	9301      	str	r3, [sp, #4]

	// Disable BDCR write protection
	PWR->CR1 |= 1U<<8;
 80023ee:	4b5d      	ldr	r3, [pc, #372]	; (8002564 <set_sysclk_to_120+0x194>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a5c      	ldr	r2, [pc, #368]	; (8002564 <set_sysclk_to_120+0x194>)
 80023f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f8:	6013      	str	r3, [r2, #0]
	// Enable LSE (for MSI PLL)
	RCC->BDCR = 1U<<0;
 80023fa:	4b56      	ldr	r3, [pc, #344]	; (8002554 <set_sysclk_to_120+0x184>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	// Wait for LSE to be ready
	while(!(RCC->BDCR &(1U<<1)));
 8002402:	bf00      	nop
 8002404:	4b53      	ldr	r3, [pc, #332]	; (8002554 <set_sysclk_to_120+0x184>)
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f8      	beq.n	8002404 <set_sysclk_to_120+0x34>

	// Enable MSI
	RCC->CR |= 1U<<0;
 8002412:	4b50      	ldr	r3, [pc, #320]	; (8002554 <set_sysclk_to_120+0x184>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a4f      	ldr	r2, [pc, #316]	; (8002554 <set_sysclk_to_120+0x184>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 800241e:	bf00      	nop
 8002420:	4b4c      	ldr	r3, [pc, #304]	; (8002554 <set_sysclk_to_120+0x184>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f9      	beq.n	8002420 <set_sysclk_to_120+0x50>
	// Set MSI clock to 48 Mhz
	RCC->CR |= 1U<<3; // Select CR register value
 800242c:	4b49      	ldr	r3, [pc, #292]	; (8002554 <set_sysclk_to_120+0x184>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a48      	ldr	r2, [pc, #288]	; (8002554 <set_sysclk_to_120+0x184>)
 8002432:	f043 0308 	orr.w	r3, r3, #8
 8002436:	6013      	str	r3, [r2, #0]
	RCC->CR &= ~(0xFF << 4);
 8002438:	4b46      	ldr	r3, [pc, #280]	; (8002554 <set_sysclk_to_120+0x184>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a45      	ldr	r2, [pc, #276]	; (8002554 <set_sysclk_to_120+0x184>)
 800243e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002442:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 8002444:	bf00      	nop
 8002446:	4b43      	ldr	r3, [pc, #268]	; (8002554 <set_sysclk_to_120+0x184>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f9      	beq.n	8002446 <set_sysclk_to_120+0x76>
	RCC->CR |= 11 << 4;
 8002452:	4b40      	ldr	r3, [pc, #256]	; (8002554 <set_sysclk_to_120+0x184>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a3f      	ldr	r2, [pc, #252]	; (8002554 <set_sysclk_to_120+0x184>)
 8002458:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800245c:	6013      	str	r3, [r2, #0]
	// Wait until MSI is ready
	while(!(RCC->CR & (1U<<1)));
 800245e:	bf00      	nop
 8002460:	4b3c      	ldr	r3, [pc, #240]	; (8002554 <set_sysclk_to_120+0x184>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f9      	beq.n	8002460 <set_sysclk_to_120+0x90>
	// Enable MSI PLL
	RCC->CR |= 1U<<2;
 800246c:	4b39      	ldr	r3, [pc, #228]	; (8002554 <set_sysclk_to_120+0x184>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a38      	ldr	r2, [pc, #224]	; (8002554 <set_sysclk_to_120+0x184>)
 8002472:	f043 0304 	orr.w	r3, r3, #4
 8002476:	6013      	str	r3, [r2, #0]

	// Enable power interface clock
	RCC->APB1ENR1 |= 1U<<28;
 8002478:	4b36      	ldr	r3, [pc, #216]	; (8002554 <set_sysclk_to_120+0x184>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	4a35      	ldr	r2, [pc, #212]	; (8002554 <set_sysclk_to_120+0x184>)
 800247e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002482:	6593      	str	r3, [r2, #88]	; 0x58
	// Select power range 1
	PWR->CR1 |= 1<<9;
 8002484:	4b37      	ldr	r3, [pc, #220]	; (8002564 <set_sysclk_to_120+0x194>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a36      	ldr	r2, [pc, #216]	; (8002564 <set_sysclk_to_120+0x194>)
 800248a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800248e:	6013      	str	r3, [r2, #0]
	// R1MODE bit - boost mode
	PWR->CR5 &= ~(1<<8);
 8002490:	4b34      	ldr	r3, [pc, #208]	; (8002564 <set_sysclk_to_120+0x194>)
 8002492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002496:	4a33      	ldr	r2, [pc, #204]	; (8002564 <set_sysclk_to_120+0x194>)
 8002498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800249c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	// Set AHB Prescaler - 2
	RCC->CFGR |= (4<<4);
 80024a0:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <set_sysclk_to_120+0x184>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4a2b      	ldr	r2, [pc, #172]	; (8002554 <set_sysclk_to_120+0x184>)
 80024a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024aa:	6093      	str	r3, [r2, #8]
	// Set APB1 low speed prescaler - 4
	RCC->CFGR |= (5<<8);
 80024ac:	4b29      	ldr	r3, [pc, #164]	; (8002554 <set_sysclk_to_120+0x184>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a28      	ldr	r2, [pc, #160]	; (8002554 <set_sysclk_to_120+0x184>)
 80024b2:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80024b6:	6093      	str	r3, [r2, #8]
	// Set APB2 high speed prescaler - 2
	RCC->CFGR |= (4<<11);
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <set_sysclk_to_120+0x184>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4a25      	ldr	r2, [pc, #148]	; (8002554 <set_sysclk_to_120+0x184>)
 80024be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024c2:	6093      	str	r3, [r2, #8]

	// Disable PLL
	RCC->CR &= ~(1U<<24);
 80024c4:	4b23      	ldr	r3, [pc, #140]	; (8002554 <set_sysclk_to_120+0x184>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a22      	ldr	r2, [pc, #136]	; (8002554 <set_sysclk_to_120+0x184>)
 80024ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ce:	6013      	str	r3, [r2, #0]
	// Wait for PLL to unlock
	while((RCC->CR & (1U<<25)));
 80024d0:	bf00      	nop
 80024d2:	4b20      	ldr	r3, [pc, #128]	; (8002554 <set_sysclk_to_120+0x184>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f9      	bne.n	80024d2 <set_sysclk_to_120+0x102>
	// Set PLL dividers, and source to MSI
	RCC->PLLCFGR = (pllm <<4) | (plln<<8) | (pllr<<25) | (1 << 0);
 80024de:	9b07      	ldr	r3, [sp, #28]
 80024e0:	011a      	lsls	r2, r3, #4
 80024e2:	9b06      	ldr	r3, [sp, #24]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	431a      	orrs	r2, r3
 80024e8:	9b05      	ldr	r3, [sp, #20]
 80024ea:	065b      	lsls	r3, r3, #25
 80024ec:	4313      	orrs	r3, r2
 80024ee:	4a19      	ldr	r2, [pc, #100]	; (8002554 <set_sysclk_to_120+0x184>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	60d3      	str	r3, [r2, #12]
	// Enable main PLL
	RCC->CR |= 1U<<24;
 80024f6:	4b17      	ldr	r3, [pc, #92]	; (8002554 <set_sysclk_to_120+0x184>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a16      	ldr	r2, [pc, #88]	; (8002554 <set_sysclk_to_120+0x184>)
 80024fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002500:	6013      	str	r3, [r2, #0]
	// Set R EN bit
	RCC->PLLCFGR |= (1U << 24);
 8002502:	4b14      	ldr	r3, [pc, #80]	; (8002554 <set_sysclk_to_120+0x184>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	4a13      	ldr	r2, [pc, #76]	; (8002554 <set_sysclk_to_120+0x184>)
 8002508:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250c:	60d3      	str	r3, [r2, #12]
	// Wait until PLL is ready
	while((RCC->CR & (1 << 25)));
 800250e:	bf00      	nop
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <set_sysclk_to_120+0x184>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f9      	bne.n	8002510 <set_sysclk_to_120+0x140>

	// Set AHB Prescaler - 1
	RCC->CFGR |= (0<<4);
 800251c:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <set_sysclk_to_120+0x184>)
 800251e:	4a0d      	ldr	r2, [pc, #52]	; (8002554 <set_sysclk_to_120+0x184>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	6093      	str	r3, [r2, #8]

	// Flash: Prefetch enable, instruction cache enable, data cache enable, latency to 5 wait states (Depends on CPU clock, refer to table 12 in RM0432)
	FLASH->ACR = (1U << 8) | (1U << 9) | (1U << 10) | (5 << 0);
 8002524:	4b10      	ldr	r3, [pc, #64]	; (8002568 <set_sysclk_to_120+0x198>)
 8002526:	f240 7205 	movw	r2, #1797	; 0x705
 800252a:	601a      	str	r2, [r3, #0]

	// Select main PLL as system clock source
	RCC->CFGR |= 3U<<0;
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <set_sysclk_to_120+0x184>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	4a08      	ldr	r2, [pc, #32]	; (8002554 <set_sysclk_to_120+0x184>)
 8002532:	f043 0303 	orr.w	r3, r3, #3
 8002536:	6093      	str	r3, [r2, #8]
	// Wait until main PLL is set as clock
	while (!((RCC->CFGR % 8) == 3));
 8002538:	bf00      	nop
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <set_sysclk_to_120+0x184>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	2b03      	cmp	r3, #3
 8002544:	d1f9      	bne.n	800253a <set_sysclk_to_120+0x16a>

	// Update SystemCoreClock variable
	SystemCoreClock = 120000000;
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <set_sysclk_to_120+0x19c>)
 8002548:	4a09      	ldr	r2, [pc, #36]	; (8002570 <set_sysclk_to_120+0x1a0>)
 800254a:	601a      	str	r2, [r3, #0]
}
 800254c:	bf00      	nop
 800254e:	b008      	add	sp, #32
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	40021090 	.word	0x40021090
 800255c:	4002100c 	.word	0x4002100c
 8002560:	40021008 	.word	0x40021008
 8002564:	40007000 	.word	0x40007000
 8002568:	40022000 	.word	0x40022000
 800256c:	2000005c 	.word	0x2000005c
 8002570:	07270e00 	.word	0x07270e00

08002574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002578:	f7ff ff04 	bl	8002384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800257c:	480c      	ldr	r0, [pc, #48]	; (80025b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800257e:	490d      	ldr	r1, [pc, #52]	; (80025b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002580:	4a0d      	ldr	r2, [pc, #52]	; (80025b8 <LoopForever+0xe>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002584:	e002      	b.n	800258c <LoopCopyDataInit>

08002586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800258a:	3304      	adds	r3, #4

0800258c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800258c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800258e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002590:	d3f9      	bcc.n	8002586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002592:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002594:	4c0a      	ldr	r4, [pc, #40]	; (80025c0 <LoopForever+0x16>)
  movs r3, #0
 8002596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002598:	e001      	b.n	800259e <LoopFillZerobss>

0800259a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800259a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800259c:	3204      	adds	r2, #4

0800259e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800259e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a0:	d3fb      	bcc.n	800259a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025a2:	f000 f847 	bl	8002634 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025a6:	f7fe fa9d 	bl	8000ae4 <main>

080025aa <LoopForever>:

LoopForever:
    b LoopForever
 80025aa:	e7fe      	b.n	80025aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80025ac:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80025b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b4:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80025b8:	08005540 	.word	0x08005540
  ldr r2, =_sbss
 80025bc:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80025c0:	20000d18 	.word	0x20000d18

080025c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025c4:	e7fe      	b.n	80025c4 <ADC1_IRQHandler>
	...

080025c8 <__assert_func>:
 80025c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80025ca:	4614      	mov	r4, r2
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <__assert_func+0x2c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4605      	mov	r5, r0
 80025d4:	68d8      	ldr	r0, [r3, #12]
 80025d6:	b14c      	cbz	r4, 80025ec <__assert_func+0x24>
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <__assert_func+0x30>)
 80025da:	9100      	str	r1, [sp, #0]
 80025dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80025e0:	4906      	ldr	r1, [pc, #24]	; (80025fc <__assert_func+0x34>)
 80025e2:	462b      	mov	r3, r5
 80025e4:	f000 f814 	bl	8002610 <fiprintf>
 80025e8:	f000 fdbe 	bl	8003168 <abort>
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <__assert_func+0x38>)
 80025ee:	461c      	mov	r4, r3
 80025f0:	e7f3      	b.n	80025da <__assert_func+0x12>
 80025f2:	bf00      	nop
 80025f4:	20000060 	.word	0x20000060
 80025f8:	08004ca2 	.word	0x08004ca2
 80025fc:	08004caf 	.word	0x08004caf
 8002600:	08004cdd 	.word	0x08004cdd

08002604 <__errno>:
 8002604:	4b01      	ldr	r3, [pc, #4]	; (800260c <__errno+0x8>)
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000060 	.word	0x20000060

08002610 <fiprintf>:
 8002610:	b40e      	push	{r1, r2, r3}
 8002612:	b503      	push	{r0, r1, lr}
 8002614:	4601      	mov	r1, r0
 8002616:	ab03      	add	r3, sp, #12
 8002618:	4805      	ldr	r0, [pc, #20]	; (8002630 <fiprintf+0x20>)
 800261a:	f853 2b04 	ldr.w	r2, [r3], #4
 800261e:	6800      	ldr	r0, [r0, #0]
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	f000 f8ff 	bl	8002824 <_vfiprintf_r>
 8002626:	b002      	add	sp, #8
 8002628:	f85d eb04 	ldr.w	lr, [sp], #4
 800262c:	b003      	add	sp, #12
 800262e:	4770      	bx	lr
 8002630:	20000060 	.word	0x20000060

08002634 <__libc_init_array>:
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	4d0d      	ldr	r5, [pc, #52]	; (800266c <__libc_init_array+0x38>)
 8002638:	4c0d      	ldr	r4, [pc, #52]	; (8002670 <__libc_init_array+0x3c>)
 800263a:	1b64      	subs	r4, r4, r5
 800263c:	10a4      	asrs	r4, r4, #2
 800263e:	2600      	movs	r6, #0
 8002640:	42a6      	cmp	r6, r4
 8002642:	d109      	bne.n	8002658 <__libc_init_array+0x24>
 8002644:	4d0b      	ldr	r5, [pc, #44]	; (8002674 <__libc_init_array+0x40>)
 8002646:	4c0c      	ldr	r4, [pc, #48]	; (8002678 <__libc_init_array+0x44>)
 8002648:	f002 f8be 	bl	80047c8 <_init>
 800264c:	1b64      	subs	r4, r4, r5
 800264e:	10a4      	asrs	r4, r4, #2
 8002650:	2600      	movs	r6, #0
 8002652:	42a6      	cmp	r6, r4
 8002654:	d105      	bne.n	8002662 <__libc_init_array+0x2e>
 8002656:	bd70      	pop	{r4, r5, r6, pc}
 8002658:	f855 3b04 	ldr.w	r3, [r5], #4
 800265c:	4798      	blx	r3
 800265e:	3601      	adds	r6, #1
 8002660:	e7ee      	b.n	8002640 <__libc_init_array+0xc>
 8002662:	f855 3b04 	ldr.w	r3, [r5], #4
 8002666:	4798      	blx	r3
 8002668:	3601      	adds	r6, #1
 800266a:	e7f2      	b.n	8002652 <__libc_init_array+0x1e>
 800266c:	08005530 	.word	0x08005530
 8002670:	08005530 	.word	0x08005530
 8002674:	08005530 	.word	0x08005530
 8002678:	08005534 	.word	0x08005534

0800267c <memcpy>:
 800267c:	440a      	add	r2, r1
 800267e:	4291      	cmp	r1, r2
 8002680:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002684:	d100      	bne.n	8002688 <memcpy+0xc>
 8002686:	4770      	bx	lr
 8002688:	b510      	push	{r4, lr}
 800268a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800268e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002692:	4291      	cmp	r1, r2
 8002694:	d1f9      	bne.n	800268a <memcpy+0xe>
 8002696:	bd10      	pop	{r4, pc}

08002698 <memset>:
 8002698:	4402      	add	r2, r0
 800269a:	4603      	mov	r3, r0
 800269c:	4293      	cmp	r3, r2
 800269e:	d100      	bne.n	80026a2 <memset+0xa>
 80026a0:	4770      	bx	lr
 80026a2:	f803 1b01 	strb.w	r1, [r3], #1
 80026a6:	e7f9      	b.n	800269c <memset+0x4>

080026a8 <sbrk_aligned>:
 80026a8:	b570      	push	{r4, r5, r6, lr}
 80026aa:	4e0e      	ldr	r6, [pc, #56]	; (80026e4 <sbrk_aligned+0x3c>)
 80026ac:	460c      	mov	r4, r1
 80026ae:	6831      	ldr	r1, [r6, #0]
 80026b0:	4605      	mov	r5, r0
 80026b2:	b911      	cbnz	r1, 80026ba <sbrk_aligned+0x12>
 80026b4:	f000 f9e4 	bl	8002a80 <_sbrk_r>
 80026b8:	6030      	str	r0, [r6, #0]
 80026ba:	4621      	mov	r1, r4
 80026bc:	4628      	mov	r0, r5
 80026be:	f000 f9df 	bl	8002a80 <_sbrk_r>
 80026c2:	1c43      	adds	r3, r0, #1
 80026c4:	d00a      	beq.n	80026dc <sbrk_aligned+0x34>
 80026c6:	1cc4      	adds	r4, r0, #3
 80026c8:	f024 0403 	bic.w	r4, r4, #3
 80026cc:	42a0      	cmp	r0, r4
 80026ce:	d007      	beq.n	80026e0 <sbrk_aligned+0x38>
 80026d0:	1a21      	subs	r1, r4, r0
 80026d2:	4628      	mov	r0, r5
 80026d4:	f000 f9d4 	bl	8002a80 <_sbrk_r>
 80026d8:	3001      	adds	r0, #1
 80026da:	d101      	bne.n	80026e0 <sbrk_aligned+0x38>
 80026dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80026e0:	4620      	mov	r0, r4
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
 80026e4:	20000d08 	.word	0x20000d08

080026e8 <_malloc_r>:
 80026e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026ec:	1ccd      	adds	r5, r1, #3
 80026ee:	f025 0503 	bic.w	r5, r5, #3
 80026f2:	3508      	adds	r5, #8
 80026f4:	2d0c      	cmp	r5, #12
 80026f6:	bf38      	it	cc
 80026f8:	250c      	movcc	r5, #12
 80026fa:	2d00      	cmp	r5, #0
 80026fc:	4607      	mov	r7, r0
 80026fe:	db01      	blt.n	8002704 <_malloc_r+0x1c>
 8002700:	42a9      	cmp	r1, r5
 8002702:	d905      	bls.n	8002710 <_malloc_r+0x28>
 8002704:	230c      	movs	r3, #12
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	2600      	movs	r6, #0
 800270a:	4630      	mov	r0, r6
 800270c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002710:	4e2e      	ldr	r6, [pc, #184]	; (80027cc <_malloc_r+0xe4>)
 8002712:	f000 ff8d 	bl	8003630 <__malloc_lock>
 8002716:	6833      	ldr	r3, [r6, #0]
 8002718:	461c      	mov	r4, r3
 800271a:	bb34      	cbnz	r4, 800276a <_malloc_r+0x82>
 800271c:	4629      	mov	r1, r5
 800271e:	4638      	mov	r0, r7
 8002720:	f7ff ffc2 	bl	80026a8 <sbrk_aligned>
 8002724:	1c43      	adds	r3, r0, #1
 8002726:	4604      	mov	r4, r0
 8002728:	d14d      	bne.n	80027c6 <_malloc_r+0xde>
 800272a:	6834      	ldr	r4, [r6, #0]
 800272c:	4626      	mov	r6, r4
 800272e:	2e00      	cmp	r6, #0
 8002730:	d140      	bne.n	80027b4 <_malloc_r+0xcc>
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	4631      	mov	r1, r6
 8002736:	4638      	mov	r0, r7
 8002738:	eb04 0803 	add.w	r8, r4, r3
 800273c:	f000 f9a0 	bl	8002a80 <_sbrk_r>
 8002740:	4580      	cmp	r8, r0
 8002742:	d13a      	bne.n	80027ba <_malloc_r+0xd2>
 8002744:	6823      	ldr	r3, [r4, #0]
 8002746:	3503      	adds	r5, #3
 8002748:	1aed      	subs	r5, r5, r3
 800274a:	f025 0503 	bic.w	r5, r5, #3
 800274e:	3508      	adds	r5, #8
 8002750:	2d0c      	cmp	r5, #12
 8002752:	bf38      	it	cc
 8002754:	250c      	movcc	r5, #12
 8002756:	4629      	mov	r1, r5
 8002758:	4638      	mov	r0, r7
 800275a:	f7ff ffa5 	bl	80026a8 <sbrk_aligned>
 800275e:	3001      	adds	r0, #1
 8002760:	d02b      	beq.n	80027ba <_malloc_r+0xd2>
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	442b      	add	r3, r5
 8002766:	6023      	str	r3, [r4, #0]
 8002768:	e00e      	b.n	8002788 <_malloc_r+0xa0>
 800276a:	6822      	ldr	r2, [r4, #0]
 800276c:	1b52      	subs	r2, r2, r5
 800276e:	d41e      	bmi.n	80027ae <_malloc_r+0xc6>
 8002770:	2a0b      	cmp	r2, #11
 8002772:	d916      	bls.n	80027a2 <_malloc_r+0xba>
 8002774:	1961      	adds	r1, r4, r5
 8002776:	42a3      	cmp	r3, r4
 8002778:	6025      	str	r5, [r4, #0]
 800277a:	bf18      	it	ne
 800277c:	6059      	strne	r1, [r3, #4]
 800277e:	6863      	ldr	r3, [r4, #4]
 8002780:	bf08      	it	eq
 8002782:	6031      	streq	r1, [r6, #0]
 8002784:	5162      	str	r2, [r4, r5]
 8002786:	604b      	str	r3, [r1, #4]
 8002788:	4638      	mov	r0, r7
 800278a:	f104 060b 	add.w	r6, r4, #11
 800278e:	f000 ff55 	bl	800363c <__malloc_unlock>
 8002792:	f026 0607 	bic.w	r6, r6, #7
 8002796:	1d23      	adds	r3, r4, #4
 8002798:	1af2      	subs	r2, r6, r3
 800279a:	d0b6      	beq.n	800270a <_malloc_r+0x22>
 800279c:	1b9b      	subs	r3, r3, r6
 800279e:	50a3      	str	r3, [r4, r2]
 80027a0:	e7b3      	b.n	800270a <_malloc_r+0x22>
 80027a2:	6862      	ldr	r2, [r4, #4]
 80027a4:	42a3      	cmp	r3, r4
 80027a6:	bf0c      	ite	eq
 80027a8:	6032      	streq	r2, [r6, #0]
 80027aa:	605a      	strne	r2, [r3, #4]
 80027ac:	e7ec      	b.n	8002788 <_malloc_r+0xa0>
 80027ae:	4623      	mov	r3, r4
 80027b0:	6864      	ldr	r4, [r4, #4]
 80027b2:	e7b2      	b.n	800271a <_malloc_r+0x32>
 80027b4:	4634      	mov	r4, r6
 80027b6:	6876      	ldr	r6, [r6, #4]
 80027b8:	e7b9      	b.n	800272e <_malloc_r+0x46>
 80027ba:	230c      	movs	r3, #12
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	4638      	mov	r0, r7
 80027c0:	f000 ff3c 	bl	800363c <__malloc_unlock>
 80027c4:	e7a1      	b.n	800270a <_malloc_r+0x22>
 80027c6:	6025      	str	r5, [r4, #0]
 80027c8:	e7de      	b.n	8002788 <_malloc_r+0xa0>
 80027ca:	bf00      	nop
 80027cc:	20000d04 	.word	0x20000d04

080027d0 <__sfputc_r>:
 80027d0:	6893      	ldr	r3, [r2, #8]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	b410      	push	{r4}
 80027d8:	6093      	str	r3, [r2, #8]
 80027da:	da08      	bge.n	80027ee <__sfputc_r+0x1e>
 80027dc:	6994      	ldr	r4, [r2, #24]
 80027de:	42a3      	cmp	r3, r4
 80027e0:	db01      	blt.n	80027e6 <__sfputc_r+0x16>
 80027e2:	290a      	cmp	r1, #10
 80027e4:	d103      	bne.n	80027ee <__sfputc_r+0x1e>
 80027e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027ea:	f000 bbeb 	b.w	8002fc4 <__swbuf_r>
 80027ee:	6813      	ldr	r3, [r2, #0]
 80027f0:	1c58      	adds	r0, r3, #1
 80027f2:	6010      	str	r0, [r2, #0]
 80027f4:	7019      	strb	r1, [r3, #0]
 80027f6:	4608      	mov	r0, r1
 80027f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <__sfputs_r>:
 80027fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002800:	4606      	mov	r6, r0
 8002802:	460f      	mov	r7, r1
 8002804:	4614      	mov	r4, r2
 8002806:	18d5      	adds	r5, r2, r3
 8002808:	42ac      	cmp	r4, r5
 800280a:	d101      	bne.n	8002810 <__sfputs_r+0x12>
 800280c:	2000      	movs	r0, #0
 800280e:	e007      	b.n	8002820 <__sfputs_r+0x22>
 8002810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002814:	463a      	mov	r2, r7
 8002816:	4630      	mov	r0, r6
 8002818:	f7ff ffda 	bl	80027d0 <__sfputc_r>
 800281c:	1c43      	adds	r3, r0, #1
 800281e:	d1f3      	bne.n	8002808 <__sfputs_r+0xa>
 8002820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002824 <_vfiprintf_r>:
 8002824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002828:	460d      	mov	r5, r1
 800282a:	b09d      	sub	sp, #116	; 0x74
 800282c:	4614      	mov	r4, r2
 800282e:	4698      	mov	r8, r3
 8002830:	4606      	mov	r6, r0
 8002832:	b118      	cbz	r0, 800283c <_vfiprintf_r+0x18>
 8002834:	6983      	ldr	r3, [r0, #24]
 8002836:	b90b      	cbnz	r3, 800283c <_vfiprintf_r+0x18>
 8002838:	f000 fdc8 	bl	80033cc <__sinit>
 800283c:	4b88      	ldr	r3, [pc, #544]	; (8002a60 <_vfiprintf_r+0x23c>)
 800283e:	429d      	cmp	r5, r3
 8002840:	d11b      	bne.n	800287a <_vfiprintf_r+0x56>
 8002842:	6875      	ldr	r5, [r6, #4]
 8002844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002846:	07d9      	lsls	r1, r3, #31
 8002848:	d405      	bmi.n	8002856 <_vfiprintf_r+0x32>
 800284a:	89ab      	ldrh	r3, [r5, #12]
 800284c:	059a      	lsls	r2, r3, #22
 800284e:	d402      	bmi.n	8002856 <_vfiprintf_r+0x32>
 8002850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002852:	f000 fe59 	bl	8003508 <__retarget_lock_acquire_recursive>
 8002856:	89ab      	ldrh	r3, [r5, #12]
 8002858:	071b      	lsls	r3, r3, #28
 800285a:	d501      	bpl.n	8002860 <_vfiprintf_r+0x3c>
 800285c:	692b      	ldr	r3, [r5, #16]
 800285e:	b9eb      	cbnz	r3, 800289c <_vfiprintf_r+0x78>
 8002860:	4629      	mov	r1, r5
 8002862:	4630      	mov	r0, r6
 8002864:	f000 fc12 	bl	800308c <__swsetup_r>
 8002868:	b1c0      	cbz	r0, 800289c <_vfiprintf_r+0x78>
 800286a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800286c:	07dc      	lsls	r4, r3, #31
 800286e:	d50e      	bpl.n	800288e <_vfiprintf_r+0x6a>
 8002870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002874:	b01d      	add	sp, #116	; 0x74
 8002876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800287a:	4b7a      	ldr	r3, [pc, #488]	; (8002a64 <_vfiprintf_r+0x240>)
 800287c:	429d      	cmp	r5, r3
 800287e:	d101      	bne.n	8002884 <_vfiprintf_r+0x60>
 8002880:	68b5      	ldr	r5, [r6, #8]
 8002882:	e7df      	b.n	8002844 <_vfiprintf_r+0x20>
 8002884:	4b78      	ldr	r3, [pc, #480]	; (8002a68 <_vfiprintf_r+0x244>)
 8002886:	429d      	cmp	r5, r3
 8002888:	bf08      	it	eq
 800288a:	68f5      	ldreq	r5, [r6, #12]
 800288c:	e7da      	b.n	8002844 <_vfiprintf_r+0x20>
 800288e:	89ab      	ldrh	r3, [r5, #12]
 8002890:	0598      	lsls	r0, r3, #22
 8002892:	d4ed      	bmi.n	8002870 <_vfiprintf_r+0x4c>
 8002894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002896:	f000 fe38 	bl	800350a <__retarget_lock_release_recursive>
 800289a:	e7e9      	b.n	8002870 <_vfiprintf_r+0x4c>
 800289c:	2300      	movs	r3, #0
 800289e:	9309      	str	r3, [sp, #36]	; 0x24
 80028a0:	2320      	movs	r3, #32
 80028a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80028aa:	2330      	movs	r3, #48	; 0x30
 80028ac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002a6c <_vfiprintf_r+0x248>
 80028b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028b4:	f04f 0901 	mov.w	r9, #1
 80028b8:	4623      	mov	r3, r4
 80028ba:	469a      	mov	sl, r3
 80028bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028c0:	b10a      	cbz	r2, 80028c6 <_vfiprintf_r+0xa2>
 80028c2:	2a25      	cmp	r2, #37	; 0x25
 80028c4:	d1f9      	bne.n	80028ba <_vfiprintf_r+0x96>
 80028c6:	ebba 0b04 	subs.w	fp, sl, r4
 80028ca:	d00b      	beq.n	80028e4 <_vfiprintf_r+0xc0>
 80028cc:	465b      	mov	r3, fp
 80028ce:	4622      	mov	r2, r4
 80028d0:	4629      	mov	r1, r5
 80028d2:	4630      	mov	r0, r6
 80028d4:	f7ff ff93 	bl	80027fe <__sfputs_r>
 80028d8:	3001      	adds	r0, #1
 80028da:	f000 80a9 	beq.w	8002a30 <_vfiprintf_r+0x20c>
 80028de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028e0:	445a      	add	r2, fp
 80028e2:	9209      	str	r2, [sp, #36]	; 0x24
 80028e4:	f89a 3000 	ldrb.w	r3, [sl]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80a1 	beq.w	8002a30 <_vfiprintf_r+0x20c>
 80028ee:	2300      	movs	r3, #0
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028f8:	f10a 0a01 	add.w	sl, sl, #1
 80028fc:	9304      	str	r3, [sp, #16]
 80028fe:	9307      	str	r3, [sp, #28]
 8002900:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002904:	931a      	str	r3, [sp, #104]	; 0x68
 8002906:	4654      	mov	r4, sl
 8002908:	2205      	movs	r2, #5
 800290a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800290e:	4857      	ldr	r0, [pc, #348]	; (8002a6c <_vfiprintf_r+0x248>)
 8002910:	f7fd fc5e 	bl	80001d0 <memchr>
 8002914:	9a04      	ldr	r2, [sp, #16]
 8002916:	b9d8      	cbnz	r0, 8002950 <_vfiprintf_r+0x12c>
 8002918:	06d1      	lsls	r1, r2, #27
 800291a:	bf44      	itt	mi
 800291c:	2320      	movmi	r3, #32
 800291e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002922:	0713      	lsls	r3, r2, #28
 8002924:	bf44      	itt	mi
 8002926:	232b      	movmi	r3, #43	; 0x2b
 8002928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800292c:	f89a 3000 	ldrb.w	r3, [sl]
 8002930:	2b2a      	cmp	r3, #42	; 0x2a
 8002932:	d015      	beq.n	8002960 <_vfiprintf_r+0x13c>
 8002934:	9a07      	ldr	r2, [sp, #28]
 8002936:	4654      	mov	r4, sl
 8002938:	2000      	movs	r0, #0
 800293a:	f04f 0c0a 	mov.w	ip, #10
 800293e:	4621      	mov	r1, r4
 8002940:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002944:	3b30      	subs	r3, #48	; 0x30
 8002946:	2b09      	cmp	r3, #9
 8002948:	d94d      	bls.n	80029e6 <_vfiprintf_r+0x1c2>
 800294a:	b1b0      	cbz	r0, 800297a <_vfiprintf_r+0x156>
 800294c:	9207      	str	r2, [sp, #28]
 800294e:	e014      	b.n	800297a <_vfiprintf_r+0x156>
 8002950:	eba0 0308 	sub.w	r3, r0, r8
 8002954:	fa09 f303 	lsl.w	r3, r9, r3
 8002958:	4313      	orrs	r3, r2
 800295a:	9304      	str	r3, [sp, #16]
 800295c:	46a2      	mov	sl, r4
 800295e:	e7d2      	b.n	8002906 <_vfiprintf_r+0xe2>
 8002960:	9b03      	ldr	r3, [sp, #12]
 8002962:	1d19      	adds	r1, r3, #4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	9103      	str	r1, [sp, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	bfbb      	ittet	lt
 800296c:	425b      	neglt	r3, r3
 800296e:	f042 0202 	orrlt.w	r2, r2, #2
 8002972:	9307      	strge	r3, [sp, #28]
 8002974:	9307      	strlt	r3, [sp, #28]
 8002976:	bfb8      	it	lt
 8002978:	9204      	strlt	r2, [sp, #16]
 800297a:	7823      	ldrb	r3, [r4, #0]
 800297c:	2b2e      	cmp	r3, #46	; 0x2e
 800297e:	d10c      	bne.n	800299a <_vfiprintf_r+0x176>
 8002980:	7863      	ldrb	r3, [r4, #1]
 8002982:	2b2a      	cmp	r3, #42	; 0x2a
 8002984:	d134      	bne.n	80029f0 <_vfiprintf_r+0x1cc>
 8002986:	9b03      	ldr	r3, [sp, #12]
 8002988:	1d1a      	adds	r2, r3, #4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	9203      	str	r2, [sp, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	bfb8      	it	lt
 8002992:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002996:	3402      	adds	r4, #2
 8002998:	9305      	str	r3, [sp, #20]
 800299a:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8002a7c <_vfiprintf_r+0x258>
 800299e:	7821      	ldrb	r1, [r4, #0]
 80029a0:	2203      	movs	r2, #3
 80029a2:	4650      	mov	r0, sl
 80029a4:	f7fd fc14 	bl	80001d0 <memchr>
 80029a8:	b138      	cbz	r0, 80029ba <_vfiprintf_r+0x196>
 80029aa:	9b04      	ldr	r3, [sp, #16]
 80029ac:	eba0 000a 	sub.w	r0, r0, sl
 80029b0:	2240      	movs	r2, #64	; 0x40
 80029b2:	4082      	lsls	r2, r0
 80029b4:	4313      	orrs	r3, r2
 80029b6:	3401      	adds	r4, #1
 80029b8:	9304      	str	r3, [sp, #16]
 80029ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029be:	482c      	ldr	r0, [pc, #176]	; (8002a70 <_vfiprintf_r+0x24c>)
 80029c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029c4:	2206      	movs	r2, #6
 80029c6:	f7fd fc03 	bl	80001d0 <memchr>
 80029ca:	2800      	cmp	r0, #0
 80029cc:	d03f      	beq.n	8002a4e <_vfiprintf_r+0x22a>
 80029ce:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <_vfiprintf_r+0x250>)
 80029d0:	bb1b      	cbnz	r3, 8002a1a <_vfiprintf_r+0x1f6>
 80029d2:	9b03      	ldr	r3, [sp, #12]
 80029d4:	3307      	adds	r3, #7
 80029d6:	f023 0307 	bic.w	r3, r3, #7
 80029da:	3308      	adds	r3, #8
 80029dc:	9303      	str	r3, [sp, #12]
 80029de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029e0:	443b      	add	r3, r7
 80029e2:	9309      	str	r3, [sp, #36]	; 0x24
 80029e4:	e768      	b.n	80028b8 <_vfiprintf_r+0x94>
 80029e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80029ea:	460c      	mov	r4, r1
 80029ec:	2001      	movs	r0, #1
 80029ee:	e7a6      	b.n	800293e <_vfiprintf_r+0x11a>
 80029f0:	2300      	movs	r3, #0
 80029f2:	3401      	adds	r4, #1
 80029f4:	9305      	str	r3, [sp, #20]
 80029f6:	4619      	mov	r1, r3
 80029f8:	f04f 0c0a 	mov.w	ip, #10
 80029fc:	4620      	mov	r0, r4
 80029fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a02:	3a30      	subs	r2, #48	; 0x30
 8002a04:	2a09      	cmp	r2, #9
 8002a06:	d903      	bls.n	8002a10 <_vfiprintf_r+0x1ec>
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0c6      	beq.n	800299a <_vfiprintf_r+0x176>
 8002a0c:	9105      	str	r1, [sp, #20]
 8002a0e:	e7c4      	b.n	800299a <_vfiprintf_r+0x176>
 8002a10:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a14:	4604      	mov	r4, r0
 8002a16:	2301      	movs	r3, #1
 8002a18:	e7f0      	b.n	80029fc <_vfiprintf_r+0x1d8>
 8002a1a:	ab03      	add	r3, sp, #12
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	462a      	mov	r2, r5
 8002a20:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <_vfiprintf_r+0x254>)
 8002a22:	a904      	add	r1, sp, #16
 8002a24:	4630      	mov	r0, r6
 8002a26:	f3af 8000 	nop.w
 8002a2a:	4607      	mov	r7, r0
 8002a2c:	1c78      	adds	r0, r7, #1
 8002a2e:	d1d6      	bne.n	80029de <_vfiprintf_r+0x1ba>
 8002a30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a32:	07d9      	lsls	r1, r3, #31
 8002a34:	d405      	bmi.n	8002a42 <_vfiprintf_r+0x21e>
 8002a36:	89ab      	ldrh	r3, [r5, #12]
 8002a38:	059a      	lsls	r2, r3, #22
 8002a3a:	d402      	bmi.n	8002a42 <_vfiprintf_r+0x21e>
 8002a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a3e:	f000 fd64 	bl	800350a <__retarget_lock_release_recursive>
 8002a42:	89ab      	ldrh	r3, [r5, #12]
 8002a44:	065b      	lsls	r3, r3, #25
 8002a46:	f53f af13 	bmi.w	8002870 <_vfiprintf_r+0x4c>
 8002a4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a4c:	e712      	b.n	8002874 <_vfiprintf_r+0x50>
 8002a4e:	ab03      	add	r3, sp, #12
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	462a      	mov	r2, r5
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <_vfiprintf_r+0x254>)
 8002a56:	a904      	add	r1, sp, #16
 8002a58:	4630      	mov	r0, r6
 8002a5a:	f001 fa09 	bl	8003e70 <_printf_i>
 8002a5e:	e7e4      	b.n	8002a2a <_vfiprintf_r+0x206>
 8002a60:	080053ac 	.word	0x080053ac
 8002a64:	080053cc 	.word	0x080053cc
 8002a68:	0800538c 	.word	0x0800538c
 8002a6c:	08004ce4 	.word	0x08004ce4
 8002a70:	08004cee 	.word	0x08004cee
 8002a74:	00000000 	.word	0x00000000
 8002a78:	080027ff 	.word	0x080027ff
 8002a7c:	08004cea 	.word	0x08004cea

08002a80 <_sbrk_r>:
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	4d06      	ldr	r5, [pc, #24]	; (8002a9c <_sbrk_r+0x1c>)
 8002a84:	2300      	movs	r3, #0
 8002a86:	4604      	mov	r4, r0
 8002a88:	4608      	mov	r0, r1
 8002a8a:	602b      	str	r3, [r5, #0]
 8002a8c:	f001 fe84 	bl	8004798 <_sbrk>
 8002a90:	1c43      	adds	r3, r0, #1
 8002a92:	d102      	bne.n	8002a9a <_sbrk_r+0x1a>
 8002a94:	682b      	ldr	r3, [r5, #0]
 8002a96:	b103      	cbz	r3, 8002a9a <_sbrk_r+0x1a>
 8002a98:	6023      	str	r3, [r4, #0]
 8002a9a:	bd38      	pop	{r3, r4, r5, pc}
 8002a9c:	20000d10 	.word	0x20000d10

08002aa0 <siprintf>:
 8002aa0:	b40e      	push	{r1, r2, r3}
 8002aa2:	b500      	push	{lr}
 8002aa4:	b09c      	sub	sp, #112	; 0x70
 8002aa6:	ab1d      	add	r3, sp, #116	; 0x74
 8002aa8:	9002      	str	r0, [sp, #8]
 8002aaa:	9006      	str	r0, [sp, #24]
 8002aac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ab0:	4809      	ldr	r0, [pc, #36]	; (8002ad8 <siprintf+0x38>)
 8002ab2:	9107      	str	r1, [sp, #28]
 8002ab4:	9104      	str	r1, [sp, #16]
 8002ab6:	4909      	ldr	r1, [pc, #36]	; (8002adc <siprintf+0x3c>)
 8002ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002abc:	9105      	str	r1, [sp, #20]
 8002abe:	6800      	ldr	r0, [r0, #0]
 8002ac0:	9301      	str	r3, [sp, #4]
 8002ac2:	a902      	add	r1, sp, #8
 8002ac4:	f000 fe96 	bl	80037f4 <_svfiprintf_r>
 8002ac8:	9b02      	ldr	r3, [sp, #8]
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	b01c      	add	sp, #112	; 0x70
 8002ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ad4:	b003      	add	sp, #12
 8002ad6:	4770      	bx	lr
 8002ad8:	20000060 	.word	0x20000060
 8002adc:	ffff0208 	.word	0xffff0208

08002ae0 <siscanf>:
 8002ae0:	b40e      	push	{r1, r2, r3}
 8002ae2:	b510      	push	{r4, lr}
 8002ae4:	b09f      	sub	sp, #124	; 0x7c
 8002ae6:	ac21      	add	r4, sp, #132	; 0x84
 8002ae8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8002aec:	f854 2b04 	ldr.w	r2, [r4], #4
 8002af0:	9201      	str	r2, [sp, #4]
 8002af2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8002af6:	9004      	str	r0, [sp, #16]
 8002af8:	9008      	str	r0, [sp, #32]
 8002afa:	f7fd fb61 	bl	80001c0 <strlen>
 8002afe:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <siscanf+0x50>)
 8002b00:	9005      	str	r0, [sp, #20]
 8002b02:	9009      	str	r0, [sp, #36]	; 0x24
 8002b04:	930d      	str	r3, [sp, #52]	; 0x34
 8002b06:	480b      	ldr	r0, [pc, #44]	; (8002b34 <siscanf+0x54>)
 8002b08:	9a01      	ldr	r2, [sp, #4]
 8002b0a:	6800      	ldr	r0, [r0, #0]
 8002b0c:	9403      	str	r4, [sp, #12]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	9311      	str	r3, [sp, #68]	; 0x44
 8002b12:	9316      	str	r3, [sp, #88]	; 0x58
 8002b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b18:	f8ad 301e 	strh.w	r3, [sp, #30]
 8002b1c:	a904      	add	r1, sp, #16
 8002b1e:	4623      	mov	r3, r4
 8002b20:	f000 ffc0 	bl	8003aa4 <__ssvfiscanf_r>
 8002b24:	b01f      	add	sp, #124	; 0x7c
 8002b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b2a:	b003      	add	sp, #12
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	08002b5b 	.word	0x08002b5b
 8002b34:	20000060 	.word	0x20000060

08002b38 <__sread>:
 8002b38:	b510      	push	{r4, lr}
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b40:	f001 fc06 	bl	8004350 <_read_r>
 8002b44:	2800      	cmp	r0, #0
 8002b46:	bfab      	itete	ge
 8002b48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b4a:	89a3      	ldrhlt	r3, [r4, #12]
 8002b4c:	181b      	addge	r3, r3, r0
 8002b4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b52:	bfac      	ite	ge
 8002b54:	6563      	strge	r3, [r4, #84]	; 0x54
 8002b56:	81a3      	strhlt	r3, [r4, #12]
 8002b58:	bd10      	pop	{r4, pc}

08002b5a <__seofread>:
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	4770      	bx	lr

08002b5e <__swrite>:
 8002b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b62:	461f      	mov	r7, r3
 8002b64:	898b      	ldrh	r3, [r1, #12]
 8002b66:	05db      	lsls	r3, r3, #23
 8002b68:	4605      	mov	r5, r0
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	4616      	mov	r6, r2
 8002b6e:	d505      	bpl.n	8002b7c <__swrite+0x1e>
 8002b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b74:	2302      	movs	r3, #2
 8002b76:	2200      	movs	r2, #0
 8002b78:	f000 fcc8 	bl	800350c <_lseek_r>
 8002b7c:	89a3      	ldrh	r3, [r4, #12]
 8002b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b86:	81a3      	strh	r3, [r4, #12]
 8002b88:	4632      	mov	r2, r6
 8002b8a:	463b      	mov	r3, r7
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b92:	f000 ba69 	b.w	8003068 <_write_r>

08002b96 <__sseek>:
 8002b96:	b510      	push	{r4, lr}
 8002b98:	460c      	mov	r4, r1
 8002b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b9e:	f000 fcb5 	bl	800350c <_lseek_r>
 8002ba2:	1c43      	adds	r3, r0, #1
 8002ba4:	89a3      	ldrh	r3, [r4, #12]
 8002ba6:	bf15      	itete	ne
 8002ba8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002baa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002bae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002bb2:	81a3      	strheq	r3, [r4, #12]
 8002bb4:	bf18      	it	ne
 8002bb6:	81a3      	strhne	r3, [r4, #12]
 8002bb8:	bd10      	pop	{r4, pc}

08002bba <__sclose>:
 8002bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bbe:	f000 badb 	b.w	8003178 <_close_r>

08002bc2 <strcat>:
 8002bc2:	b510      	push	{r4, lr}
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	7814      	ldrb	r4, [r2, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	3201      	adds	r2, #1
 8002bcc:	2c00      	cmp	r4, #0
 8002bce:	d1fa      	bne.n	8002bc6 <strcat+0x4>
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002bd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002bda:	2a00      	cmp	r2, #0
 8002bdc:	d1f9      	bne.n	8002bd2 <strcat+0x10>
 8002bde:	bd10      	pop	{r4, pc}

08002be0 <_strerror_r>:
 8002be0:	b510      	push	{r4, lr}
 8002be2:	4604      	mov	r4, r0
 8002be4:	4608      	mov	r0, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	288e      	cmp	r0, #142	; 0x8e
 8002bea:	f200 8130 	bhi.w	8002e4e <_strerror_r+0x26e>
 8002bee:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002bf2:	0139      	.short	0x0139
 8002bf4:	0092008f 	.word	0x0092008f
 8002bf8:	00960094 	.word	0x00960094
 8002bfc:	009a0098 	.word	0x009a0098
 8002c00:	009e009c 	.word	0x009e009c
 8002c04:	00a400a2 	.word	0x00a400a2
 8002c08:	00aa00a8 	.word	0x00aa00a8
 8002c0c:	00ae00ac 	.word	0x00ae00ac
 8002c10:	00b0012e 	.word	0x00b0012e
 8002c14:	00b400b2 	.word	0x00b400b2
 8002c18:	00b800b6 	.word	0x00b800b6
 8002c1c:	00c000be 	.word	0x00c000be
 8002c20:	00c800c6 	.word	0x00c800c6
 8002c24:	00cc00ca 	.word	0x00cc00ca
 8002c28:	00d200ce 	.word	0x00d200ce
 8002c2c:	00d800d6 	.word	0x00d800d6
 8002c30:	00dc00da 	.word	0x00dc00da
 8002c34:	00e000de 	.word	0x00e000de
 8002c38:	00e400e2 	.word	0x00e400e2
 8002c3c:	012e012e 	.word	0x012e012e
 8002c40:	012e012e 	.word	0x012e012e
 8002c44:	012e012e 	.word	0x012e012e
 8002c48:	012e012e 	.word	0x012e012e
 8002c4c:	00ec00e8 	.word	0x00ec00e8
 8002c50:	012e012e 	.word	0x012e012e
 8002c54:	012e012e 	.word	0x012e012e
 8002c58:	012e012e 	.word	0x012e012e
 8002c5c:	012e012e 	.word	0x012e012e
 8002c60:	012e012e 	.word	0x012e012e
 8002c64:	012e012e 	.word	0x012e012e
 8002c68:	00ee012e 	.word	0x00ee012e
 8002c6c:	00f00108 	.word	0x00f00108
 8002c70:	012e00f2 	.word	0x012e00f2
 8002c74:	012e012e 	.word	0x012e012e
 8002c78:	012e00f4 	.word	0x012e00f4
 8002c7c:	012e012e 	.word	0x012e012e
 8002c80:	012e00f6 	.word	0x012e00f6
 8002c84:	00fa012e 	.word	0x00fa012e
 8002c88:	012e012e 	.word	0x012e012e
 8002c8c:	012e00fc 	.word	0x012e00fc
 8002c90:	012e012e 	.word	0x012e012e
 8002c94:	012e012e 	.word	0x012e012e
 8002c98:	012e012e 	.word	0x012e012e
 8002c9c:	012e012e 	.word	0x012e012e
 8002ca0:	00fe012e 	.word	0x00fe012e
 8002ca4:	0100012e 	.word	0x0100012e
 8002ca8:	01040102 	.word	0x01040102
 8002cac:	012e012e 	.word	0x012e012e
 8002cb0:	012e0126 	.word	0x012e0126
 8002cb4:	012e012e 	.word	0x012e012e
 8002cb8:	012e012e 	.word	0x012e012e
 8002cbc:	012e012e 	.word	0x012e012e
 8002cc0:	0114012e 	.word	0x0114012e
 8002cc4:	010a0106 	.word	0x010a0106
 8002cc8:	010e010c 	.word	0x010e010c
 8002ccc:	012e0110 	.word	0x012e0110
 8002cd0:	01160112 	.word	0x01160112
 8002cd4:	00ea011a 	.word	0x00ea011a
 8002cd8:	012c00c2 	.word	0x012c00c2
 8002cdc:	00d000ba 	.word	0x00d000ba
 8002ce0:	00a000bc 	.word	0x00a000bc
 8002ce4:	012a00a6 	.word	0x012a00a6
 8002ce8:	012e00f8 	.word	0x012e00f8
 8002cec:	00c40118 	.word	0x00c40118
 8002cf0:	011c011e 	.word	0x011c011e
 8002cf4:	012e012e 	.word	0x012e012e
 8002cf8:	012e012e 	.word	0x012e012e
 8002cfc:	00d4012e 	.word	0x00d4012e
 8002d00:	012e012e 	.word	0x012e012e
 8002d04:	00e6012e 	.word	0x00e6012e
 8002d08:	01200128 	.word	0x01200128
 8002d0c:	01240122 	.word	0x01240122
 8002d10:	4b55      	ldr	r3, [pc, #340]	; (8002e68 <_strerror_r+0x288>)
 8002d12:	4618      	mov	r0, r3
 8002d14:	bd10      	pop	{r4, pc}
 8002d16:	4b55      	ldr	r3, [pc, #340]	; (8002e6c <_strerror_r+0x28c>)
 8002d18:	e7fb      	b.n	8002d12 <_strerror_r+0x132>
 8002d1a:	4b55      	ldr	r3, [pc, #340]	; (8002e70 <_strerror_r+0x290>)
 8002d1c:	e7f9      	b.n	8002d12 <_strerror_r+0x132>
 8002d1e:	4b55      	ldr	r3, [pc, #340]	; (8002e74 <_strerror_r+0x294>)
 8002d20:	e7f7      	b.n	8002d12 <_strerror_r+0x132>
 8002d22:	4b55      	ldr	r3, [pc, #340]	; (8002e78 <_strerror_r+0x298>)
 8002d24:	e7f5      	b.n	8002d12 <_strerror_r+0x132>
 8002d26:	4b55      	ldr	r3, [pc, #340]	; (8002e7c <_strerror_r+0x29c>)
 8002d28:	e7f3      	b.n	8002d12 <_strerror_r+0x132>
 8002d2a:	4b55      	ldr	r3, [pc, #340]	; (8002e80 <_strerror_r+0x2a0>)
 8002d2c:	e7f1      	b.n	8002d12 <_strerror_r+0x132>
 8002d2e:	4b55      	ldr	r3, [pc, #340]	; (8002e84 <_strerror_r+0x2a4>)
 8002d30:	e7ef      	b.n	8002d12 <_strerror_r+0x132>
 8002d32:	4b55      	ldr	r3, [pc, #340]	; (8002e88 <_strerror_r+0x2a8>)
 8002d34:	e7ed      	b.n	8002d12 <_strerror_r+0x132>
 8002d36:	4b55      	ldr	r3, [pc, #340]	; (8002e8c <_strerror_r+0x2ac>)
 8002d38:	e7eb      	b.n	8002d12 <_strerror_r+0x132>
 8002d3a:	4b55      	ldr	r3, [pc, #340]	; (8002e90 <_strerror_r+0x2b0>)
 8002d3c:	e7e9      	b.n	8002d12 <_strerror_r+0x132>
 8002d3e:	4b55      	ldr	r3, [pc, #340]	; (8002e94 <_strerror_r+0x2b4>)
 8002d40:	e7e7      	b.n	8002d12 <_strerror_r+0x132>
 8002d42:	4b55      	ldr	r3, [pc, #340]	; (8002e98 <_strerror_r+0x2b8>)
 8002d44:	e7e5      	b.n	8002d12 <_strerror_r+0x132>
 8002d46:	4b55      	ldr	r3, [pc, #340]	; (8002e9c <_strerror_r+0x2bc>)
 8002d48:	e7e3      	b.n	8002d12 <_strerror_r+0x132>
 8002d4a:	4b55      	ldr	r3, [pc, #340]	; (8002ea0 <_strerror_r+0x2c0>)
 8002d4c:	e7e1      	b.n	8002d12 <_strerror_r+0x132>
 8002d4e:	4b55      	ldr	r3, [pc, #340]	; (8002ea4 <_strerror_r+0x2c4>)
 8002d50:	e7df      	b.n	8002d12 <_strerror_r+0x132>
 8002d52:	4b55      	ldr	r3, [pc, #340]	; (8002ea8 <_strerror_r+0x2c8>)
 8002d54:	e7dd      	b.n	8002d12 <_strerror_r+0x132>
 8002d56:	4b55      	ldr	r3, [pc, #340]	; (8002eac <_strerror_r+0x2cc>)
 8002d58:	e7db      	b.n	8002d12 <_strerror_r+0x132>
 8002d5a:	4b55      	ldr	r3, [pc, #340]	; (8002eb0 <_strerror_r+0x2d0>)
 8002d5c:	e7d9      	b.n	8002d12 <_strerror_r+0x132>
 8002d5e:	4b55      	ldr	r3, [pc, #340]	; (8002eb4 <_strerror_r+0x2d4>)
 8002d60:	e7d7      	b.n	8002d12 <_strerror_r+0x132>
 8002d62:	4b55      	ldr	r3, [pc, #340]	; (8002eb8 <_strerror_r+0x2d8>)
 8002d64:	e7d5      	b.n	8002d12 <_strerror_r+0x132>
 8002d66:	4b55      	ldr	r3, [pc, #340]	; (8002ebc <_strerror_r+0x2dc>)
 8002d68:	e7d3      	b.n	8002d12 <_strerror_r+0x132>
 8002d6a:	4b55      	ldr	r3, [pc, #340]	; (8002ec0 <_strerror_r+0x2e0>)
 8002d6c:	e7d1      	b.n	8002d12 <_strerror_r+0x132>
 8002d6e:	4b55      	ldr	r3, [pc, #340]	; (8002ec4 <_strerror_r+0x2e4>)
 8002d70:	e7cf      	b.n	8002d12 <_strerror_r+0x132>
 8002d72:	4b55      	ldr	r3, [pc, #340]	; (8002ec8 <_strerror_r+0x2e8>)
 8002d74:	e7cd      	b.n	8002d12 <_strerror_r+0x132>
 8002d76:	4b55      	ldr	r3, [pc, #340]	; (8002ecc <_strerror_r+0x2ec>)
 8002d78:	e7cb      	b.n	8002d12 <_strerror_r+0x132>
 8002d7a:	4b55      	ldr	r3, [pc, #340]	; (8002ed0 <_strerror_r+0x2f0>)
 8002d7c:	e7c9      	b.n	8002d12 <_strerror_r+0x132>
 8002d7e:	4b55      	ldr	r3, [pc, #340]	; (8002ed4 <_strerror_r+0x2f4>)
 8002d80:	e7c7      	b.n	8002d12 <_strerror_r+0x132>
 8002d82:	4b55      	ldr	r3, [pc, #340]	; (8002ed8 <_strerror_r+0x2f8>)
 8002d84:	e7c5      	b.n	8002d12 <_strerror_r+0x132>
 8002d86:	4b55      	ldr	r3, [pc, #340]	; (8002edc <_strerror_r+0x2fc>)
 8002d88:	e7c3      	b.n	8002d12 <_strerror_r+0x132>
 8002d8a:	4b55      	ldr	r3, [pc, #340]	; (8002ee0 <_strerror_r+0x300>)
 8002d8c:	e7c1      	b.n	8002d12 <_strerror_r+0x132>
 8002d8e:	4b55      	ldr	r3, [pc, #340]	; (8002ee4 <_strerror_r+0x304>)
 8002d90:	e7bf      	b.n	8002d12 <_strerror_r+0x132>
 8002d92:	4b55      	ldr	r3, [pc, #340]	; (8002ee8 <_strerror_r+0x308>)
 8002d94:	e7bd      	b.n	8002d12 <_strerror_r+0x132>
 8002d96:	4b55      	ldr	r3, [pc, #340]	; (8002eec <_strerror_r+0x30c>)
 8002d98:	e7bb      	b.n	8002d12 <_strerror_r+0x132>
 8002d9a:	4b55      	ldr	r3, [pc, #340]	; (8002ef0 <_strerror_r+0x310>)
 8002d9c:	e7b9      	b.n	8002d12 <_strerror_r+0x132>
 8002d9e:	4b55      	ldr	r3, [pc, #340]	; (8002ef4 <_strerror_r+0x314>)
 8002da0:	e7b7      	b.n	8002d12 <_strerror_r+0x132>
 8002da2:	4b55      	ldr	r3, [pc, #340]	; (8002ef8 <_strerror_r+0x318>)
 8002da4:	e7b5      	b.n	8002d12 <_strerror_r+0x132>
 8002da6:	4b55      	ldr	r3, [pc, #340]	; (8002efc <_strerror_r+0x31c>)
 8002da8:	e7b3      	b.n	8002d12 <_strerror_r+0x132>
 8002daa:	4b55      	ldr	r3, [pc, #340]	; (8002f00 <_strerror_r+0x320>)
 8002dac:	e7b1      	b.n	8002d12 <_strerror_r+0x132>
 8002dae:	4b55      	ldr	r3, [pc, #340]	; (8002f04 <_strerror_r+0x324>)
 8002db0:	e7af      	b.n	8002d12 <_strerror_r+0x132>
 8002db2:	4b55      	ldr	r3, [pc, #340]	; (8002f08 <_strerror_r+0x328>)
 8002db4:	e7ad      	b.n	8002d12 <_strerror_r+0x132>
 8002db6:	4b55      	ldr	r3, [pc, #340]	; (8002f0c <_strerror_r+0x32c>)
 8002db8:	e7ab      	b.n	8002d12 <_strerror_r+0x132>
 8002dba:	4b55      	ldr	r3, [pc, #340]	; (8002f10 <_strerror_r+0x330>)
 8002dbc:	e7a9      	b.n	8002d12 <_strerror_r+0x132>
 8002dbe:	4b55      	ldr	r3, [pc, #340]	; (8002f14 <_strerror_r+0x334>)
 8002dc0:	e7a7      	b.n	8002d12 <_strerror_r+0x132>
 8002dc2:	4b55      	ldr	r3, [pc, #340]	; (8002f18 <_strerror_r+0x338>)
 8002dc4:	e7a5      	b.n	8002d12 <_strerror_r+0x132>
 8002dc6:	4b55      	ldr	r3, [pc, #340]	; (8002f1c <_strerror_r+0x33c>)
 8002dc8:	e7a3      	b.n	8002d12 <_strerror_r+0x132>
 8002dca:	4b55      	ldr	r3, [pc, #340]	; (8002f20 <_strerror_r+0x340>)
 8002dcc:	e7a1      	b.n	8002d12 <_strerror_r+0x132>
 8002dce:	4b55      	ldr	r3, [pc, #340]	; (8002f24 <_strerror_r+0x344>)
 8002dd0:	e79f      	b.n	8002d12 <_strerror_r+0x132>
 8002dd2:	4b55      	ldr	r3, [pc, #340]	; (8002f28 <_strerror_r+0x348>)
 8002dd4:	e79d      	b.n	8002d12 <_strerror_r+0x132>
 8002dd6:	4b55      	ldr	r3, [pc, #340]	; (8002f2c <_strerror_r+0x34c>)
 8002dd8:	e79b      	b.n	8002d12 <_strerror_r+0x132>
 8002dda:	4b55      	ldr	r3, [pc, #340]	; (8002f30 <_strerror_r+0x350>)
 8002ddc:	e799      	b.n	8002d12 <_strerror_r+0x132>
 8002dde:	4b55      	ldr	r3, [pc, #340]	; (8002f34 <_strerror_r+0x354>)
 8002de0:	e797      	b.n	8002d12 <_strerror_r+0x132>
 8002de2:	4b55      	ldr	r3, [pc, #340]	; (8002f38 <_strerror_r+0x358>)
 8002de4:	e795      	b.n	8002d12 <_strerror_r+0x132>
 8002de6:	4b55      	ldr	r3, [pc, #340]	; (8002f3c <_strerror_r+0x35c>)
 8002de8:	e793      	b.n	8002d12 <_strerror_r+0x132>
 8002dea:	4b55      	ldr	r3, [pc, #340]	; (8002f40 <_strerror_r+0x360>)
 8002dec:	e791      	b.n	8002d12 <_strerror_r+0x132>
 8002dee:	4b55      	ldr	r3, [pc, #340]	; (8002f44 <_strerror_r+0x364>)
 8002df0:	e78f      	b.n	8002d12 <_strerror_r+0x132>
 8002df2:	4b55      	ldr	r3, [pc, #340]	; (8002f48 <_strerror_r+0x368>)
 8002df4:	e78d      	b.n	8002d12 <_strerror_r+0x132>
 8002df6:	4b55      	ldr	r3, [pc, #340]	; (8002f4c <_strerror_r+0x36c>)
 8002df8:	e78b      	b.n	8002d12 <_strerror_r+0x132>
 8002dfa:	4b55      	ldr	r3, [pc, #340]	; (8002f50 <_strerror_r+0x370>)
 8002dfc:	e789      	b.n	8002d12 <_strerror_r+0x132>
 8002dfe:	4b55      	ldr	r3, [pc, #340]	; (8002f54 <_strerror_r+0x374>)
 8002e00:	e787      	b.n	8002d12 <_strerror_r+0x132>
 8002e02:	4b55      	ldr	r3, [pc, #340]	; (8002f58 <_strerror_r+0x378>)
 8002e04:	e785      	b.n	8002d12 <_strerror_r+0x132>
 8002e06:	4b55      	ldr	r3, [pc, #340]	; (8002f5c <_strerror_r+0x37c>)
 8002e08:	e783      	b.n	8002d12 <_strerror_r+0x132>
 8002e0a:	4b55      	ldr	r3, [pc, #340]	; (8002f60 <_strerror_r+0x380>)
 8002e0c:	e781      	b.n	8002d12 <_strerror_r+0x132>
 8002e0e:	4b55      	ldr	r3, [pc, #340]	; (8002f64 <_strerror_r+0x384>)
 8002e10:	e77f      	b.n	8002d12 <_strerror_r+0x132>
 8002e12:	4b55      	ldr	r3, [pc, #340]	; (8002f68 <_strerror_r+0x388>)
 8002e14:	e77d      	b.n	8002d12 <_strerror_r+0x132>
 8002e16:	4b55      	ldr	r3, [pc, #340]	; (8002f6c <_strerror_r+0x38c>)
 8002e18:	e77b      	b.n	8002d12 <_strerror_r+0x132>
 8002e1a:	4b55      	ldr	r3, [pc, #340]	; (8002f70 <_strerror_r+0x390>)
 8002e1c:	e779      	b.n	8002d12 <_strerror_r+0x132>
 8002e1e:	4b55      	ldr	r3, [pc, #340]	; (8002f74 <_strerror_r+0x394>)
 8002e20:	e777      	b.n	8002d12 <_strerror_r+0x132>
 8002e22:	4b55      	ldr	r3, [pc, #340]	; (8002f78 <_strerror_r+0x398>)
 8002e24:	e775      	b.n	8002d12 <_strerror_r+0x132>
 8002e26:	4b55      	ldr	r3, [pc, #340]	; (8002f7c <_strerror_r+0x39c>)
 8002e28:	e773      	b.n	8002d12 <_strerror_r+0x132>
 8002e2a:	4b55      	ldr	r3, [pc, #340]	; (8002f80 <_strerror_r+0x3a0>)
 8002e2c:	e771      	b.n	8002d12 <_strerror_r+0x132>
 8002e2e:	4b55      	ldr	r3, [pc, #340]	; (8002f84 <_strerror_r+0x3a4>)
 8002e30:	e76f      	b.n	8002d12 <_strerror_r+0x132>
 8002e32:	4b55      	ldr	r3, [pc, #340]	; (8002f88 <_strerror_r+0x3a8>)
 8002e34:	e76d      	b.n	8002d12 <_strerror_r+0x132>
 8002e36:	4b55      	ldr	r3, [pc, #340]	; (8002f8c <_strerror_r+0x3ac>)
 8002e38:	e76b      	b.n	8002d12 <_strerror_r+0x132>
 8002e3a:	4b55      	ldr	r3, [pc, #340]	; (8002f90 <_strerror_r+0x3b0>)
 8002e3c:	e769      	b.n	8002d12 <_strerror_r+0x132>
 8002e3e:	4b55      	ldr	r3, [pc, #340]	; (8002f94 <_strerror_r+0x3b4>)
 8002e40:	e767      	b.n	8002d12 <_strerror_r+0x132>
 8002e42:	4b55      	ldr	r3, [pc, #340]	; (8002f98 <_strerror_r+0x3b8>)
 8002e44:	e765      	b.n	8002d12 <_strerror_r+0x132>
 8002e46:	4b55      	ldr	r3, [pc, #340]	; (8002f9c <_strerror_r+0x3bc>)
 8002e48:	e763      	b.n	8002d12 <_strerror_r+0x132>
 8002e4a:	4b55      	ldr	r3, [pc, #340]	; (8002fa0 <_strerror_r+0x3c0>)
 8002e4c:	e761      	b.n	8002d12 <_strerror_r+0x132>
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf14      	ite	ne
 8002e52:	461a      	movne	r2, r3
 8002e54:	4622      	moveq	r2, r4
 8002e56:	f000 f8b3 	bl	8002fc0 <_user_strerror>
 8002e5a:	4b52      	ldr	r3, [pc, #328]	; (8002fa4 <_strerror_r+0x3c4>)
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	bf18      	it	ne
 8002e60:	4603      	movne	r3, r0
 8002e62:	e756      	b.n	8002d12 <_strerror_r+0x132>
 8002e64:	4b50      	ldr	r3, [pc, #320]	; (8002fa8 <_strerror_r+0x3c8>)
 8002e66:	e754      	b.n	8002d12 <_strerror_r+0x132>
 8002e68:	08004cfd 	.word	0x08004cfd
 8002e6c:	08004d07 	.word	0x08004d07
 8002e70:	08004d21 	.word	0x08004d21
 8002e74:	08004d31 	.word	0x08004d31
 8002e78:	08004d49 	.word	0x08004d49
 8002e7c:	08004d53 	.word	0x08004d53
 8002e80:	08004d6d 	.word	0x08004d6d
 8002e84:	08004d7f 	.word	0x08004d7f
 8002e88:	08004d91 	.word	0x08004d91
 8002e8c:	08004daa 	.word	0x08004daa
 8002e90:	08004dba 	.word	0x08004dba
 8002e94:	08004dc6 	.word	0x08004dc6
 8002e98:	08004de3 	.word	0x08004de3
 8002e9c:	08004df5 	.word	0x08004df5
 8002ea0:	08004e06 	.word	0x08004e06
 8002ea4:	08004e18 	.word	0x08004e18
 8002ea8:	08004e24 	.word	0x08004e24
 8002eac:	08004e3c 	.word	0x08004e3c
 8002eb0:	08004e48 	.word	0x08004e48
 8002eb4:	08004e5a 	.word	0x08004e5a
 8002eb8:	08004e69 	.word	0x08004e69
 8002ebc:	08004e79 	.word	0x08004e79
 8002ec0:	08004e86 	.word	0x08004e86
 8002ec4:	08004ea5 	.word	0x08004ea5
 8002ec8:	08004eb4 	.word	0x08004eb4
 8002ecc:	08004ec5 	.word	0x08004ec5
 8002ed0:	08004ee9 	.word	0x08004ee9
 8002ed4:	08004f07 	.word	0x08004f07
 8002ed8:	08004f25 	.word	0x08004f25
 8002edc:	08004f45 	.word	0x08004f45
 8002ee0:	08004f5c 	.word	0x08004f5c
 8002ee4:	08004f6b 	.word	0x08004f6b
 8002ee8:	08004f7a 	.word	0x08004f7a
 8002eec:	08004f8e 	.word	0x08004f8e
 8002ef0:	08004fa6 	.word	0x08004fa6
 8002ef4:	08004fb4 	.word	0x08004fb4
 8002ef8:	08004fc1 	.word	0x08004fc1
 8002efc:	08004fd7 	.word	0x08004fd7
 8002f00:	08004fe6 	.word	0x08004fe6
 8002f04:	08004ff2 	.word	0x08004ff2
 8002f08:	08005021 	.word	0x08005021
 8002f0c:	08005032 	.word	0x08005032
 8002f10:	0800504d 	.word	0x0800504d
 8002f14:	08005060 	.word	0x08005060
 8002f18:	08005076 	.word	0x08005076
 8002f1c:	0800507f 	.word	0x0800507f
 8002f20:	08005096 	.word	0x08005096
 8002f24:	0800509e 	.word	0x0800509e
 8002f28:	080050ab 	.word	0x080050ab
 8002f2c:	080050c0 	.word	0x080050c0
 8002f30:	080050d4 	.word	0x080050d4
 8002f34:	080050ec 	.word	0x080050ec
 8002f38:	080050fb 	.word	0x080050fb
 8002f3c:	0800510c 	.word	0x0800510c
 8002f40:	0800511f 	.word	0x0800511f
 8002f44:	0800512b 	.word	0x0800512b
 8002f48:	08005144 	.word	0x08005144
 8002f4c:	08005158 	.word	0x08005158
 8002f50:	08005173 	.word	0x08005173
 8002f54:	0800518b 	.word	0x0800518b
 8002f58:	080051a5 	.word	0x080051a5
 8002f5c:	080051ad 	.word	0x080051ad
 8002f60:	080051dd 	.word	0x080051dd
 8002f64:	080051fc 	.word	0x080051fc
 8002f68:	0800521b 	.word	0x0800521b
 8002f6c:	08005232 	.word	0x08005232
 8002f70:	08005245 	.word	0x08005245
 8002f74:	0800525e 	.word	0x0800525e
 8002f78:	08005275 	.word	0x08005275
 8002f7c:	0800528b 	.word	0x0800528b
 8002f80:	080052ac 	.word	0x080052ac
 8002f84:	080052c4 	.word	0x080052c4
 8002f88:	080052e0 	.word	0x080052e0
 8002f8c:	080052f3 	.word	0x080052f3
 8002f90:	08005309 	.word	0x08005309
 8002f94:	0800531d 	.word	0x0800531d
 8002f98:	0800533f 	.word	0x0800533f
 8002f9c:	08005365 	.word	0x08005365
 8002fa0:	08005376 	.word	0x08005376
 8002fa4:	08004cdd 	.word	0x08004cdd
 8002fa8:	08004cf5 	.word	0x08004cf5

08002fac <strerror>:
 8002fac:	4601      	mov	r1, r0
 8002fae:	4803      	ldr	r0, [pc, #12]	; (8002fbc <strerror+0x10>)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	6800      	ldr	r0, [r0, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	f7ff be13 	b.w	8002be0 <_strerror_r>
 8002fba:	bf00      	nop
 8002fbc:	20000060 	.word	0x20000060

08002fc0 <_user_strerror>:
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	4770      	bx	lr

08002fc4 <__swbuf_r>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	460e      	mov	r6, r1
 8002fc8:	4614      	mov	r4, r2
 8002fca:	4605      	mov	r5, r0
 8002fcc:	b118      	cbz	r0, 8002fd6 <__swbuf_r+0x12>
 8002fce:	6983      	ldr	r3, [r0, #24]
 8002fd0:	b90b      	cbnz	r3, 8002fd6 <__swbuf_r+0x12>
 8002fd2:	f000 f9fb 	bl	80033cc <__sinit>
 8002fd6:	4b21      	ldr	r3, [pc, #132]	; (800305c <__swbuf_r+0x98>)
 8002fd8:	429c      	cmp	r4, r3
 8002fda:	d12b      	bne.n	8003034 <__swbuf_r+0x70>
 8002fdc:	686c      	ldr	r4, [r5, #4]
 8002fde:	69a3      	ldr	r3, [r4, #24]
 8002fe0:	60a3      	str	r3, [r4, #8]
 8002fe2:	89a3      	ldrh	r3, [r4, #12]
 8002fe4:	071a      	lsls	r2, r3, #28
 8002fe6:	d52f      	bpl.n	8003048 <__swbuf_r+0x84>
 8002fe8:	6923      	ldr	r3, [r4, #16]
 8002fea:	b36b      	cbz	r3, 8003048 <__swbuf_r+0x84>
 8002fec:	6923      	ldr	r3, [r4, #16]
 8002fee:	6820      	ldr	r0, [r4, #0]
 8002ff0:	1ac0      	subs	r0, r0, r3
 8002ff2:	6963      	ldr	r3, [r4, #20]
 8002ff4:	b2f6      	uxtb	r6, r6
 8002ff6:	4283      	cmp	r3, r0
 8002ff8:	4637      	mov	r7, r6
 8002ffa:	dc04      	bgt.n	8003006 <__swbuf_r+0x42>
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	4628      	mov	r0, r5
 8003000:	f000 f950 	bl	80032a4 <_fflush_r>
 8003004:	bb30      	cbnz	r0, 8003054 <__swbuf_r+0x90>
 8003006:	68a3      	ldr	r3, [r4, #8]
 8003008:	3b01      	subs	r3, #1
 800300a:	60a3      	str	r3, [r4, #8]
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	6022      	str	r2, [r4, #0]
 8003012:	701e      	strb	r6, [r3, #0]
 8003014:	6963      	ldr	r3, [r4, #20]
 8003016:	3001      	adds	r0, #1
 8003018:	4283      	cmp	r3, r0
 800301a:	d004      	beq.n	8003026 <__swbuf_r+0x62>
 800301c:	89a3      	ldrh	r3, [r4, #12]
 800301e:	07db      	lsls	r3, r3, #31
 8003020:	d506      	bpl.n	8003030 <__swbuf_r+0x6c>
 8003022:	2e0a      	cmp	r6, #10
 8003024:	d104      	bne.n	8003030 <__swbuf_r+0x6c>
 8003026:	4621      	mov	r1, r4
 8003028:	4628      	mov	r0, r5
 800302a:	f000 f93b 	bl	80032a4 <_fflush_r>
 800302e:	b988      	cbnz	r0, 8003054 <__swbuf_r+0x90>
 8003030:	4638      	mov	r0, r7
 8003032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003034:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <__swbuf_r+0x9c>)
 8003036:	429c      	cmp	r4, r3
 8003038:	d101      	bne.n	800303e <__swbuf_r+0x7a>
 800303a:	68ac      	ldr	r4, [r5, #8]
 800303c:	e7cf      	b.n	8002fde <__swbuf_r+0x1a>
 800303e:	4b09      	ldr	r3, [pc, #36]	; (8003064 <__swbuf_r+0xa0>)
 8003040:	429c      	cmp	r4, r3
 8003042:	bf08      	it	eq
 8003044:	68ec      	ldreq	r4, [r5, #12]
 8003046:	e7ca      	b.n	8002fde <__swbuf_r+0x1a>
 8003048:	4621      	mov	r1, r4
 800304a:	4628      	mov	r0, r5
 800304c:	f000 f81e 	bl	800308c <__swsetup_r>
 8003050:	2800      	cmp	r0, #0
 8003052:	d0cb      	beq.n	8002fec <__swbuf_r+0x28>
 8003054:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003058:	e7ea      	b.n	8003030 <__swbuf_r+0x6c>
 800305a:	bf00      	nop
 800305c:	080053ac 	.word	0x080053ac
 8003060:	080053cc 	.word	0x080053cc
 8003064:	0800538c 	.word	0x0800538c

08003068 <_write_r>:
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	4d07      	ldr	r5, [pc, #28]	; (8003088 <_write_r+0x20>)
 800306c:	4604      	mov	r4, r0
 800306e:	4608      	mov	r0, r1
 8003070:	4611      	mov	r1, r2
 8003072:	2200      	movs	r2, #0
 8003074:	602a      	str	r2, [r5, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	f001 fb9c 	bl	80047b4 <_write>
 800307c:	1c43      	adds	r3, r0, #1
 800307e:	d102      	bne.n	8003086 <_write_r+0x1e>
 8003080:	682b      	ldr	r3, [r5, #0]
 8003082:	b103      	cbz	r3, 8003086 <_write_r+0x1e>
 8003084:	6023      	str	r3, [r4, #0]
 8003086:	bd38      	pop	{r3, r4, r5, pc}
 8003088:	20000d10 	.word	0x20000d10

0800308c <__swsetup_r>:
 800308c:	4b32      	ldr	r3, [pc, #200]	; (8003158 <__swsetup_r+0xcc>)
 800308e:	b570      	push	{r4, r5, r6, lr}
 8003090:	681d      	ldr	r5, [r3, #0]
 8003092:	4606      	mov	r6, r0
 8003094:	460c      	mov	r4, r1
 8003096:	b125      	cbz	r5, 80030a2 <__swsetup_r+0x16>
 8003098:	69ab      	ldr	r3, [r5, #24]
 800309a:	b913      	cbnz	r3, 80030a2 <__swsetup_r+0x16>
 800309c:	4628      	mov	r0, r5
 800309e:	f000 f995 	bl	80033cc <__sinit>
 80030a2:	4b2e      	ldr	r3, [pc, #184]	; (800315c <__swsetup_r+0xd0>)
 80030a4:	429c      	cmp	r4, r3
 80030a6:	d10f      	bne.n	80030c8 <__swsetup_r+0x3c>
 80030a8:	686c      	ldr	r4, [r5, #4]
 80030aa:	89a3      	ldrh	r3, [r4, #12]
 80030ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030b0:	0719      	lsls	r1, r3, #28
 80030b2:	d42c      	bmi.n	800310e <__swsetup_r+0x82>
 80030b4:	06dd      	lsls	r5, r3, #27
 80030b6:	d411      	bmi.n	80030dc <__swsetup_r+0x50>
 80030b8:	2309      	movs	r3, #9
 80030ba:	6033      	str	r3, [r6, #0]
 80030bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80030c0:	81a3      	strh	r3, [r4, #12]
 80030c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030c6:	e03e      	b.n	8003146 <__swsetup_r+0xba>
 80030c8:	4b25      	ldr	r3, [pc, #148]	; (8003160 <__swsetup_r+0xd4>)
 80030ca:	429c      	cmp	r4, r3
 80030cc:	d101      	bne.n	80030d2 <__swsetup_r+0x46>
 80030ce:	68ac      	ldr	r4, [r5, #8]
 80030d0:	e7eb      	b.n	80030aa <__swsetup_r+0x1e>
 80030d2:	4b24      	ldr	r3, [pc, #144]	; (8003164 <__swsetup_r+0xd8>)
 80030d4:	429c      	cmp	r4, r3
 80030d6:	bf08      	it	eq
 80030d8:	68ec      	ldreq	r4, [r5, #12]
 80030da:	e7e6      	b.n	80030aa <__swsetup_r+0x1e>
 80030dc:	0758      	lsls	r0, r3, #29
 80030de:	d512      	bpl.n	8003106 <__swsetup_r+0x7a>
 80030e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030e2:	b141      	cbz	r1, 80030f6 <__swsetup_r+0x6a>
 80030e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030e8:	4299      	cmp	r1, r3
 80030ea:	d002      	beq.n	80030f2 <__swsetup_r+0x66>
 80030ec:	4630      	mov	r0, r6
 80030ee:	f000 faab 	bl	8003648 <_free_r>
 80030f2:	2300      	movs	r3, #0
 80030f4:	6363      	str	r3, [r4, #52]	; 0x34
 80030f6:	89a3      	ldrh	r3, [r4, #12]
 80030f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80030fc:	81a3      	strh	r3, [r4, #12]
 80030fe:	2300      	movs	r3, #0
 8003100:	6063      	str	r3, [r4, #4]
 8003102:	6923      	ldr	r3, [r4, #16]
 8003104:	6023      	str	r3, [r4, #0]
 8003106:	89a3      	ldrh	r3, [r4, #12]
 8003108:	f043 0308 	orr.w	r3, r3, #8
 800310c:	81a3      	strh	r3, [r4, #12]
 800310e:	6923      	ldr	r3, [r4, #16]
 8003110:	b94b      	cbnz	r3, 8003126 <__swsetup_r+0x9a>
 8003112:	89a3      	ldrh	r3, [r4, #12]
 8003114:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800311c:	d003      	beq.n	8003126 <__swsetup_r+0x9a>
 800311e:	4621      	mov	r1, r4
 8003120:	4630      	mov	r0, r6
 8003122:	f000 fa2b 	bl	800357c <__smakebuf_r>
 8003126:	89a0      	ldrh	r0, [r4, #12]
 8003128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800312c:	f010 0301 	ands.w	r3, r0, #1
 8003130:	d00a      	beq.n	8003148 <__swsetup_r+0xbc>
 8003132:	2300      	movs	r3, #0
 8003134:	60a3      	str	r3, [r4, #8]
 8003136:	6963      	ldr	r3, [r4, #20]
 8003138:	425b      	negs	r3, r3
 800313a:	61a3      	str	r3, [r4, #24]
 800313c:	6923      	ldr	r3, [r4, #16]
 800313e:	b943      	cbnz	r3, 8003152 <__swsetup_r+0xc6>
 8003140:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003144:	d1ba      	bne.n	80030bc <__swsetup_r+0x30>
 8003146:	bd70      	pop	{r4, r5, r6, pc}
 8003148:	0781      	lsls	r1, r0, #30
 800314a:	bf58      	it	pl
 800314c:	6963      	ldrpl	r3, [r4, #20]
 800314e:	60a3      	str	r3, [r4, #8]
 8003150:	e7f4      	b.n	800313c <__swsetup_r+0xb0>
 8003152:	2000      	movs	r0, #0
 8003154:	e7f7      	b.n	8003146 <__swsetup_r+0xba>
 8003156:	bf00      	nop
 8003158:	20000060 	.word	0x20000060
 800315c:	080053ac 	.word	0x080053ac
 8003160:	080053cc 	.word	0x080053cc
 8003164:	0800538c 	.word	0x0800538c

08003168 <abort>:
 8003168:	b508      	push	{r3, lr}
 800316a:	2006      	movs	r0, #6
 800316c:	f001 f964 	bl	8004438 <raise>
 8003170:	2001      	movs	r0, #1
 8003172:	f001 fb27 	bl	80047c4 <_exit>
	...

08003178 <_close_r>:
 8003178:	b538      	push	{r3, r4, r5, lr}
 800317a:	4d06      	ldr	r5, [pc, #24]	; (8003194 <_close_r+0x1c>)
 800317c:	2300      	movs	r3, #0
 800317e:	4604      	mov	r4, r0
 8003180:	4608      	mov	r0, r1
 8003182:	602b      	str	r3, [r5, #0]
 8003184:	f001 fad0 	bl	8004728 <_close>
 8003188:	1c43      	adds	r3, r0, #1
 800318a:	d102      	bne.n	8003192 <_close_r+0x1a>
 800318c:	682b      	ldr	r3, [r5, #0]
 800318e:	b103      	cbz	r3, 8003192 <_close_r+0x1a>
 8003190:	6023      	str	r3, [r4, #0]
 8003192:	bd38      	pop	{r3, r4, r5, pc}
 8003194:	20000d10 	.word	0x20000d10

08003198 <__sflush_r>:
 8003198:	898a      	ldrh	r2, [r1, #12]
 800319a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800319e:	4605      	mov	r5, r0
 80031a0:	0710      	lsls	r0, r2, #28
 80031a2:	460c      	mov	r4, r1
 80031a4:	d458      	bmi.n	8003258 <__sflush_r+0xc0>
 80031a6:	684b      	ldr	r3, [r1, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	dc05      	bgt.n	80031b8 <__sflush_r+0x20>
 80031ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	dc02      	bgt.n	80031b8 <__sflush_r+0x20>
 80031b2:	2000      	movs	r0, #0
 80031b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031ba:	2e00      	cmp	r6, #0
 80031bc:	d0f9      	beq.n	80031b2 <__sflush_r+0x1a>
 80031be:	2300      	movs	r3, #0
 80031c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80031c4:	682f      	ldr	r7, [r5, #0]
 80031c6:	6a21      	ldr	r1, [r4, #32]
 80031c8:	602b      	str	r3, [r5, #0]
 80031ca:	d032      	beq.n	8003232 <__sflush_r+0x9a>
 80031cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031ce:	89a3      	ldrh	r3, [r4, #12]
 80031d0:	075a      	lsls	r2, r3, #29
 80031d2:	d505      	bpl.n	80031e0 <__sflush_r+0x48>
 80031d4:	6863      	ldr	r3, [r4, #4]
 80031d6:	1ac0      	subs	r0, r0, r3
 80031d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031da:	b10b      	cbz	r3, 80031e0 <__sflush_r+0x48>
 80031dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031de:	1ac0      	subs	r0, r0, r3
 80031e0:	2300      	movs	r3, #0
 80031e2:	4602      	mov	r2, r0
 80031e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031e6:	6a21      	ldr	r1, [r4, #32]
 80031e8:	4628      	mov	r0, r5
 80031ea:	47b0      	blx	r6
 80031ec:	1c43      	adds	r3, r0, #1
 80031ee:	89a3      	ldrh	r3, [r4, #12]
 80031f0:	d106      	bne.n	8003200 <__sflush_r+0x68>
 80031f2:	6829      	ldr	r1, [r5, #0]
 80031f4:	291d      	cmp	r1, #29
 80031f6:	d82b      	bhi.n	8003250 <__sflush_r+0xb8>
 80031f8:	4a29      	ldr	r2, [pc, #164]	; (80032a0 <__sflush_r+0x108>)
 80031fa:	410a      	asrs	r2, r1
 80031fc:	07d6      	lsls	r6, r2, #31
 80031fe:	d427      	bmi.n	8003250 <__sflush_r+0xb8>
 8003200:	2200      	movs	r2, #0
 8003202:	6062      	str	r2, [r4, #4]
 8003204:	04d9      	lsls	r1, r3, #19
 8003206:	6922      	ldr	r2, [r4, #16]
 8003208:	6022      	str	r2, [r4, #0]
 800320a:	d504      	bpl.n	8003216 <__sflush_r+0x7e>
 800320c:	1c42      	adds	r2, r0, #1
 800320e:	d101      	bne.n	8003214 <__sflush_r+0x7c>
 8003210:	682b      	ldr	r3, [r5, #0]
 8003212:	b903      	cbnz	r3, 8003216 <__sflush_r+0x7e>
 8003214:	6560      	str	r0, [r4, #84]	; 0x54
 8003216:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003218:	602f      	str	r7, [r5, #0]
 800321a:	2900      	cmp	r1, #0
 800321c:	d0c9      	beq.n	80031b2 <__sflush_r+0x1a>
 800321e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003222:	4299      	cmp	r1, r3
 8003224:	d002      	beq.n	800322c <__sflush_r+0x94>
 8003226:	4628      	mov	r0, r5
 8003228:	f000 fa0e 	bl	8003648 <_free_r>
 800322c:	2000      	movs	r0, #0
 800322e:	6360      	str	r0, [r4, #52]	; 0x34
 8003230:	e7c0      	b.n	80031b4 <__sflush_r+0x1c>
 8003232:	2301      	movs	r3, #1
 8003234:	4628      	mov	r0, r5
 8003236:	47b0      	blx	r6
 8003238:	1c41      	adds	r1, r0, #1
 800323a:	d1c8      	bne.n	80031ce <__sflush_r+0x36>
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0c5      	beq.n	80031ce <__sflush_r+0x36>
 8003242:	2b1d      	cmp	r3, #29
 8003244:	d001      	beq.n	800324a <__sflush_r+0xb2>
 8003246:	2b16      	cmp	r3, #22
 8003248:	d101      	bne.n	800324e <__sflush_r+0xb6>
 800324a:	602f      	str	r7, [r5, #0]
 800324c:	e7b1      	b.n	80031b2 <__sflush_r+0x1a>
 800324e:	89a3      	ldrh	r3, [r4, #12]
 8003250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003254:	81a3      	strh	r3, [r4, #12]
 8003256:	e7ad      	b.n	80031b4 <__sflush_r+0x1c>
 8003258:	690f      	ldr	r7, [r1, #16]
 800325a:	2f00      	cmp	r7, #0
 800325c:	d0a9      	beq.n	80031b2 <__sflush_r+0x1a>
 800325e:	0793      	lsls	r3, r2, #30
 8003260:	680e      	ldr	r6, [r1, #0]
 8003262:	bf08      	it	eq
 8003264:	694b      	ldreq	r3, [r1, #20]
 8003266:	600f      	str	r7, [r1, #0]
 8003268:	bf18      	it	ne
 800326a:	2300      	movne	r3, #0
 800326c:	eba6 0807 	sub.w	r8, r6, r7
 8003270:	608b      	str	r3, [r1, #8]
 8003272:	f1b8 0f00 	cmp.w	r8, #0
 8003276:	dd9c      	ble.n	80031b2 <__sflush_r+0x1a>
 8003278:	6a21      	ldr	r1, [r4, #32]
 800327a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800327c:	4643      	mov	r3, r8
 800327e:	463a      	mov	r2, r7
 8003280:	4628      	mov	r0, r5
 8003282:	47b0      	blx	r6
 8003284:	2800      	cmp	r0, #0
 8003286:	dc06      	bgt.n	8003296 <__sflush_r+0xfe>
 8003288:	89a3      	ldrh	r3, [r4, #12]
 800328a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800328e:	81a3      	strh	r3, [r4, #12]
 8003290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003294:	e78e      	b.n	80031b4 <__sflush_r+0x1c>
 8003296:	4407      	add	r7, r0
 8003298:	eba8 0800 	sub.w	r8, r8, r0
 800329c:	e7e9      	b.n	8003272 <__sflush_r+0xda>
 800329e:	bf00      	nop
 80032a0:	dfbffffe 	.word	0xdfbffffe

080032a4 <_fflush_r>:
 80032a4:	b538      	push	{r3, r4, r5, lr}
 80032a6:	690b      	ldr	r3, [r1, #16]
 80032a8:	4605      	mov	r5, r0
 80032aa:	460c      	mov	r4, r1
 80032ac:	b913      	cbnz	r3, 80032b4 <_fflush_r+0x10>
 80032ae:	2500      	movs	r5, #0
 80032b0:	4628      	mov	r0, r5
 80032b2:	bd38      	pop	{r3, r4, r5, pc}
 80032b4:	b118      	cbz	r0, 80032be <_fflush_r+0x1a>
 80032b6:	6983      	ldr	r3, [r0, #24]
 80032b8:	b90b      	cbnz	r3, 80032be <_fflush_r+0x1a>
 80032ba:	f000 f887 	bl	80033cc <__sinit>
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <_fflush_r+0x6c>)
 80032c0:	429c      	cmp	r4, r3
 80032c2:	d11b      	bne.n	80032fc <_fflush_r+0x58>
 80032c4:	686c      	ldr	r4, [r5, #4]
 80032c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0ef      	beq.n	80032ae <_fflush_r+0xa>
 80032ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032d0:	07d0      	lsls	r0, r2, #31
 80032d2:	d404      	bmi.n	80032de <_fflush_r+0x3a>
 80032d4:	0599      	lsls	r1, r3, #22
 80032d6:	d402      	bmi.n	80032de <_fflush_r+0x3a>
 80032d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032da:	f000 f915 	bl	8003508 <__retarget_lock_acquire_recursive>
 80032de:	4628      	mov	r0, r5
 80032e0:	4621      	mov	r1, r4
 80032e2:	f7ff ff59 	bl	8003198 <__sflush_r>
 80032e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032e8:	07da      	lsls	r2, r3, #31
 80032ea:	4605      	mov	r5, r0
 80032ec:	d4e0      	bmi.n	80032b0 <_fflush_r+0xc>
 80032ee:	89a3      	ldrh	r3, [r4, #12]
 80032f0:	059b      	lsls	r3, r3, #22
 80032f2:	d4dd      	bmi.n	80032b0 <_fflush_r+0xc>
 80032f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032f6:	f000 f908 	bl	800350a <__retarget_lock_release_recursive>
 80032fa:	e7d9      	b.n	80032b0 <_fflush_r+0xc>
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <_fflush_r+0x70>)
 80032fe:	429c      	cmp	r4, r3
 8003300:	d101      	bne.n	8003306 <_fflush_r+0x62>
 8003302:	68ac      	ldr	r4, [r5, #8]
 8003304:	e7df      	b.n	80032c6 <_fflush_r+0x22>
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <_fflush_r+0x74>)
 8003308:	429c      	cmp	r4, r3
 800330a:	bf08      	it	eq
 800330c:	68ec      	ldreq	r4, [r5, #12]
 800330e:	e7da      	b.n	80032c6 <_fflush_r+0x22>
 8003310:	080053ac 	.word	0x080053ac
 8003314:	080053cc 	.word	0x080053cc
 8003318:	0800538c 	.word	0x0800538c

0800331c <std>:
 800331c:	2300      	movs	r3, #0
 800331e:	b510      	push	{r4, lr}
 8003320:	4604      	mov	r4, r0
 8003322:	e9c0 3300 	strd	r3, r3, [r0]
 8003326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800332a:	6083      	str	r3, [r0, #8]
 800332c:	8181      	strh	r1, [r0, #12]
 800332e:	6643      	str	r3, [r0, #100]	; 0x64
 8003330:	81c2      	strh	r2, [r0, #14]
 8003332:	6183      	str	r3, [r0, #24]
 8003334:	4619      	mov	r1, r3
 8003336:	2208      	movs	r2, #8
 8003338:	305c      	adds	r0, #92	; 0x5c
 800333a:	f7ff f9ad 	bl	8002698 <memset>
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <std+0x38>)
 8003340:	6263      	str	r3, [r4, #36]	; 0x24
 8003342:	4b05      	ldr	r3, [pc, #20]	; (8003358 <std+0x3c>)
 8003344:	62a3      	str	r3, [r4, #40]	; 0x28
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <std+0x40>)
 8003348:	62e3      	str	r3, [r4, #44]	; 0x2c
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <std+0x44>)
 800334c:	6224      	str	r4, [r4, #32]
 800334e:	6323      	str	r3, [r4, #48]	; 0x30
 8003350:	bd10      	pop	{r4, pc}
 8003352:	bf00      	nop
 8003354:	08002b39 	.word	0x08002b39
 8003358:	08002b5f 	.word	0x08002b5f
 800335c:	08002b97 	.word	0x08002b97
 8003360:	08002bbb 	.word	0x08002bbb

08003364 <_cleanup_r>:
 8003364:	4901      	ldr	r1, [pc, #4]	; (800336c <_cleanup_r+0x8>)
 8003366:	f000 b8af 	b.w	80034c8 <_fwalk_reent>
 800336a:	bf00      	nop
 800336c:	080032a5 	.word	0x080032a5

08003370 <__sfmoreglue>:
 8003370:	b570      	push	{r4, r5, r6, lr}
 8003372:	2368      	movs	r3, #104	; 0x68
 8003374:	1e4d      	subs	r5, r1, #1
 8003376:	435d      	muls	r5, r3
 8003378:	460e      	mov	r6, r1
 800337a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800337e:	f7ff f9b3 	bl	80026e8 <_malloc_r>
 8003382:	4604      	mov	r4, r0
 8003384:	b140      	cbz	r0, 8003398 <__sfmoreglue+0x28>
 8003386:	2100      	movs	r1, #0
 8003388:	e9c0 1600 	strd	r1, r6, [r0]
 800338c:	300c      	adds	r0, #12
 800338e:	60a0      	str	r0, [r4, #8]
 8003390:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003394:	f7ff f980 	bl	8002698 <memset>
 8003398:	4620      	mov	r0, r4
 800339a:	bd70      	pop	{r4, r5, r6, pc}

0800339c <__sfp_lock_acquire>:
 800339c:	4801      	ldr	r0, [pc, #4]	; (80033a4 <__sfp_lock_acquire+0x8>)
 800339e:	f000 b8b3 	b.w	8003508 <__retarget_lock_acquire_recursive>
 80033a2:	bf00      	nop
 80033a4:	20000d0d 	.word	0x20000d0d

080033a8 <__sfp_lock_release>:
 80033a8:	4801      	ldr	r0, [pc, #4]	; (80033b0 <__sfp_lock_release+0x8>)
 80033aa:	f000 b8ae 	b.w	800350a <__retarget_lock_release_recursive>
 80033ae:	bf00      	nop
 80033b0:	20000d0d 	.word	0x20000d0d

080033b4 <__sinit_lock_acquire>:
 80033b4:	4801      	ldr	r0, [pc, #4]	; (80033bc <__sinit_lock_acquire+0x8>)
 80033b6:	f000 b8a7 	b.w	8003508 <__retarget_lock_acquire_recursive>
 80033ba:	bf00      	nop
 80033bc:	20000d0e 	.word	0x20000d0e

080033c0 <__sinit_lock_release>:
 80033c0:	4801      	ldr	r0, [pc, #4]	; (80033c8 <__sinit_lock_release+0x8>)
 80033c2:	f000 b8a2 	b.w	800350a <__retarget_lock_release_recursive>
 80033c6:	bf00      	nop
 80033c8:	20000d0e 	.word	0x20000d0e

080033cc <__sinit>:
 80033cc:	b510      	push	{r4, lr}
 80033ce:	4604      	mov	r4, r0
 80033d0:	f7ff fff0 	bl	80033b4 <__sinit_lock_acquire>
 80033d4:	69a3      	ldr	r3, [r4, #24]
 80033d6:	b11b      	cbz	r3, 80033e0 <__sinit+0x14>
 80033d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033dc:	f7ff bff0 	b.w	80033c0 <__sinit_lock_release>
 80033e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033e4:	6523      	str	r3, [r4, #80]	; 0x50
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <__sinit+0x68>)
 80033e8:	4a13      	ldr	r2, [pc, #76]	; (8003438 <__sinit+0x6c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80033ee:	42a3      	cmp	r3, r4
 80033f0:	bf04      	itt	eq
 80033f2:	2301      	moveq	r3, #1
 80033f4:	61a3      	streq	r3, [r4, #24]
 80033f6:	4620      	mov	r0, r4
 80033f8:	f000 f820 	bl	800343c <__sfp>
 80033fc:	6060      	str	r0, [r4, #4]
 80033fe:	4620      	mov	r0, r4
 8003400:	f000 f81c 	bl	800343c <__sfp>
 8003404:	60a0      	str	r0, [r4, #8]
 8003406:	4620      	mov	r0, r4
 8003408:	f000 f818 	bl	800343c <__sfp>
 800340c:	2200      	movs	r2, #0
 800340e:	60e0      	str	r0, [r4, #12]
 8003410:	2104      	movs	r1, #4
 8003412:	6860      	ldr	r0, [r4, #4]
 8003414:	f7ff ff82 	bl	800331c <std>
 8003418:	68a0      	ldr	r0, [r4, #8]
 800341a:	2201      	movs	r2, #1
 800341c:	2109      	movs	r1, #9
 800341e:	f7ff ff7d 	bl	800331c <std>
 8003422:	68e0      	ldr	r0, [r4, #12]
 8003424:	2202      	movs	r2, #2
 8003426:	2112      	movs	r1, #18
 8003428:	f7ff ff78 	bl	800331c <std>
 800342c:	2301      	movs	r3, #1
 800342e:	61a3      	str	r3, [r4, #24]
 8003430:	e7d2      	b.n	80033d8 <__sinit+0xc>
 8003432:	bf00      	nop
 8003434:	08004ce0 	.word	0x08004ce0
 8003438:	08003365 	.word	0x08003365

0800343c <__sfp>:
 800343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343e:	4607      	mov	r7, r0
 8003440:	f7ff ffac 	bl	800339c <__sfp_lock_acquire>
 8003444:	4b1e      	ldr	r3, [pc, #120]	; (80034c0 <__sfp+0x84>)
 8003446:	681e      	ldr	r6, [r3, #0]
 8003448:	69b3      	ldr	r3, [r6, #24]
 800344a:	b913      	cbnz	r3, 8003452 <__sfp+0x16>
 800344c:	4630      	mov	r0, r6
 800344e:	f7ff ffbd 	bl	80033cc <__sinit>
 8003452:	3648      	adds	r6, #72	; 0x48
 8003454:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003458:	3b01      	subs	r3, #1
 800345a:	d503      	bpl.n	8003464 <__sfp+0x28>
 800345c:	6833      	ldr	r3, [r6, #0]
 800345e:	b30b      	cbz	r3, 80034a4 <__sfp+0x68>
 8003460:	6836      	ldr	r6, [r6, #0]
 8003462:	e7f7      	b.n	8003454 <__sfp+0x18>
 8003464:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003468:	b9d5      	cbnz	r5, 80034a0 <__sfp+0x64>
 800346a:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <__sfp+0x88>)
 800346c:	60e3      	str	r3, [r4, #12]
 800346e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003472:	6665      	str	r5, [r4, #100]	; 0x64
 8003474:	f000 f847 	bl	8003506 <__retarget_lock_init_recursive>
 8003478:	f7ff ff96 	bl	80033a8 <__sfp_lock_release>
 800347c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003480:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003484:	6025      	str	r5, [r4, #0]
 8003486:	61a5      	str	r5, [r4, #24]
 8003488:	2208      	movs	r2, #8
 800348a:	4629      	mov	r1, r5
 800348c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003490:	f7ff f902 	bl	8002698 <memset>
 8003494:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003498:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800349c:	4620      	mov	r0, r4
 800349e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034a0:	3468      	adds	r4, #104	; 0x68
 80034a2:	e7d9      	b.n	8003458 <__sfp+0x1c>
 80034a4:	2104      	movs	r1, #4
 80034a6:	4638      	mov	r0, r7
 80034a8:	f7ff ff62 	bl	8003370 <__sfmoreglue>
 80034ac:	4604      	mov	r4, r0
 80034ae:	6030      	str	r0, [r6, #0]
 80034b0:	2800      	cmp	r0, #0
 80034b2:	d1d5      	bne.n	8003460 <__sfp+0x24>
 80034b4:	f7ff ff78 	bl	80033a8 <__sfp_lock_release>
 80034b8:	230c      	movs	r3, #12
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	e7ee      	b.n	800349c <__sfp+0x60>
 80034be:	bf00      	nop
 80034c0:	08004ce0 	.word	0x08004ce0
 80034c4:	ffff0001 	.word	0xffff0001

080034c8 <_fwalk_reent>:
 80034c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034cc:	4606      	mov	r6, r0
 80034ce:	4688      	mov	r8, r1
 80034d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034d4:	2700      	movs	r7, #0
 80034d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034da:	f1b9 0901 	subs.w	r9, r9, #1
 80034de:	d505      	bpl.n	80034ec <_fwalk_reent+0x24>
 80034e0:	6824      	ldr	r4, [r4, #0]
 80034e2:	2c00      	cmp	r4, #0
 80034e4:	d1f7      	bne.n	80034d6 <_fwalk_reent+0xe>
 80034e6:	4638      	mov	r0, r7
 80034e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034ec:	89ab      	ldrh	r3, [r5, #12]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d907      	bls.n	8003502 <_fwalk_reent+0x3a>
 80034f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034f6:	3301      	adds	r3, #1
 80034f8:	d003      	beq.n	8003502 <_fwalk_reent+0x3a>
 80034fa:	4629      	mov	r1, r5
 80034fc:	4630      	mov	r0, r6
 80034fe:	47c0      	blx	r8
 8003500:	4307      	orrs	r7, r0
 8003502:	3568      	adds	r5, #104	; 0x68
 8003504:	e7e9      	b.n	80034da <_fwalk_reent+0x12>

08003506 <__retarget_lock_init_recursive>:
 8003506:	4770      	bx	lr

08003508 <__retarget_lock_acquire_recursive>:
 8003508:	4770      	bx	lr

0800350a <__retarget_lock_release_recursive>:
 800350a:	4770      	bx	lr

0800350c <_lseek_r>:
 800350c:	b538      	push	{r3, r4, r5, lr}
 800350e:	4d07      	ldr	r5, [pc, #28]	; (800352c <_lseek_r+0x20>)
 8003510:	4604      	mov	r4, r0
 8003512:	4608      	mov	r0, r1
 8003514:	4611      	mov	r1, r2
 8003516:	2200      	movs	r2, #0
 8003518:	602a      	str	r2, [r5, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	f001 f92c 	bl	8004778 <_lseek>
 8003520:	1c43      	adds	r3, r0, #1
 8003522:	d102      	bne.n	800352a <_lseek_r+0x1e>
 8003524:	682b      	ldr	r3, [r5, #0]
 8003526:	b103      	cbz	r3, 800352a <_lseek_r+0x1e>
 8003528:	6023      	str	r3, [r4, #0]
 800352a:	bd38      	pop	{r3, r4, r5, pc}
 800352c:	20000d10 	.word	0x20000d10

08003530 <__swhatbuf_r>:
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	460c      	mov	r4, r1
 8003534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003538:	2900      	cmp	r1, #0
 800353a:	b096      	sub	sp, #88	; 0x58
 800353c:	4615      	mov	r5, r2
 800353e:	461e      	mov	r6, r3
 8003540:	da0d      	bge.n	800355e <__swhatbuf_r+0x2e>
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003548:	f04f 0100 	mov.w	r1, #0
 800354c:	bf0c      	ite	eq
 800354e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003552:	2340      	movne	r3, #64	; 0x40
 8003554:	2000      	movs	r0, #0
 8003556:	6031      	str	r1, [r6, #0]
 8003558:	602b      	str	r3, [r5, #0]
 800355a:	b016      	add	sp, #88	; 0x58
 800355c:	bd70      	pop	{r4, r5, r6, pc}
 800355e:	466a      	mov	r2, sp
 8003560:	f001 f8b8 	bl	80046d4 <_fstat_r>
 8003564:	2800      	cmp	r0, #0
 8003566:	dbec      	blt.n	8003542 <__swhatbuf_r+0x12>
 8003568:	9901      	ldr	r1, [sp, #4]
 800356a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800356e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003572:	4259      	negs	r1, r3
 8003574:	4159      	adcs	r1, r3
 8003576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800357a:	e7eb      	b.n	8003554 <__swhatbuf_r+0x24>

0800357c <__smakebuf_r>:
 800357c:	898b      	ldrh	r3, [r1, #12]
 800357e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003580:	079d      	lsls	r5, r3, #30
 8003582:	4606      	mov	r6, r0
 8003584:	460c      	mov	r4, r1
 8003586:	d507      	bpl.n	8003598 <__smakebuf_r+0x1c>
 8003588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800358c:	6023      	str	r3, [r4, #0]
 800358e:	6123      	str	r3, [r4, #16]
 8003590:	2301      	movs	r3, #1
 8003592:	6163      	str	r3, [r4, #20]
 8003594:	b002      	add	sp, #8
 8003596:	bd70      	pop	{r4, r5, r6, pc}
 8003598:	ab01      	add	r3, sp, #4
 800359a:	466a      	mov	r2, sp
 800359c:	f7ff ffc8 	bl	8003530 <__swhatbuf_r>
 80035a0:	9900      	ldr	r1, [sp, #0]
 80035a2:	4605      	mov	r5, r0
 80035a4:	4630      	mov	r0, r6
 80035a6:	f7ff f89f 	bl	80026e8 <_malloc_r>
 80035aa:	b948      	cbnz	r0, 80035c0 <__smakebuf_r+0x44>
 80035ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035b0:	059a      	lsls	r2, r3, #22
 80035b2:	d4ef      	bmi.n	8003594 <__smakebuf_r+0x18>
 80035b4:	f023 0303 	bic.w	r3, r3, #3
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	81a3      	strh	r3, [r4, #12]
 80035be:	e7e3      	b.n	8003588 <__smakebuf_r+0xc>
 80035c0:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <__smakebuf_r+0x7c>)
 80035c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80035c4:	89a3      	ldrh	r3, [r4, #12]
 80035c6:	6020      	str	r0, [r4, #0]
 80035c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035cc:	81a3      	strh	r3, [r4, #12]
 80035ce:	9b00      	ldr	r3, [sp, #0]
 80035d0:	6163      	str	r3, [r4, #20]
 80035d2:	9b01      	ldr	r3, [sp, #4]
 80035d4:	6120      	str	r0, [r4, #16]
 80035d6:	b15b      	cbz	r3, 80035f0 <__smakebuf_r+0x74>
 80035d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035dc:	4630      	mov	r0, r6
 80035de:	f001 f88b 	bl	80046f8 <_isatty_r>
 80035e2:	b128      	cbz	r0, 80035f0 <__smakebuf_r+0x74>
 80035e4:	89a3      	ldrh	r3, [r4, #12]
 80035e6:	f023 0303 	bic.w	r3, r3, #3
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	81a3      	strh	r3, [r4, #12]
 80035f0:	89a3      	ldrh	r3, [r4, #12]
 80035f2:	431d      	orrs	r5, r3
 80035f4:	81a5      	strh	r5, [r4, #12]
 80035f6:	e7cd      	b.n	8003594 <__smakebuf_r+0x18>
 80035f8:	08003365 	.word	0x08003365

080035fc <memmove>:
 80035fc:	4288      	cmp	r0, r1
 80035fe:	b510      	push	{r4, lr}
 8003600:	eb01 0402 	add.w	r4, r1, r2
 8003604:	d902      	bls.n	800360c <memmove+0x10>
 8003606:	4284      	cmp	r4, r0
 8003608:	4623      	mov	r3, r4
 800360a:	d807      	bhi.n	800361c <memmove+0x20>
 800360c:	1e43      	subs	r3, r0, #1
 800360e:	42a1      	cmp	r1, r4
 8003610:	d008      	beq.n	8003624 <memmove+0x28>
 8003612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003616:	f803 2f01 	strb.w	r2, [r3, #1]!
 800361a:	e7f8      	b.n	800360e <memmove+0x12>
 800361c:	4402      	add	r2, r0
 800361e:	4601      	mov	r1, r0
 8003620:	428a      	cmp	r2, r1
 8003622:	d100      	bne.n	8003626 <memmove+0x2a>
 8003624:	bd10      	pop	{r4, pc}
 8003626:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800362a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800362e:	e7f7      	b.n	8003620 <memmove+0x24>

08003630 <__malloc_lock>:
 8003630:	4801      	ldr	r0, [pc, #4]	; (8003638 <__malloc_lock+0x8>)
 8003632:	f7ff bf69 	b.w	8003508 <__retarget_lock_acquire_recursive>
 8003636:	bf00      	nop
 8003638:	20000d0c 	.word	0x20000d0c

0800363c <__malloc_unlock>:
 800363c:	4801      	ldr	r0, [pc, #4]	; (8003644 <__malloc_unlock+0x8>)
 800363e:	f7ff bf64 	b.w	800350a <__retarget_lock_release_recursive>
 8003642:	bf00      	nop
 8003644:	20000d0c 	.word	0x20000d0c

08003648 <_free_r>:
 8003648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800364a:	2900      	cmp	r1, #0
 800364c:	d044      	beq.n	80036d8 <_free_r+0x90>
 800364e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003652:	9001      	str	r0, [sp, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	f1a1 0404 	sub.w	r4, r1, #4
 800365a:	bfb8      	it	lt
 800365c:	18e4      	addlt	r4, r4, r3
 800365e:	f7ff ffe7 	bl	8003630 <__malloc_lock>
 8003662:	4a1e      	ldr	r2, [pc, #120]	; (80036dc <_free_r+0x94>)
 8003664:	9801      	ldr	r0, [sp, #4]
 8003666:	6813      	ldr	r3, [r2, #0]
 8003668:	b933      	cbnz	r3, 8003678 <_free_r+0x30>
 800366a:	6063      	str	r3, [r4, #4]
 800366c:	6014      	str	r4, [r2, #0]
 800366e:	b003      	add	sp, #12
 8003670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003674:	f7ff bfe2 	b.w	800363c <__malloc_unlock>
 8003678:	42a3      	cmp	r3, r4
 800367a:	d908      	bls.n	800368e <_free_r+0x46>
 800367c:	6825      	ldr	r5, [r4, #0]
 800367e:	1961      	adds	r1, r4, r5
 8003680:	428b      	cmp	r3, r1
 8003682:	bf01      	itttt	eq
 8003684:	6819      	ldreq	r1, [r3, #0]
 8003686:	685b      	ldreq	r3, [r3, #4]
 8003688:	1949      	addeq	r1, r1, r5
 800368a:	6021      	streq	r1, [r4, #0]
 800368c:	e7ed      	b.n	800366a <_free_r+0x22>
 800368e:	461a      	mov	r2, r3
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	b10b      	cbz	r3, 8003698 <_free_r+0x50>
 8003694:	42a3      	cmp	r3, r4
 8003696:	d9fa      	bls.n	800368e <_free_r+0x46>
 8003698:	6811      	ldr	r1, [r2, #0]
 800369a:	1855      	adds	r5, r2, r1
 800369c:	42a5      	cmp	r5, r4
 800369e:	d10b      	bne.n	80036b8 <_free_r+0x70>
 80036a0:	6824      	ldr	r4, [r4, #0]
 80036a2:	4421      	add	r1, r4
 80036a4:	1854      	adds	r4, r2, r1
 80036a6:	42a3      	cmp	r3, r4
 80036a8:	6011      	str	r1, [r2, #0]
 80036aa:	d1e0      	bne.n	800366e <_free_r+0x26>
 80036ac:	681c      	ldr	r4, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	6053      	str	r3, [r2, #4]
 80036b2:	440c      	add	r4, r1
 80036b4:	6014      	str	r4, [r2, #0]
 80036b6:	e7da      	b.n	800366e <_free_r+0x26>
 80036b8:	d902      	bls.n	80036c0 <_free_r+0x78>
 80036ba:	230c      	movs	r3, #12
 80036bc:	6003      	str	r3, [r0, #0]
 80036be:	e7d6      	b.n	800366e <_free_r+0x26>
 80036c0:	6825      	ldr	r5, [r4, #0]
 80036c2:	1961      	adds	r1, r4, r5
 80036c4:	428b      	cmp	r3, r1
 80036c6:	bf04      	itt	eq
 80036c8:	6819      	ldreq	r1, [r3, #0]
 80036ca:	685b      	ldreq	r3, [r3, #4]
 80036cc:	6063      	str	r3, [r4, #4]
 80036ce:	bf04      	itt	eq
 80036d0:	1949      	addeq	r1, r1, r5
 80036d2:	6021      	streq	r1, [r4, #0]
 80036d4:	6054      	str	r4, [r2, #4]
 80036d6:	e7ca      	b.n	800366e <_free_r+0x26>
 80036d8:	b003      	add	sp, #12
 80036da:	bd30      	pop	{r4, r5, pc}
 80036dc:	20000d04 	.word	0x20000d04

080036e0 <_realloc_r>:
 80036e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e4:	4680      	mov	r8, r0
 80036e6:	4614      	mov	r4, r2
 80036e8:	460e      	mov	r6, r1
 80036ea:	b921      	cbnz	r1, 80036f6 <_realloc_r+0x16>
 80036ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036f0:	4611      	mov	r1, r2
 80036f2:	f7fe bff9 	b.w	80026e8 <_malloc_r>
 80036f6:	b92a      	cbnz	r2, 8003704 <_realloc_r+0x24>
 80036f8:	f7ff ffa6 	bl	8003648 <_free_r>
 80036fc:	4625      	mov	r5, r4
 80036fe:	4628      	mov	r0, r5
 8003700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003704:	f001 f808 	bl	8004718 <_malloc_usable_size_r>
 8003708:	4284      	cmp	r4, r0
 800370a:	4607      	mov	r7, r0
 800370c:	d802      	bhi.n	8003714 <_realloc_r+0x34>
 800370e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003712:	d812      	bhi.n	800373a <_realloc_r+0x5a>
 8003714:	4621      	mov	r1, r4
 8003716:	4640      	mov	r0, r8
 8003718:	f7fe ffe6 	bl	80026e8 <_malloc_r>
 800371c:	4605      	mov	r5, r0
 800371e:	2800      	cmp	r0, #0
 8003720:	d0ed      	beq.n	80036fe <_realloc_r+0x1e>
 8003722:	42bc      	cmp	r4, r7
 8003724:	4622      	mov	r2, r4
 8003726:	4631      	mov	r1, r6
 8003728:	bf28      	it	cs
 800372a:	463a      	movcs	r2, r7
 800372c:	f7fe ffa6 	bl	800267c <memcpy>
 8003730:	4631      	mov	r1, r6
 8003732:	4640      	mov	r0, r8
 8003734:	f7ff ff88 	bl	8003648 <_free_r>
 8003738:	e7e1      	b.n	80036fe <_realloc_r+0x1e>
 800373a:	4635      	mov	r5, r6
 800373c:	e7df      	b.n	80036fe <_realloc_r+0x1e>

0800373e <__ssputs_r>:
 800373e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003742:	688e      	ldr	r6, [r1, #8]
 8003744:	461f      	mov	r7, r3
 8003746:	42be      	cmp	r6, r7
 8003748:	680b      	ldr	r3, [r1, #0]
 800374a:	4682      	mov	sl, r0
 800374c:	460c      	mov	r4, r1
 800374e:	4690      	mov	r8, r2
 8003750:	d82c      	bhi.n	80037ac <__ssputs_r+0x6e>
 8003752:	898a      	ldrh	r2, [r1, #12]
 8003754:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003758:	d026      	beq.n	80037a8 <__ssputs_r+0x6a>
 800375a:	6965      	ldr	r5, [r4, #20]
 800375c:	6909      	ldr	r1, [r1, #16]
 800375e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003762:	eba3 0901 	sub.w	r9, r3, r1
 8003766:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800376a:	1c7b      	adds	r3, r7, #1
 800376c:	444b      	add	r3, r9
 800376e:	106d      	asrs	r5, r5, #1
 8003770:	429d      	cmp	r5, r3
 8003772:	bf38      	it	cc
 8003774:	461d      	movcc	r5, r3
 8003776:	0553      	lsls	r3, r2, #21
 8003778:	d527      	bpl.n	80037ca <__ssputs_r+0x8c>
 800377a:	4629      	mov	r1, r5
 800377c:	f7fe ffb4 	bl	80026e8 <_malloc_r>
 8003780:	4606      	mov	r6, r0
 8003782:	b360      	cbz	r0, 80037de <__ssputs_r+0xa0>
 8003784:	6921      	ldr	r1, [r4, #16]
 8003786:	464a      	mov	r2, r9
 8003788:	f7fe ff78 	bl	800267c <memcpy>
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003796:	81a3      	strh	r3, [r4, #12]
 8003798:	6126      	str	r6, [r4, #16]
 800379a:	6165      	str	r5, [r4, #20]
 800379c:	444e      	add	r6, r9
 800379e:	eba5 0509 	sub.w	r5, r5, r9
 80037a2:	6026      	str	r6, [r4, #0]
 80037a4:	60a5      	str	r5, [r4, #8]
 80037a6:	463e      	mov	r6, r7
 80037a8:	42be      	cmp	r6, r7
 80037aa:	d900      	bls.n	80037ae <__ssputs_r+0x70>
 80037ac:	463e      	mov	r6, r7
 80037ae:	6820      	ldr	r0, [r4, #0]
 80037b0:	4632      	mov	r2, r6
 80037b2:	4641      	mov	r1, r8
 80037b4:	f7ff ff22 	bl	80035fc <memmove>
 80037b8:	68a3      	ldr	r3, [r4, #8]
 80037ba:	1b9b      	subs	r3, r3, r6
 80037bc:	60a3      	str	r3, [r4, #8]
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	4433      	add	r3, r6
 80037c2:	6023      	str	r3, [r4, #0]
 80037c4:	2000      	movs	r0, #0
 80037c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ca:	462a      	mov	r2, r5
 80037cc:	f7ff ff88 	bl	80036e0 <_realloc_r>
 80037d0:	4606      	mov	r6, r0
 80037d2:	2800      	cmp	r0, #0
 80037d4:	d1e0      	bne.n	8003798 <__ssputs_r+0x5a>
 80037d6:	6921      	ldr	r1, [r4, #16]
 80037d8:	4650      	mov	r0, sl
 80037da:	f7ff ff35 	bl	8003648 <_free_r>
 80037de:	230c      	movs	r3, #12
 80037e0:	f8ca 3000 	str.w	r3, [sl]
 80037e4:	89a3      	ldrh	r3, [r4, #12]
 80037e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ea:	81a3      	strh	r3, [r4, #12]
 80037ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037f0:	e7e9      	b.n	80037c6 <__ssputs_r+0x88>
	...

080037f4 <_svfiprintf_r>:
 80037f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f8:	4698      	mov	r8, r3
 80037fa:	898b      	ldrh	r3, [r1, #12]
 80037fc:	061b      	lsls	r3, r3, #24
 80037fe:	b09d      	sub	sp, #116	; 0x74
 8003800:	4607      	mov	r7, r0
 8003802:	460d      	mov	r5, r1
 8003804:	4614      	mov	r4, r2
 8003806:	d50e      	bpl.n	8003826 <_svfiprintf_r+0x32>
 8003808:	690b      	ldr	r3, [r1, #16]
 800380a:	b963      	cbnz	r3, 8003826 <_svfiprintf_r+0x32>
 800380c:	2140      	movs	r1, #64	; 0x40
 800380e:	f7fe ff6b 	bl	80026e8 <_malloc_r>
 8003812:	6028      	str	r0, [r5, #0]
 8003814:	6128      	str	r0, [r5, #16]
 8003816:	b920      	cbnz	r0, 8003822 <_svfiprintf_r+0x2e>
 8003818:	230c      	movs	r3, #12
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003820:	e0d0      	b.n	80039c4 <_svfiprintf_r+0x1d0>
 8003822:	2340      	movs	r3, #64	; 0x40
 8003824:	616b      	str	r3, [r5, #20]
 8003826:	2300      	movs	r3, #0
 8003828:	9309      	str	r3, [sp, #36]	; 0x24
 800382a:	2320      	movs	r3, #32
 800382c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003830:	f8cd 800c 	str.w	r8, [sp, #12]
 8003834:	2330      	movs	r3, #48	; 0x30
 8003836:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80039dc <_svfiprintf_r+0x1e8>
 800383a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800383e:	f04f 0901 	mov.w	r9, #1
 8003842:	4623      	mov	r3, r4
 8003844:	469a      	mov	sl, r3
 8003846:	f813 2b01 	ldrb.w	r2, [r3], #1
 800384a:	b10a      	cbz	r2, 8003850 <_svfiprintf_r+0x5c>
 800384c:	2a25      	cmp	r2, #37	; 0x25
 800384e:	d1f9      	bne.n	8003844 <_svfiprintf_r+0x50>
 8003850:	ebba 0b04 	subs.w	fp, sl, r4
 8003854:	d00b      	beq.n	800386e <_svfiprintf_r+0x7a>
 8003856:	465b      	mov	r3, fp
 8003858:	4622      	mov	r2, r4
 800385a:	4629      	mov	r1, r5
 800385c:	4638      	mov	r0, r7
 800385e:	f7ff ff6e 	bl	800373e <__ssputs_r>
 8003862:	3001      	adds	r0, #1
 8003864:	f000 80a9 	beq.w	80039ba <_svfiprintf_r+0x1c6>
 8003868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800386a:	445a      	add	r2, fp
 800386c:	9209      	str	r2, [sp, #36]	; 0x24
 800386e:	f89a 3000 	ldrb.w	r3, [sl]
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 80a1 	beq.w	80039ba <_svfiprintf_r+0x1c6>
 8003878:	2300      	movs	r3, #0
 800387a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800387e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003882:	f10a 0a01 	add.w	sl, sl, #1
 8003886:	9304      	str	r3, [sp, #16]
 8003888:	9307      	str	r3, [sp, #28]
 800388a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800388e:	931a      	str	r3, [sp, #104]	; 0x68
 8003890:	4654      	mov	r4, sl
 8003892:	2205      	movs	r2, #5
 8003894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003898:	4850      	ldr	r0, [pc, #320]	; (80039dc <_svfiprintf_r+0x1e8>)
 800389a:	f7fc fc99 	bl	80001d0 <memchr>
 800389e:	9a04      	ldr	r2, [sp, #16]
 80038a0:	b9d8      	cbnz	r0, 80038da <_svfiprintf_r+0xe6>
 80038a2:	06d0      	lsls	r0, r2, #27
 80038a4:	bf44      	itt	mi
 80038a6:	2320      	movmi	r3, #32
 80038a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038ac:	0711      	lsls	r1, r2, #28
 80038ae:	bf44      	itt	mi
 80038b0:	232b      	movmi	r3, #43	; 0x2b
 80038b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038b6:	f89a 3000 	ldrb.w	r3, [sl]
 80038ba:	2b2a      	cmp	r3, #42	; 0x2a
 80038bc:	d015      	beq.n	80038ea <_svfiprintf_r+0xf6>
 80038be:	9a07      	ldr	r2, [sp, #28]
 80038c0:	4654      	mov	r4, sl
 80038c2:	2000      	movs	r0, #0
 80038c4:	f04f 0c0a 	mov.w	ip, #10
 80038c8:	4621      	mov	r1, r4
 80038ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038ce:	3b30      	subs	r3, #48	; 0x30
 80038d0:	2b09      	cmp	r3, #9
 80038d2:	d94d      	bls.n	8003970 <_svfiprintf_r+0x17c>
 80038d4:	b1b0      	cbz	r0, 8003904 <_svfiprintf_r+0x110>
 80038d6:	9207      	str	r2, [sp, #28]
 80038d8:	e014      	b.n	8003904 <_svfiprintf_r+0x110>
 80038da:	eba0 0308 	sub.w	r3, r0, r8
 80038de:	fa09 f303 	lsl.w	r3, r9, r3
 80038e2:	4313      	orrs	r3, r2
 80038e4:	9304      	str	r3, [sp, #16]
 80038e6:	46a2      	mov	sl, r4
 80038e8:	e7d2      	b.n	8003890 <_svfiprintf_r+0x9c>
 80038ea:	9b03      	ldr	r3, [sp, #12]
 80038ec:	1d19      	adds	r1, r3, #4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	9103      	str	r1, [sp, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bfbb      	ittet	lt
 80038f6:	425b      	neglt	r3, r3
 80038f8:	f042 0202 	orrlt.w	r2, r2, #2
 80038fc:	9307      	strge	r3, [sp, #28]
 80038fe:	9307      	strlt	r3, [sp, #28]
 8003900:	bfb8      	it	lt
 8003902:	9204      	strlt	r2, [sp, #16]
 8003904:	7823      	ldrb	r3, [r4, #0]
 8003906:	2b2e      	cmp	r3, #46	; 0x2e
 8003908:	d10c      	bne.n	8003924 <_svfiprintf_r+0x130>
 800390a:	7863      	ldrb	r3, [r4, #1]
 800390c:	2b2a      	cmp	r3, #42	; 0x2a
 800390e:	d134      	bne.n	800397a <_svfiprintf_r+0x186>
 8003910:	9b03      	ldr	r3, [sp, #12]
 8003912:	1d1a      	adds	r2, r3, #4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	9203      	str	r2, [sp, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	bfb8      	it	lt
 800391c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003920:	3402      	adds	r4, #2
 8003922:	9305      	str	r3, [sp, #20]
 8003924:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80039ec <_svfiprintf_r+0x1f8>
 8003928:	7821      	ldrb	r1, [r4, #0]
 800392a:	2203      	movs	r2, #3
 800392c:	4650      	mov	r0, sl
 800392e:	f7fc fc4f 	bl	80001d0 <memchr>
 8003932:	b138      	cbz	r0, 8003944 <_svfiprintf_r+0x150>
 8003934:	9b04      	ldr	r3, [sp, #16]
 8003936:	eba0 000a 	sub.w	r0, r0, sl
 800393a:	2240      	movs	r2, #64	; 0x40
 800393c:	4082      	lsls	r2, r0
 800393e:	4313      	orrs	r3, r2
 8003940:	3401      	adds	r4, #1
 8003942:	9304      	str	r3, [sp, #16]
 8003944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003948:	4825      	ldr	r0, [pc, #148]	; (80039e0 <_svfiprintf_r+0x1ec>)
 800394a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800394e:	2206      	movs	r2, #6
 8003950:	f7fc fc3e 	bl	80001d0 <memchr>
 8003954:	2800      	cmp	r0, #0
 8003956:	d038      	beq.n	80039ca <_svfiprintf_r+0x1d6>
 8003958:	4b22      	ldr	r3, [pc, #136]	; (80039e4 <_svfiprintf_r+0x1f0>)
 800395a:	bb1b      	cbnz	r3, 80039a4 <_svfiprintf_r+0x1b0>
 800395c:	9b03      	ldr	r3, [sp, #12]
 800395e:	3307      	adds	r3, #7
 8003960:	f023 0307 	bic.w	r3, r3, #7
 8003964:	3308      	adds	r3, #8
 8003966:	9303      	str	r3, [sp, #12]
 8003968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800396a:	4433      	add	r3, r6
 800396c:	9309      	str	r3, [sp, #36]	; 0x24
 800396e:	e768      	b.n	8003842 <_svfiprintf_r+0x4e>
 8003970:	fb0c 3202 	mla	r2, ip, r2, r3
 8003974:	460c      	mov	r4, r1
 8003976:	2001      	movs	r0, #1
 8003978:	e7a6      	b.n	80038c8 <_svfiprintf_r+0xd4>
 800397a:	2300      	movs	r3, #0
 800397c:	3401      	adds	r4, #1
 800397e:	9305      	str	r3, [sp, #20]
 8003980:	4619      	mov	r1, r3
 8003982:	f04f 0c0a 	mov.w	ip, #10
 8003986:	4620      	mov	r0, r4
 8003988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800398c:	3a30      	subs	r2, #48	; 0x30
 800398e:	2a09      	cmp	r2, #9
 8003990:	d903      	bls.n	800399a <_svfiprintf_r+0x1a6>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0c6      	beq.n	8003924 <_svfiprintf_r+0x130>
 8003996:	9105      	str	r1, [sp, #20]
 8003998:	e7c4      	b.n	8003924 <_svfiprintf_r+0x130>
 800399a:	fb0c 2101 	mla	r1, ip, r1, r2
 800399e:	4604      	mov	r4, r0
 80039a0:	2301      	movs	r3, #1
 80039a2:	e7f0      	b.n	8003986 <_svfiprintf_r+0x192>
 80039a4:	ab03      	add	r3, sp, #12
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	462a      	mov	r2, r5
 80039aa:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <_svfiprintf_r+0x1f4>)
 80039ac:	a904      	add	r1, sp, #16
 80039ae:	4638      	mov	r0, r7
 80039b0:	f3af 8000 	nop.w
 80039b4:	1c42      	adds	r2, r0, #1
 80039b6:	4606      	mov	r6, r0
 80039b8:	d1d6      	bne.n	8003968 <_svfiprintf_r+0x174>
 80039ba:	89ab      	ldrh	r3, [r5, #12]
 80039bc:	065b      	lsls	r3, r3, #25
 80039be:	f53f af2d 	bmi.w	800381c <_svfiprintf_r+0x28>
 80039c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039c4:	b01d      	add	sp, #116	; 0x74
 80039c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ca:	ab03      	add	r3, sp, #12
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	462a      	mov	r2, r5
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <_svfiprintf_r+0x1f4>)
 80039d2:	a904      	add	r1, sp, #16
 80039d4:	4638      	mov	r0, r7
 80039d6:	f000 fa4b 	bl	8003e70 <_printf_i>
 80039da:	e7eb      	b.n	80039b4 <_svfiprintf_r+0x1c0>
 80039dc:	08004ce4 	.word	0x08004ce4
 80039e0:	08004cee 	.word	0x08004cee
 80039e4:	00000000 	.word	0x00000000
 80039e8:	0800373f 	.word	0x0800373f
 80039ec:	08004cea 	.word	0x08004cea

080039f0 <_sungetc_r>:
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	1c4b      	adds	r3, r1, #1
 80039f4:	4614      	mov	r4, r2
 80039f6:	d103      	bne.n	8003a00 <_sungetc_r+0x10>
 80039f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80039fc:	4628      	mov	r0, r5
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
 8003a00:	8993      	ldrh	r3, [r2, #12]
 8003a02:	f023 0320 	bic.w	r3, r3, #32
 8003a06:	8193      	strh	r3, [r2, #12]
 8003a08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a0a:	6852      	ldr	r2, [r2, #4]
 8003a0c:	b2cd      	uxtb	r5, r1
 8003a0e:	b18b      	cbz	r3, 8003a34 <_sungetc_r+0x44>
 8003a10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a12:	4293      	cmp	r3, r2
 8003a14:	dd08      	ble.n	8003a28 <_sungetc_r+0x38>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	1e5a      	subs	r2, r3, #1
 8003a1a:	6022      	str	r2, [r4, #0]
 8003a1c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003a20:	6863      	ldr	r3, [r4, #4]
 8003a22:	3301      	adds	r3, #1
 8003a24:	6063      	str	r3, [r4, #4]
 8003a26:	e7e9      	b.n	80039fc <_sungetc_r+0xc>
 8003a28:	4621      	mov	r1, r4
 8003a2a:	f000 fe19 	bl	8004660 <__submore>
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d0f1      	beq.n	8003a16 <_sungetc_r+0x26>
 8003a32:	e7e1      	b.n	80039f8 <_sungetc_r+0x8>
 8003a34:	6921      	ldr	r1, [r4, #16]
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	b151      	cbz	r1, 8003a50 <_sungetc_r+0x60>
 8003a3a:	4299      	cmp	r1, r3
 8003a3c:	d208      	bcs.n	8003a50 <_sungetc_r+0x60>
 8003a3e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003a42:	42a9      	cmp	r1, r5
 8003a44:	d104      	bne.n	8003a50 <_sungetc_r+0x60>
 8003a46:	3b01      	subs	r3, #1
 8003a48:	3201      	adds	r2, #1
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	6062      	str	r2, [r4, #4]
 8003a4e:	e7d5      	b.n	80039fc <_sungetc_r+0xc>
 8003a50:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003a54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a58:	6363      	str	r3, [r4, #52]	; 0x34
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a5e:	4623      	mov	r3, r4
 8003a60:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003a64:	6023      	str	r3, [r4, #0]
 8003a66:	2301      	movs	r3, #1
 8003a68:	e7dc      	b.n	8003a24 <_sungetc_r+0x34>

08003a6a <__ssrefill_r>:
 8003a6a:	b510      	push	{r4, lr}
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003a70:	b169      	cbz	r1, 8003a8e <__ssrefill_r+0x24>
 8003a72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a76:	4299      	cmp	r1, r3
 8003a78:	d001      	beq.n	8003a7e <__ssrefill_r+0x14>
 8003a7a:	f7ff fde5 	bl	8003648 <_free_r>
 8003a7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a80:	6063      	str	r3, [r4, #4]
 8003a82:	2000      	movs	r0, #0
 8003a84:	6360      	str	r0, [r4, #52]	; 0x34
 8003a86:	b113      	cbz	r3, 8003a8e <__ssrefill_r+0x24>
 8003a88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a8a:	6023      	str	r3, [r4, #0]
 8003a8c:	bd10      	pop	{r4, pc}
 8003a8e:	6923      	ldr	r3, [r4, #16]
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	2300      	movs	r3, #0
 8003a94:	6063      	str	r3, [r4, #4]
 8003a96:	89a3      	ldrh	r3, [r4, #12]
 8003a98:	f043 0320 	orr.w	r3, r3, #32
 8003a9c:	81a3      	strh	r3, [r4, #12]
 8003a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003aa2:	e7f3      	b.n	8003a8c <__ssrefill_r+0x22>

08003aa4 <__ssvfiscanf_r>:
 8003aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003aae:	2100      	movs	r1, #0
 8003ab0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003ab4:	49a6      	ldr	r1, [pc, #664]	; (8003d50 <__ssvfiscanf_r+0x2ac>)
 8003ab6:	91a0      	str	r1, [sp, #640]	; 0x280
 8003ab8:	f10d 0804 	add.w	r8, sp, #4
 8003abc:	49a5      	ldr	r1, [pc, #660]	; (8003d54 <__ssvfiscanf_r+0x2b0>)
 8003abe:	4fa6      	ldr	r7, [pc, #664]	; (8003d58 <__ssvfiscanf_r+0x2b4>)
 8003ac0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003d5c <__ssvfiscanf_r+0x2b8>
 8003ac4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003ac8:	4606      	mov	r6, r0
 8003aca:	91a1      	str	r1, [sp, #644]	; 0x284
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	7813      	ldrb	r3, [r2, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 815a 	beq.w	8003d8a <__ssvfiscanf_r+0x2e6>
 8003ad6:	5cf9      	ldrb	r1, [r7, r3]
 8003ad8:	f011 0108 	ands.w	r1, r1, #8
 8003adc:	f102 0501 	add.w	r5, r2, #1
 8003ae0:	d019      	beq.n	8003b16 <__ssvfiscanf_r+0x72>
 8003ae2:	6863      	ldr	r3, [r4, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	dd0f      	ble.n	8003b08 <__ssvfiscanf_r+0x64>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	781a      	ldrb	r2, [r3, #0]
 8003aec:	5cba      	ldrb	r2, [r7, r2]
 8003aee:	0712      	lsls	r2, r2, #28
 8003af0:	d401      	bmi.n	8003af6 <__ssvfiscanf_r+0x52>
 8003af2:	462a      	mov	r2, r5
 8003af4:	e7eb      	b.n	8003ace <__ssvfiscanf_r+0x2a>
 8003af6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003af8:	3201      	adds	r2, #1
 8003afa:	9245      	str	r2, [sp, #276]	; 0x114
 8003afc:	6862      	ldr	r2, [r4, #4]
 8003afe:	3301      	adds	r3, #1
 8003b00:	3a01      	subs	r2, #1
 8003b02:	6062      	str	r2, [r4, #4]
 8003b04:	6023      	str	r3, [r4, #0]
 8003b06:	e7ec      	b.n	8003ae2 <__ssvfiscanf_r+0x3e>
 8003b08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	4798      	blx	r3
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d0e9      	beq.n	8003ae8 <__ssvfiscanf_r+0x44>
 8003b14:	e7ed      	b.n	8003af2 <__ssvfiscanf_r+0x4e>
 8003b16:	2b25      	cmp	r3, #37	; 0x25
 8003b18:	d012      	beq.n	8003b40 <__ssvfiscanf_r+0x9c>
 8003b1a:	469a      	mov	sl, r3
 8003b1c:	6863      	ldr	r3, [r4, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f340 8091 	ble.w	8003c46 <__ssvfiscanf_r+0x1a2>
 8003b24:	6822      	ldr	r2, [r4, #0]
 8003b26:	7813      	ldrb	r3, [r2, #0]
 8003b28:	4553      	cmp	r3, sl
 8003b2a:	f040 812e 	bne.w	8003d8a <__ssvfiscanf_r+0x2e6>
 8003b2e:	6863      	ldr	r3, [r4, #4]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	6063      	str	r3, [r4, #4]
 8003b34:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003b36:	3201      	adds	r2, #1
 8003b38:	3301      	adds	r3, #1
 8003b3a:	6022      	str	r2, [r4, #0]
 8003b3c:	9345      	str	r3, [sp, #276]	; 0x114
 8003b3e:	e7d8      	b.n	8003af2 <__ssvfiscanf_r+0x4e>
 8003b40:	9141      	str	r1, [sp, #260]	; 0x104
 8003b42:	9143      	str	r1, [sp, #268]	; 0x10c
 8003b44:	7853      	ldrb	r3, [r2, #1]
 8003b46:	2b2a      	cmp	r3, #42	; 0x2a
 8003b48:	bf02      	ittt	eq
 8003b4a:	2310      	moveq	r3, #16
 8003b4c:	1c95      	addeq	r5, r2, #2
 8003b4e:	9341      	streq	r3, [sp, #260]	; 0x104
 8003b50:	220a      	movs	r2, #10
 8003b52:	46aa      	mov	sl, r5
 8003b54:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003b58:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003b5c:	2b09      	cmp	r3, #9
 8003b5e:	d91c      	bls.n	8003b9a <__ssvfiscanf_r+0xf6>
 8003b60:	487e      	ldr	r0, [pc, #504]	; (8003d5c <__ssvfiscanf_r+0x2b8>)
 8003b62:	2203      	movs	r2, #3
 8003b64:	f7fc fb34 	bl	80001d0 <memchr>
 8003b68:	b138      	cbz	r0, 8003b7a <__ssvfiscanf_r+0xd6>
 8003b6a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003b6c:	eba0 0009 	sub.w	r0, r0, r9
 8003b70:	2301      	movs	r3, #1
 8003b72:	4083      	lsls	r3, r0
 8003b74:	4313      	orrs	r3, r2
 8003b76:	9341      	str	r3, [sp, #260]	; 0x104
 8003b78:	4655      	mov	r5, sl
 8003b7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b7e:	2b78      	cmp	r3, #120	; 0x78
 8003b80:	d806      	bhi.n	8003b90 <__ssvfiscanf_r+0xec>
 8003b82:	2b57      	cmp	r3, #87	; 0x57
 8003b84:	d810      	bhi.n	8003ba8 <__ssvfiscanf_r+0x104>
 8003b86:	2b25      	cmp	r3, #37	; 0x25
 8003b88:	d0c7      	beq.n	8003b1a <__ssvfiscanf_r+0x76>
 8003b8a:	d857      	bhi.n	8003c3c <__ssvfiscanf_r+0x198>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d065      	beq.n	8003c5c <__ssvfiscanf_r+0x1b8>
 8003b90:	2303      	movs	r3, #3
 8003b92:	9347      	str	r3, [sp, #284]	; 0x11c
 8003b94:	230a      	movs	r3, #10
 8003b96:	9342      	str	r3, [sp, #264]	; 0x108
 8003b98:	e076      	b.n	8003c88 <__ssvfiscanf_r+0x1e4>
 8003b9a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003b9c:	fb02 1103 	mla	r1, r2, r3, r1
 8003ba0:	3930      	subs	r1, #48	; 0x30
 8003ba2:	9143      	str	r1, [sp, #268]	; 0x10c
 8003ba4:	4655      	mov	r5, sl
 8003ba6:	e7d4      	b.n	8003b52 <__ssvfiscanf_r+0xae>
 8003ba8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003bac:	2a20      	cmp	r2, #32
 8003bae:	d8ef      	bhi.n	8003b90 <__ssvfiscanf_r+0xec>
 8003bb0:	a101      	add	r1, pc, #4	; (adr r1, 8003bb8 <__ssvfiscanf_r+0x114>)
 8003bb2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003c6b 	.word	0x08003c6b
 8003bbc:	08003b91 	.word	0x08003b91
 8003bc0:	08003b91 	.word	0x08003b91
 8003bc4:	08003cc9 	.word	0x08003cc9
 8003bc8:	08003b91 	.word	0x08003b91
 8003bcc:	08003b91 	.word	0x08003b91
 8003bd0:	08003b91 	.word	0x08003b91
 8003bd4:	08003b91 	.word	0x08003b91
 8003bd8:	08003b91 	.word	0x08003b91
 8003bdc:	08003b91 	.word	0x08003b91
 8003be0:	08003b91 	.word	0x08003b91
 8003be4:	08003cdf 	.word	0x08003cdf
 8003be8:	08003cc5 	.word	0x08003cc5
 8003bec:	08003c43 	.word	0x08003c43
 8003bf0:	08003c43 	.word	0x08003c43
 8003bf4:	08003c43 	.word	0x08003c43
 8003bf8:	08003b91 	.word	0x08003b91
 8003bfc:	08003c81 	.word	0x08003c81
 8003c00:	08003b91 	.word	0x08003b91
 8003c04:	08003b91 	.word	0x08003b91
 8003c08:	08003b91 	.word	0x08003b91
 8003c0c:	08003b91 	.word	0x08003b91
 8003c10:	08003cef 	.word	0x08003cef
 8003c14:	08003cbd 	.word	0x08003cbd
 8003c18:	08003c63 	.word	0x08003c63
 8003c1c:	08003b91 	.word	0x08003b91
 8003c20:	08003b91 	.word	0x08003b91
 8003c24:	08003ceb 	.word	0x08003ceb
 8003c28:	08003b91 	.word	0x08003b91
 8003c2c:	08003cc5 	.word	0x08003cc5
 8003c30:	08003b91 	.word	0x08003b91
 8003c34:	08003b91 	.word	0x08003b91
 8003c38:	08003c6b 	.word	0x08003c6b
 8003c3c:	3b45      	subs	r3, #69	; 0x45
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d8a6      	bhi.n	8003b90 <__ssvfiscanf_r+0xec>
 8003c42:	2305      	movs	r3, #5
 8003c44:	e01f      	b.n	8003c86 <__ssvfiscanf_r+0x1e2>
 8003c46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003c48:	4621      	mov	r1, r4
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	4798      	blx	r3
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	f43f af68 	beq.w	8003b24 <__ssvfiscanf_r+0x80>
 8003c54:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003c56:	2800      	cmp	r0, #0
 8003c58:	f040 808d 	bne.w	8003d76 <__ssvfiscanf_r+0x2d2>
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c60:	e08f      	b.n	8003d82 <__ssvfiscanf_r+0x2de>
 8003c62:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003c64:	f042 0220 	orr.w	r2, r2, #32
 8003c68:	9241      	str	r2, [sp, #260]	; 0x104
 8003c6a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c70:	9241      	str	r2, [sp, #260]	; 0x104
 8003c72:	2210      	movs	r2, #16
 8003c74:	2b6f      	cmp	r3, #111	; 0x6f
 8003c76:	9242      	str	r2, [sp, #264]	; 0x108
 8003c78:	bf34      	ite	cc
 8003c7a:	2303      	movcc	r3, #3
 8003c7c:	2304      	movcs	r3, #4
 8003c7e:	e002      	b.n	8003c86 <__ssvfiscanf_r+0x1e2>
 8003c80:	2300      	movs	r3, #0
 8003c82:	9342      	str	r3, [sp, #264]	; 0x108
 8003c84:	2303      	movs	r3, #3
 8003c86:	9347      	str	r3, [sp, #284]	; 0x11c
 8003c88:	6863      	ldr	r3, [r4, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	dd3d      	ble.n	8003d0a <__ssvfiscanf_r+0x266>
 8003c8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003c90:	0659      	lsls	r1, r3, #25
 8003c92:	d404      	bmi.n	8003c9e <__ssvfiscanf_r+0x1fa>
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	781a      	ldrb	r2, [r3, #0]
 8003c98:	5cba      	ldrb	r2, [r7, r2]
 8003c9a:	0712      	lsls	r2, r2, #28
 8003c9c:	d43c      	bmi.n	8003d18 <__ssvfiscanf_r+0x274>
 8003c9e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	dc4b      	bgt.n	8003d3c <__ssvfiscanf_r+0x298>
 8003ca4:	466b      	mov	r3, sp
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	a941      	add	r1, sp, #260	; 0x104
 8003caa:	4630      	mov	r0, r6
 8003cac:	f000 fa02 	bl	80040b4 <_scanf_chars>
 8003cb0:	2801      	cmp	r0, #1
 8003cb2:	d06a      	beq.n	8003d8a <__ssvfiscanf_r+0x2e6>
 8003cb4:	2802      	cmp	r0, #2
 8003cb6:	f47f af1c 	bne.w	8003af2 <__ssvfiscanf_r+0x4e>
 8003cba:	e7cb      	b.n	8003c54 <__ssvfiscanf_r+0x1b0>
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	9342      	str	r3, [sp, #264]	; 0x108
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	e7e0      	b.n	8003c86 <__ssvfiscanf_r+0x1e2>
 8003cc4:	220a      	movs	r2, #10
 8003cc6:	e7d5      	b.n	8003c74 <__ssvfiscanf_r+0x1d0>
 8003cc8:	4629      	mov	r1, r5
 8003cca:	4640      	mov	r0, r8
 8003ccc:	f000 fb52 	bl	8004374 <__sccl>
 8003cd0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cd6:	9341      	str	r3, [sp, #260]	; 0x104
 8003cd8:	4605      	mov	r5, r0
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e7d3      	b.n	8003c86 <__ssvfiscanf_r+0x1e2>
 8003cde:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce4:	9341      	str	r3, [sp, #260]	; 0x104
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e7cd      	b.n	8003c86 <__ssvfiscanf_r+0x1e2>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e7cb      	b.n	8003c86 <__ssvfiscanf_r+0x1e2>
 8003cee:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003cf0:	06c3      	lsls	r3, r0, #27
 8003cf2:	f53f aefe 	bmi.w	8003af2 <__ssvfiscanf_r+0x4e>
 8003cf6:	9b00      	ldr	r3, [sp, #0]
 8003cf8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003cfa:	1d19      	adds	r1, r3, #4
 8003cfc:	9100      	str	r1, [sp, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	07c0      	lsls	r0, r0, #31
 8003d02:	bf4c      	ite	mi
 8003d04:	801a      	strhmi	r2, [r3, #0]
 8003d06:	601a      	strpl	r2, [r3, #0]
 8003d08:	e6f3      	b.n	8003af2 <__ssvfiscanf_r+0x4e>
 8003d0a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	4630      	mov	r0, r6
 8003d10:	4798      	blx	r3
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d0bb      	beq.n	8003c8e <__ssvfiscanf_r+0x1ea>
 8003d16:	e79d      	b.n	8003c54 <__ssvfiscanf_r+0x1b0>
 8003d18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003d1a:	3201      	adds	r2, #1
 8003d1c:	9245      	str	r2, [sp, #276]	; 0x114
 8003d1e:	6862      	ldr	r2, [r4, #4]
 8003d20:	3a01      	subs	r2, #1
 8003d22:	2a00      	cmp	r2, #0
 8003d24:	6062      	str	r2, [r4, #4]
 8003d26:	dd02      	ble.n	8003d2e <__ssvfiscanf_r+0x28a>
 8003d28:	3301      	adds	r3, #1
 8003d2a:	6023      	str	r3, [r4, #0]
 8003d2c:	e7b2      	b.n	8003c94 <__ssvfiscanf_r+0x1f0>
 8003d2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003d30:	4621      	mov	r1, r4
 8003d32:	4630      	mov	r0, r6
 8003d34:	4798      	blx	r3
 8003d36:	2800      	cmp	r0, #0
 8003d38:	d0ac      	beq.n	8003c94 <__ssvfiscanf_r+0x1f0>
 8003d3a:	e78b      	b.n	8003c54 <__ssvfiscanf_r+0x1b0>
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	dc0f      	bgt.n	8003d60 <__ssvfiscanf_r+0x2bc>
 8003d40:	466b      	mov	r3, sp
 8003d42:	4622      	mov	r2, r4
 8003d44:	a941      	add	r1, sp, #260	; 0x104
 8003d46:	4630      	mov	r0, r6
 8003d48:	f000 fa0e 	bl	8004168 <_scanf_i>
 8003d4c:	e7b0      	b.n	8003cb0 <__ssvfiscanf_r+0x20c>
 8003d4e:	bf00      	nop
 8003d50:	080039f1 	.word	0x080039f1
 8003d54:	08003a6b 	.word	0x08003a6b
 8003d58:	0800542a 	.word	0x0800542a
 8003d5c:	08004cea 	.word	0x08004cea
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <__ssvfiscanf_r+0x2ec>)
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f43f aec5 	beq.w	8003af2 <__ssvfiscanf_r+0x4e>
 8003d68:	466b      	mov	r3, sp
 8003d6a:	4622      	mov	r2, r4
 8003d6c:	a941      	add	r1, sp, #260	; 0x104
 8003d6e:	4630      	mov	r0, r6
 8003d70:	f3af 8000 	nop.w
 8003d74:	e79c      	b.n	8003cb0 <__ssvfiscanf_r+0x20c>
 8003d76:	89a3      	ldrh	r3, [r4, #12]
 8003d78:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003d7c:	bf18      	it	ne
 8003d7e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8003d82:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d8a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003d8c:	e7f9      	b.n	8003d82 <__ssvfiscanf_r+0x2de>
 8003d8e:	bf00      	nop
 8003d90:	00000000 	.word	0x00000000

08003d94 <_printf_common>:
 8003d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d98:	4616      	mov	r6, r2
 8003d9a:	4699      	mov	r9, r3
 8003d9c:	688a      	ldr	r2, [r1, #8]
 8003d9e:	690b      	ldr	r3, [r1, #16]
 8003da0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003da4:	4293      	cmp	r3, r2
 8003da6:	bfb8      	it	lt
 8003da8:	4613      	movlt	r3, r2
 8003daa:	6033      	str	r3, [r6, #0]
 8003dac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003db0:	4607      	mov	r7, r0
 8003db2:	460c      	mov	r4, r1
 8003db4:	b10a      	cbz	r2, 8003dba <_printf_common+0x26>
 8003db6:	3301      	adds	r3, #1
 8003db8:	6033      	str	r3, [r6, #0]
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	0699      	lsls	r1, r3, #26
 8003dbe:	bf42      	ittt	mi
 8003dc0:	6833      	ldrmi	r3, [r6, #0]
 8003dc2:	3302      	addmi	r3, #2
 8003dc4:	6033      	strmi	r3, [r6, #0]
 8003dc6:	6825      	ldr	r5, [r4, #0]
 8003dc8:	f015 0506 	ands.w	r5, r5, #6
 8003dcc:	d106      	bne.n	8003ddc <_printf_common+0x48>
 8003dce:	f104 0a19 	add.w	sl, r4, #25
 8003dd2:	68e3      	ldr	r3, [r4, #12]
 8003dd4:	6832      	ldr	r2, [r6, #0]
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	42ab      	cmp	r3, r5
 8003dda:	dc26      	bgt.n	8003e2a <_printf_common+0x96>
 8003ddc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003de0:	1e13      	subs	r3, r2, #0
 8003de2:	6822      	ldr	r2, [r4, #0]
 8003de4:	bf18      	it	ne
 8003de6:	2301      	movne	r3, #1
 8003de8:	0692      	lsls	r2, r2, #26
 8003dea:	d42b      	bmi.n	8003e44 <_printf_common+0xb0>
 8003dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003df0:	4649      	mov	r1, r9
 8003df2:	4638      	mov	r0, r7
 8003df4:	47c0      	blx	r8
 8003df6:	3001      	adds	r0, #1
 8003df8:	d01e      	beq.n	8003e38 <_printf_common+0xa4>
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	6922      	ldr	r2, [r4, #16]
 8003dfe:	f003 0306 	and.w	r3, r3, #6
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	bf02      	ittt	eq
 8003e06:	68e5      	ldreq	r5, [r4, #12]
 8003e08:	6833      	ldreq	r3, [r6, #0]
 8003e0a:	1aed      	subeq	r5, r5, r3
 8003e0c:	68a3      	ldr	r3, [r4, #8]
 8003e0e:	bf0c      	ite	eq
 8003e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e14:	2500      	movne	r5, #0
 8003e16:	4293      	cmp	r3, r2
 8003e18:	bfc4      	itt	gt
 8003e1a:	1a9b      	subgt	r3, r3, r2
 8003e1c:	18ed      	addgt	r5, r5, r3
 8003e1e:	2600      	movs	r6, #0
 8003e20:	341a      	adds	r4, #26
 8003e22:	42b5      	cmp	r5, r6
 8003e24:	d11a      	bne.n	8003e5c <_printf_common+0xc8>
 8003e26:	2000      	movs	r0, #0
 8003e28:	e008      	b.n	8003e3c <_printf_common+0xa8>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	4652      	mov	r2, sl
 8003e2e:	4649      	mov	r1, r9
 8003e30:	4638      	mov	r0, r7
 8003e32:	47c0      	blx	r8
 8003e34:	3001      	adds	r0, #1
 8003e36:	d103      	bne.n	8003e40 <_printf_common+0xac>
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e40:	3501      	adds	r5, #1
 8003e42:	e7c6      	b.n	8003dd2 <_printf_common+0x3e>
 8003e44:	18e1      	adds	r1, r4, r3
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	2030      	movs	r0, #48	; 0x30
 8003e4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e4e:	4422      	add	r2, r4
 8003e50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e58:	3302      	adds	r3, #2
 8003e5a:	e7c7      	b.n	8003dec <_printf_common+0x58>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	4622      	mov	r2, r4
 8003e60:	4649      	mov	r1, r9
 8003e62:	4638      	mov	r0, r7
 8003e64:	47c0      	blx	r8
 8003e66:	3001      	adds	r0, #1
 8003e68:	d0e6      	beq.n	8003e38 <_printf_common+0xa4>
 8003e6a:	3601      	adds	r6, #1
 8003e6c:	e7d9      	b.n	8003e22 <_printf_common+0x8e>
	...

08003e70 <_printf_i>:
 8003e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e74:	7e0f      	ldrb	r7, [r1, #24]
 8003e76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e78:	2f78      	cmp	r7, #120	; 0x78
 8003e7a:	4691      	mov	r9, r2
 8003e7c:	4680      	mov	r8, r0
 8003e7e:	460c      	mov	r4, r1
 8003e80:	469a      	mov	sl, r3
 8003e82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e86:	d807      	bhi.n	8003e98 <_printf_i+0x28>
 8003e88:	2f62      	cmp	r7, #98	; 0x62
 8003e8a:	d80a      	bhi.n	8003ea2 <_printf_i+0x32>
 8003e8c:	2f00      	cmp	r7, #0
 8003e8e:	f000 80d4 	beq.w	800403a <_printf_i+0x1ca>
 8003e92:	2f58      	cmp	r7, #88	; 0x58
 8003e94:	f000 80c0 	beq.w	8004018 <_printf_i+0x1a8>
 8003e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ea0:	e03a      	b.n	8003f18 <_printf_i+0xa8>
 8003ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ea6:	2b15      	cmp	r3, #21
 8003ea8:	d8f6      	bhi.n	8003e98 <_printf_i+0x28>
 8003eaa:	a101      	add	r1, pc, #4	; (adr r1, 8003eb0 <_printf_i+0x40>)
 8003eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003eb0:	08003f09 	.word	0x08003f09
 8003eb4:	08003f1d 	.word	0x08003f1d
 8003eb8:	08003e99 	.word	0x08003e99
 8003ebc:	08003e99 	.word	0x08003e99
 8003ec0:	08003e99 	.word	0x08003e99
 8003ec4:	08003e99 	.word	0x08003e99
 8003ec8:	08003f1d 	.word	0x08003f1d
 8003ecc:	08003e99 	.word	0x08003e99
 8003ed0:	08003e99 	.word	0x08003e99
 8003ed4:	08003e99 	.word	0x08003e99
 8003ed8:	08003e99 	.word	0x08003e99
 8003edc:	08004021 	.word	0x08004021
 8003ee0:	08003f49 	.word	0x08003f49
 8003ee4:	08003fdb 	.word	0x08003fdb
 8003ee8:	08003e99 	.word	0x08003e99
 8003eec:	08003e99 	.word	0x08003e99
 8003ef0:	08004043 	.word	0x08004043
 8003ef4:	08003e99 	.word	0x08003e99
 8003ef8:	08003f49 	.word	0x08003f49
 8003efc:	08003e99 	.word	0x08003e99
 8003f00:	08003e99 	.word	0x08003e99
 8003f04:	08003fe3 	.word	0x08003fe3
 8003f08:	682b      	ldr	r3, [r5, #0]
 8003f0a:	1d1a      	adds	r2, r3, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	602a      	str	r2, [r5, #0]
 8003f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e09f      	b.n	800405c <_printf_i+0x1ec>
 8003f1c:	6820      	ldr	r0, [r4, #0]
 8003f1e:	682b      	ldr	r3, [r5, #0]
 8003f20:	0607      	lsls	r7, r0, #24
 8003f22:	f103 0104 	add.w	r1, r3, #4
 8003f26:	6029      	str	r1, [r5, #0]
 8003f28:	d501      	bpl.n	8003f2e <_printf_i+0xbe>
 8003f2a:	681e      	ldr	r6, [r3, #0]
 8003f2c:	e003      	b.n	8003f36 <_printf_i+0xc6>
 8003f2e:	0646      	lsls	r6, r0, #25
 8003f30:	d5fb      	bpl.n	8003f2a <_printf_i+0xba>
 8003f32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003f36:	2e00      	cmp	r6, #0
 8003f38:	da03      	bge.n	8003f42 <_printf_i+0xd2>
 8003f3a:	232d      	movs	r3, #45	; 0x2d
 8003f3c:	4276      	negs	r6, r6
 8003f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f42:	485a      	ldr	r0, [pc, #360]	; (80040ac <_printf_i+0x23c>)
 8003f44:	230a      	movs	r3, #10
 8003f46:	e012      	b.n	8003f6e <_printf_i+0xfe>
 8003f48:	682b      	ldr	r3, [r5, #0]
 8003f4a:	6820      	ldr	r0, [r4, #0]
 8003f4c:	1d19      	adds	r1, r3, #4
 8003f4e:	6029      	str	r1, [r5, #0]
 8003f50:	0605      	lsls	r5, r0, #24
 8003f52:	d501      	bpl.n	8003f58 <_printf_i+0xe8>
 8003f54:	681e      	ldr	r6, [r3, #0]
 8003f56:	e002      	b.n	8003f5e <_printf_i+0xee>
 8003f58:	0641      	lsls	r1, r0, #25
 8003f5a:	d5fb      	bpl.n	8003f54 <_printf_i+0xe4>
 8003f5c:	881e      	ldrh	r6, [r3, #0]
 8003f5e:	4853      	ldr	r0, [pc, #332]	; (80040ac <_printf_i+0x23c>)
 8003f60:	2f6f      	cmp	r7, #111	; 0x6f
 8003f62:	bf0c      	ite	eq
 8003f64:	2308      	moveq	r3, #8
 8003f66:	230a      	movne	r3, #10
 8003f68:	2100      	movs	r1, #0
 8003f6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f6e:	6865      	ldr	r5, [r4, #4]
 8003f70:	60a5      	str	r5, [r4, #8]
 8003f72:	2d00      	cmp	r5, #0
 8003f74:	bfa2      	ittt	ge
 8003f76:	6821      	ldrge	r1, [r4, #0]
 8003f78:	f021 0104 	bicge.w	r1, r1, #4
 8003f7c:	6021      	strge	r1, [r4, #0]
 8003f7e:	b90e      	cbnz	r6, 8003f84 <_printf_i+0x114>
 8003f80:	2d00      	cmp	r5, #0
 8003f82:	d04b      	beq.n	800401c <_printf_i+0x1ac>
 8003f84:	4615      	mov	r5, r2
 8003f86:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f8a:	fb03 6711 	mls	r7, r3, r1, r6
 8003f8e:	5dc7      	ldrb	r7, [r0, r7]
 8003f90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f94:	4637      	mov	r7, r6
 8003f96:	42bb      	cmp	r3, r7
 8003f98:	460e      	mov	r6, r1
 8003f9a:	d9f4      	bls.n	8003f86 <_printf_i+0x116>
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d10b      	bne.n	8003fb8 <_printf_i+0x148>
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	07de      	lsls	r6, r3, #31
 8003fa4:	d508      	bpl.n	8003fb8 <_printf_i+0x148>
 8003fa6:	6923      	ldr	r3, [r4, #16]
 8003fa8:	6861      	ldr	r1, [r4, #4]
 8003faa:	4299      	cmp	r1, r3
 8003fac:	bfde      	ittt	le
 8003fae:	2330      	movle	r3, #48	; 0x30
 8003fb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fb4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003fb8:	1b52      	subs	r2, r2, r5
 8003fba:	6122      	str	r2, [r4, #16]
 8003fbc:	f8cd a000 	str.w	sl, [sp]
 8003fc0:	464b      	mov	r3, r9
 8003fc2:	aa03      	add	r2, sp, #12
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	4640      	mov	r0, r8
 8003fc8:	f7ff fee4 	bl	8003d94 <_printf_common>
 8003fcc:	3001      	adds	r0, #1
 8003fce:	d14a      	bne.n	8004066 <_printf_i+0x1f6>
 8003fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fd4:	b004      	add	sp, #16
 8003fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	f043 0320 	orr.w	r3, r3, #32
 8003fe0:	6023      	str	r3, [r4, #0]
 8003fe2:	4833      	ldr	r0, [pc, #204]	; (80040b0 <_printf_i+0x240>)
 8003fe4:	2778      	movs	r7, #120	; 0x78
 8003fe6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	6829      	ldr	r1, [r5, #0]
 8003fee:	061f      	lsls	r7, r3, #24
 8003ff0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ff4:	d402      	bmi.n	8003ffc <_printf_i+0x18c>
 8003ff6:	065f      	lsls	r7, r3, #25
 8003ff8:	bf48      	it	mi
 8003ffa:	b2b6      	uxthmi	r6, r6
 8003ffc:	07df      	lsls	r7, r3, #31
 8003ffe:	bf48      	it	mi
 8004000:	f043 0320 	orrmi.w	r3, r3, #32
 8004004:	6029      	str	r1, [r5, #0]
 8004006:	bf48      	it	mi
 8004008:	6023      	strmi	r3, [r4, #0]
 800400a:	b91e      	cbnz	r6, 8004014 <_printf_i+0x1a4>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	f023 0320 	bic.w	r3, r3, #32
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	2310      	movs	r3, #16
 8004016:	e7a7      	b.n	8003f68 <_printf_i+0xf8>
 8004018:	4824      	ldr	r0, [pc, #144]	; (80040ac <_printf_i+0x23c>)
 800401a:	e7e4      	b.n	8003fe6 <_printf_i+0x176>
 800401c:	4615      	mov	r5, r2
 800401e:	e7bd      	b.n	8003f9c <_printf_i+0x12c>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	6826      	ldr	r6, [r4, #0]
 8004024:	6961      	ldr	r1, [r4, #20]
 8004026:	1d18      	adds	r0, r3, #4
 8004028:	6028      	str	r0, [r5, #0]
 800402a:	0635      	lsls	r5, r6, #24
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	d501      	bpl.n	8004034 <_printf_i+0x1c4>
 8004030:	6019      	str	r1, [r3, #0]
 8004032:	e002      	b.n	800403a <_printf_i+0x1ca>
 8004034:	0670      	lsls	r0, r6, #25
 8004036:	d5fb      	bpl.n	8004030 <_printf_i+0x1c0>
 8004038:	8019      	strh	r1, [r3, #0]
 800403a:	2300      	movs	r3, #0
 800403c:	6123      	str	r3, [r4, #16]
 800403e:	4615      	mov	r5, r2
 8004040:	e7bc      	b.n	8003fbc <_printf_i+0x14c>
 8004042:	682b      	ldr	r3, [r5, #0]
 8004044:	1d1a      	adds	r2, r3, #4
 8004046:	602a      	str	r2, [r5, #0]
 8004048:	681d      	ldr	r5, [r3, #0]
 800404a:	6862      	ldr	r2, [r4, #4]
 800404c:	2100      	movs	r1, #0
 800404e:	4628      	mov	r0, r5
 8004050:	f7fc f8be 	bl	80001d0 <memchr>
 8004054:	b108      	cbz	r0, 800405a <_printf_i+0x1ea>
 8004056:	1b40      	subs	r0, r0, r5
 8004058:	6060      	str	r0, [r4, #4]
 800405a:	6863      	ldr	r3, [r4, #4]
 800405c:	6123      	str	r3, [r4, #16]
 800405e:	2300      	movs	r3, #0
 8004060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004064:	e7aa      	b.n	8003fbc <_printf_i+0x14c>
 8004066:	6923      	ldr	r3, [r4, #16]
 8004068:	462a      	mov	r2, r5
 800406a:	4649      	mov	r1, r9
 800406c:	4640      	mov	r0, r8
 800406e:	47d0      	blx	sl
 8004070:	3001      	adds	r0, #1
 8004072:	d0ad      	beq.n	8003fd0 <_printf_i+0x160>
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	079b      	lsls	r3, r3, #30
 8004078:	d413      	bmi.n	80040a2 <_printf_i+0x232>
 800407a:	68e0      	ldr	r0, [r4, #12]
 800407c:	9b03      	ldr	r3, [sp, #12]
 800407e:	4298      	cmp	r0, r3
 8004080:	bfb8      	it	lt
 8004082:	4618      	movlt	r0, r3
 8004084:	e7a6      	b.n	8003fd4 <_printf_i+0x164>
 8004086:	2301      	movs	r3, #1
 8004088:	4632      	mov	r2, r6
 800408a:	4649      	mov	r1, r9
 800408c:	4640      	mov	r0, r8
 800408e:	47d0      	blx	sl
 8004090:	3001      	adds	r0, #1
 8004092:	d09d      	beq.n	8003fd0 <_printf_i+0x160>
 8004094:	3501      	adds	r5, #1
 8004096:	68e3      	ldr	r3, [r4, #12]
 8004098:	9903      	ldr	r1, [sp, #12]
 800409a:	1a5b      	subs	r3, r3, r1
 800409c:	42ab      	cmp	r3, r5
 800409e:	dcf2      	bgt.n	8004086 <_printf_i+0x216>
 80040a0:	e7eb      	b.n	800407a <_printf_i+0x20a>
 80040a2:	2500      	movs	r5, #0
 80040a4:	f104 0619 	add.w	r6, r4, #25
 80040a8:	e7f5      	b.n	8004096 <_printf_i+0x226>
 80040aa:	bf00      	nop
 80040ac:	080053ec 	.word	0x080053ec
 80040b0:	080053fd 	.word	0x080053fd

080040b4 <_scanf_chars>:
 80040b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040b8:	4615      	mov	r5, r2
 80040ba:	688a      	ldr	r2, [r1, #8]
 80040bc:	4680      	mov	r8, r0
 80040be:	460c      	mov	r4, r1
 80040c0:	b932      	cbnz	r2, 80040d0 <_scanf_chars+0x1c>
 80040c2:	698a      	ldr	r2, [r1, #24]
 80040c4:	2a00      	cmp	r2, #0
 80040c6:	bf0c      	ite	eq
 80040c8:	2201      	moveq	r2, #1
 80040ca:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80040ce:	608a      	str	r2, [r1, #8]
 80040d0:	6822      	ldr	r2, [r4, #0]
 80040d2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004164 <_scanf_chars+0xb0>
 80040d6:	06d1      	lsls	r1, r2, #27
 80040d8:	bf5f      	itttt	pl
 80040da:	681a      	ldrpl	r2, [r3, #0]
 80040dc:	1d11      	addpl	r1, r2, #4
 80040de:	6019      	strpl	r1, [r3, #0]
 80040e0:	6816      	ldrpl	r6, [r2, #0]
 80040e2:	2700      	movs	r7, #0
 80040e4:	69a0      	ldr	r0, [r4, #24]
 80040e6:	b188      	cbz	r0, 800410c <_scanf_chars+0x58>
 80040e8:	2801      	cmp	r0, #1
 80040ea:	d107      	bne.n	80040fc <_scanf_chars+0x48>
 80040ec:	682a      	ldr	r2, [r5, #0]
 80040ee:	7811      	ldrb	r1, [r2, #0]
 80040f0:	6962      	ldr	r2, [r4, #20]
 80040f2:	5c52      	ldrb	r2, [r2, r1]
 80040f4:	b952      	cbnz	r2, 800410c <_scanf_chars+0x58>
 80040f6:	2f00      	cmp	r7, #0
 80040f8:	d031      	beq.n	800415e <_scanf_chars+0xaa>
 80040fa:	e022      	b.n	8004142 <_scanf_chars+0x8e>
 80040fc:	2802      	cmp	r0, #2
 80040fe:	d120      	bne.n	8004142 <_scanf_chars+0x8e>
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004108:	071b      	lsls	r3, r3, #28
 800410a:	d41a      	bmi.n	8004142 <_scanf_chars+0x8e>
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	06da      	lsls	r2, r3, #27
 8004110:	bf5e      	ittt	pl
 8004112:	682b      	ldrpl	r3, [r5, #0]
 8004114:	781b      	ldrbpl	r3, [r3, #0]
 8004116:	f806 3b01 	strbpl.w	r3, [r6], #1
 800411a:	682a      	ldr	r2, [r5, #0]
 800411c:	686b      	ldr	r3, [r5, #4]
 800411e:	3201      	adds	r2, #1
 8004120:	602a      	str	r2, [r5, #0]
 8004122:	68a2      	ldr	r2, [r4, #8]
 8004124:	3b01      	subs	r3, #1
 8004126:	3a01      	subs	r2, #1
 8004128:	606b      	str	r3, [r5, #4]
 800412a:	3701      	adds	r7, #1
 800412c:	60a2      	str	r2, [r4, #8]
 800412e:	b142      	cbz	r2, 8004142 <_scanf_chars+0x8e>
 8004130:	2b00      	cmp	r3, #0
 8004132:	dcd7      	bgt.n	80040e4 <_scanf_chars+0x30>
 8004134:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004138:	4629      	mov	r1, r5
 800413a:	4640      	mov	r0, r8
 800413c:	4798      	blx	r3
 800413e:	2800      	cmp	r0, #0
 8004140:	d0d0      	beq.n	80040e4 <_scanf_chars+0x30>
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	f013 0310 	ands.w	r3, r3, #16
 8004148:	d105      	bne.n	8004156 <_scanf_chars+0xa2>
 800414a:	68e2      	ldr	r2, [r4, #12]
 800414c:	3201      	adds	r2, #1
 800414e:	60e2      	str	r2, [r4, #12]
 8004150:	69a2      	ldr	r2, [r4, #24]
 8004152:	b102      	cbz	r2, 8004156 <_scanf_chars+0xa2>
 8004154:	7033      	strb	r3, [r6, #0]
 8004156:	6923      	ldr	r3, [r4, #16]
 8004158:	443b      	add	r3, r7
 800415a:	6123      	str	r3, [r4, #16]
 800415c:	2000      	movs	r0, #0
 800415e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004162:	bf00      	nop
 8004164:	0800542a 	.word	0x0800542a

08004168 <_scanf_i>:
 8004168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416c:	4698      	mov	r8, r3
 800416e:	4b74      	ldr	r3, [pc, #464]	; (8004340 <_scanf_i+0x1d8>)
 8004170:	460c      	mov	r4, r1
 8004172:	4682      	mov	sl, r0
 8004174:	4616      	mov	r6, r2
 8004176:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800417a:	b087      	sub	sp, #28
 800417c:	ab03      	add	r3, sp, #12
 800417e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004182:	4b70      	ldr	r3, [pc, #448]	; (8004344 <_scanf_i+0x1dc>)
 8004184:	69a1      	ldr	r1, [r4, #24]
 8004186:	4a70      	ldr	r2, [pc, #448]	; (8004348 <_scanf_i+0x1e0>)
 8004188:	2903      	cmp	r1, #3
 800418a:	bf18      	it	ne
 800418c:	461a      	movne	r2, r3
 800418e:	68a3      	ldr	r3, [r4, #8]
 8004190:	9201      	str	r2, [sp, #4]
 8004192:	1e5a      	subs	r2, r3, #1
 8004194:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004198:	bf88      	it	hi
 800419a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800419e:	4627      	mov	r7, r4
 80041a0:	bf82      	ittt	hi
 80041a2:	eb03 0905 	addhi.w	r9, r3, r5
 80041a6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80041aa:	60a3      	strhi	r3, [r4, #8]
 80041ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 80041b0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80041b4:	bf98      	it	ls
 80041b6:	f04f 0900 	movls.w	r9, #0
 80041ba:	6023      	str	r3, [r4, #0]
 80041bc:	463d      	mov	r5, r7
 80041be:	f04f 0b00 	mov.w	fp, #0
 80041c2:	6831      	ldr	r1, [r6, #0]
 80041c4:	ab03      	add	r3, sp, #12
 80041c6:	7809      	ldrb	r1, [r1, #0]
 80041c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80041cc:	2202      	movs	r2, #2
 80041ce:	f7fb ffff 	bl	80001d0 <memchr>
 80041d2:	b328      	cbz	r0, 8004220 <_scanf_i+0xb8>
 80041d4:	f1bb 0f01 	cmp.w	fp, #1
 80041d8:	d159      	bne.n	800428e <_scanf_i+0x126>
 80041da:	6862      	ldr	r2, [r4, #4]
 80041dc:	b92a      	cbnz	r2, 80041ea <_scanf_i+0x82>
 80041de:	6822      	ldr	r2, [r4, #0]
 80041e0:	2308      	movs	r3, #8
 80041e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e6:	6063      	str	r3, [r4, #4]
 80041e8:	6022      	str	r2, [r4, #0]
 80041ea:	6822      	ldr	r2, [r4, #0]
 80041ec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80041f0:	6022      	str	r2, [r4, #0]
 80041f2:	68a2      	ldr	r2, [r4, #8]
 80041f4:	1e51      	subs	r1, r2, #1
 80041f6:	60a1      	str	r1, [r4, #8]
 80041f8:	b192      	cbz	r2, 8004220 <_scanf_i+0xb8>
 80041fa:	6832      	ldr	r2, [r6, #0]
 80041fc:	1c51      	adds	r1, r2, #1
 80041fe:	6031      	str	r1, [r6, #0]
 8004200:	7812      	ldrb	r2, [r2, #0]
 8004202:	f805 2b01 	strb.w	r2, [r5], #1
 8004206:	6872      	ldr	r2, [r6, #4]
 8004208:	3a01      	subs	r2, #1
 800420a:	2a00      	cmp	r2, #0
 800420c:	6072      	str	r2, [r6, #4]
 800420e:	dc07      	bgt.n	8004220 <_scanf_i+0xb8>
 8004210:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004214:	4631      	mov	r1, r6
 8004216:	4650      	mov	r0, sl
 8004218:	4790      	blx	r2
 800421a:	2800      	cmp	r0, #0
 800421c:	f040 8085 	bne.w	800432a <_scanf_i+0x1c2>
 8004220:	f10b 0b01 	add.w	fp, fp, #1
 8004224:	f1bb 0f03 	cmp.w	fp, #3
 8004228:	d1cb      	bne.n	80041c2 <_scanf_i+0x5a>
 800422a:	6863      	ldr	r3, [r4, #4]
 800422c:	b90b      	cbnz	r3, 8004232 <_scanf_i+0xca>
 800422e:	230a      	movs	r3, #10
 8004230:	6063      	str	r3, [r4, #4]
 8004232:	6863      	ldr	r3, [r4, #4]
 8004234:	4945      	ldr	r1, [pc, #276]	; (800434c <_scanf_i+0x1e4>)
 8004236:	6960      	ldr	r0, [r4, #20]
 8004238:	1ac9      	subs	r1, r1, r3
 800423a:	f000 f89b 	bl	8004374 <__sccl>
 800423e:	f04f 0b00 	mov.w	fp, #0
 8004242:	68a3      	ldr	r3, [r4, #8]
 8004244:	6822      	ldr	r2, [r4, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d03d      	beq.n	80042c6 <_scanf_i+0x15e>
 800424a:	6831      	ldr	r1, [r6, #0]
 800424c:	6960      	ldr	r0, [r4, #20]
 800424e:	f891 c000 	ldrb.w	ip, [r1]
 8004252:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004256:	2800      	cmp	r0, #0
 8004258:	d035      	beq.n	80042c6 <_scanf_i+0x15e>
 800425a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800425e:	d124      	bne.n	80042aa <_scanf_i+0x142>
 8004260:	0510      	lsls	r0, r2, #20
 8004262:	d522      	bpl.n	80042aa <_scanf_i+0x142>
 8004264:	f10b 0b01 	add.w	fp, fp, #1
 8004268:	f1b9 0f00 	cmp.w	r9, #0
 800426c:	d003      	beq.n	8004276 <_scanf_i+0x10e>
 800426e:	3301      	adds	r3, #1
 8004270:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004274:	60a3      	str	r3, [r4, #8]
 8004276:	6873      	ldr	r3, [r6, #4]
 8004278:	3b01      	subs	r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	6073      	str	r3, [r6, #4]
 800427e:	dd1b      	ble.n	80042b8 <_scanf_i+0x150>
 8004280:	6833      	ldr	r3, [r6, #0]
 8004282:	3301      	adds	r3, #1
 8004284:	6033      	str	r3, [r6, #0]
 8004286:	68a3      	ldr	r3, [r4, #8]
 8004288:	3b01      	subs	r3, #1
 800428a:	60a3      	str	r3, [r4, #8]
 800428c:	e7d9      	b.n	8004242 <_scanf_i+0xda>
 800428e:	f1bb 0f02 	cmp.w	fp, #2
 8004292:	d1ae      	bne.n	80041f2 <_scanf_i+0x8a>
 8004294:	6822      	ldr	r2, [r4, #0]
 8004296:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800429a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800429e:	d1bf      	bne.n	8004220 <_scanf_i+0xb8>
 80042a0:	2310      	movs	r3, #16
 80042a2:	6063      	str	r3, [r4, #4]
 80042a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a8:	e7a2      	b.n	80041f0 <_scanf_i+0x88>
 80042aa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80042ae:	6022      	str	r2, [r4, #0]
 80042b0:	780b      	ldrb	r3, [r1, #0]
 80042b2:	f805 3b01 	strb.w	r3, [r5], #1
 80042b6:	e7de      	b.n	8004276 <_scanf_i+0x10e>
 80042b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80042bc:	4631      	mov	r1, r6
 80042be:	4650      	mov	r0, sl
 80042c0:	4798      	blx	r3
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d0df      	beq.n	8004286 <_scanf_i+0x11e>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	05d9      	lsls	r1, r3, #23
 80042ca:	d50d      	bpl.n	80042e8 <_scanf_i+0x180>
 80042cc:	42bd      	cmp	r5, r7
 80042ce:	d909      	bls.n	80042e4 <_scanf_i+0x17c>
 80042d0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80042d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042d8:	4632      	mov	r2, r6
 80042da:	4650      	mov	r0, sl
 80042dc:	4798      	blx	r3
 80042de:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80042e2:	464d      	mov	r5, r9
 80042e4:	42bd      	cmp	r5, r7
 80042e6:	d028      	beq.n	800433a <_scanf_i+0x1d2>
 80042e8:	6822      	ldr	r2, [r4, #0]
 80042ea:	f012 0210 	ands.w	r2, r2, #16
 80042ee:	d113      	bne.n	8004318 <_scanf_i+0x1b0>
 80042f0:	702a      	strb	r2, [r5, #0]
 80042f2:	6863      	ldr	r3, [r4, #4]
 80042f4:	9e01      	ldr	r6, [sp, #4]
 80042f6:	4639      	mov	r1, r7
 80042f8:	4650      	mov	r0, sl
 80042fa:	47b0      	blx	r6
 80042fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004300:	6821      	ldr	r1, [r4, #0]
 8004302:	1d1a      	adds	r2, r3, #4
 8004304:	f8c8 2000 	str.w	r2, [r8]
 8004308:	f011 0f20 	tst.w	r1, #32
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	d00f      	beq.n	8004330 <_scanf_i+0x1c8>
 8004310:	6018      	str	r0, [r3, #0]
 8004312:	68e3      	ldr	r3, [r4, #12]
 8004314:	3301      	adds	r3, #1
 8004316:	60e3      	str	r3, [r4, #12]
 8004318:	6923      	ldr	r3, [r4, #16]
 800431a:	1bed      	subs	r5, r5, r7
 800431c:	445d      	add	r5, fp
 800431e:	442b      	add	r3, r5
 8004320:	6123      	str	r3, [r4, #16]
 8004322:	2000      	movs	r0, #0
 8004324:	b007      	add	sp, #28
 8004326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800432a:	f04f 0b00 	mov.w	fp, #0
 800432e:	e7ca      	b.n	80042c6 <_scanf_i+0x15e>
 8004330:	07ca      	lsls	r2, r1, #31
 8004332:	bf4c      	ite	mi
 8004334:	8018      	strhmi	r0, [r3, #0]
 8004336:	6018      	strpl	r0, [r3, #0]
 8004338:	e7eb      	b.n	8004312 <_scanf_i+0x1aa>
 800433a:	2001      	movs	r0, #1
 800433c:	e7f2      	b.n	8004324 <_scanf_i+0x1bc>
 800433e:	bf00      	nop
 8004340:	08004c8c 	.word	0x08004c8c
 8004344:	0800465d 	.word	0x0800465d
 8004348:	08004575 	.word	0x08004575
 800434c:	0800541e 	.word	0x0800541e

08004350 <_read_r>:
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	4d07      	ldr	r5, [pc, #28]	; (8004370 <_read_r+0x20>)
 8004354:	4604      	mov	r4, r0
 8004356:	4608      	mov	r0, r1
 8004358:	4611      	mov	r1, r2
 800435a:	2200      	movs	r2, #0
 800435c:	602a      	str	r2, [r5, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	f000 fa12 	bl	8004788 <_read>
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d102      	bne.n	800436e <_read_r+0x1e>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	b103      	cbz	r3, 800436e <_read_r+0x1e>
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	bd38      	pop	{r3, r4, r5, pc}
 8004370:	20000d10 	.word	0x20000d10

08004374 <__sccl>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	780b      	ldrb	r3, [r1, #0]
 8004378:	4604      	mov	r4, r0
 800437a:	2b5e      	cmp	r3, #94	; 0x5e
 800437c:	bf0b      	itete	eq
 800437e:	784b      	ldrbeq	r3, [r1, #1]
 8004380:	1c4a      	addne	r2, r1, #1
 8004382:	1c8a      	addeq	r2, r1, #2
 8004384:	2100      	movne	r1, #0
 8004386:	bf08      	it	eq
 8004388:	2101      	moveq	r1, #1
 800438a:	3801      	subs	r0, #1
 800438c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004390:	f800 1f01 	strb.w	r1, [r0, #1]!
 8004394:	42a8      	cmp	r0, r5
 8004396:	d1fb      	bne.n	8004390 <__sccl+0x1c>
 8004398:	b90b      	cbnz	r3, 800439e <__sccl+0x2a>
 800439a:	1e50      	subs	r0, r2, #1
 800439c:	bd70      	pop	{r4, r5, r6, pc}
 800439e:	f081 0101 	eor.w	r1, r1, #1
 80043a2:	54e1      	strb	r1, [r4, r3]
 80043a4:	4610      	mov	r0, r2
 80043a6:	4602      	mov	r2, r0
 80043a8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80043ac:	2d2d      	cmp	r5, #45	; 0x2d
 80043ae:	d005      	beq.n	80043bc <__sccl+0x48>
 80043b0:	2d5d      	cmp	r5, #93	; 0x5d
 80043b2:	d016      	beq.n	80043e2 <__sccl+0x6e>
 80043b4:	2d00      	cmp	r5, #0
 80043b6:	d0f1      	beq.n	800439c <__sccl+0x28>
 80043b8:	462b      	mov	r3, r5
 80043ba:	e7f2      	b.n	80043a2 <__sccl+0x2e>
 80043bc:	7846      	ldrb	r6, [r0, #1]
 80043be:	2e5d      	cmp	r6, #93	; 0x5d
 80043c0:	d0fa      	beq.n	80043b8 <__sccl+0x44>
 80043c2:	42b3      	cmp	r3, r6
 80043c4:	dcf8      	bgt.n	80043b8 <__sccl+0x44>
 80043c6:	3002      	adds	r0, #2
 80043c8:	461a      	mov	r2, r3
 80043ca:	3201      	adds	r2, #1
 80043cc:	4296      	cmp	r6, r2
 80043ce:	54a1      	strb	r1, [r4, r2]
 80043d0:	dcfb      	bgt.n	80043ca <__sccl+0x56>
 80043d2:	1af2      	subs	r2, r6, r3
 80043d4:	3a01      	subs	r2, #1
 80043d6:	1c5d      	adds	r5, r3, #1
 80043d8:	42b3      	cmp	r3, r6
 80043da:	bfa8      	it	ge
 80043dc:	2200      	movge	r2, #0
 80043de:	18ab      	adds	r3, r5, r2
 80043e0:	e7e1      	b.n	80043a6 <__sccl+0x32>
 80043e2:	4610      	mov	r0, r2
 80043e4:	e7da      	b.n	800439c <__sccl+0x28>

080043e6 <_raise_r>:
 80043e6:	291f      	cmp	r1, #31
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4604      	mov	r4, r0
 80043ec:	460d      	mov	r5, r1
 80043ee:	d904      	bls.n	80043fa <_raise_r+0x14>
 80043f0:	2316      	movs	r3, #22
 80043f2:	6003      	str	r3, [r0, #0]
 80043f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043f8:	bd38      	pop	{r3, r4, r5, pc}
 80043fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80043fc:	b112      	cbz	r2, 8004404 <_raise_r+0x1e>
 80043fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004402:	b94b      	cbnz	r3, 8004418 <_raise_r+0x32>
 8004404:	4620      	mov	r0, r4
 8004406:	f000 f831 	bl	800446c <_getpid_r>
 800440a:	462a      	mov	r2, r5
 800440c:	4601      	mov	r1, r0
 800440e:	4620      	mov	r0, r4
 8004410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004414:	f000 b818 	b.w	8004448 <_kill_r>
 8004418:	2b01      	cmp	r3, #1
 800441a:	d00a      	beq.n	8004432 <_raise_r+0x4c>
 800441c:	1c59      	adds	r1, r3, #1
 800441e:	d103      	bne.n	8004428 <_raise_r+0x42>
 8004420:	2316      	movs	r3, #22
 8004422:	6003      	str	r3, [r0, #0]
 8004424:	2001      	movs	r0, #1
 8004426:	e7e7      	b.n	80043f8 <_raise_r+0x12>
 8004428:	2400      	movs	r4, #0
 800442a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800442e:	4628      	mov	r0, r5
 8004430:	4798      	blx	r3
 8004432:	2000      	movs	r0, #0
 8004434:	e7e0      	b.n	80043f8 <_raise_r+0x12>
	...

08004438 <raise>:
 8004438:	4b02      	ldr	r3, [pc, #8]	; (8004444 <raise+0xc>)
 800443a:	4601      	mov	r1, r0
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	f7ff bfd2 	b.w	80043e6 <_raise_r>
 8004442:	bf00      	nop
 8004444:	20000060 	.word	0x20000060

08004448 <_kill_r>:
 8004448:	b538      	push	{r3, r4, r5, lr}
 800444a:	4d07      	ldr	r5, [pc, #28]	; (8004468 <_kill_r+0x20>)
 800444c:	2300      	movs	r3, #0
 800444e:	4604      	mov	r4, r0
 8004450:	4608      	mov	r0, r1
 8004452:	4611      	mov	r1, r2
 8004454:	602b      	str	r3, [r5, #0]
 8004456:	f000 f987 	bl	8004768 <_kill>
 800445a:	1c43      	adds	r3, r0, #1
 800445c:	d102      	bne.n	8004464 <_kill_r+0x1c>
 800445e:	682b      	ldr	r3, [r5, #0]
 8004460:	b103      	cbz	r3, 8004464 <_kill_r+0x1c>
 8004462:	6023      	str	r3, [r4, #0]
 8004464:	bd38      	pop	{r3, r4, r5, pc}
 8004466:	bf00      	nop
 8004468:	20000d10 	.word	0x20000d10

0800446c <_getpid_r>:
 800446c:	f000 b96c 	b.w	8004748 <_getpid>

08004470 <_strtol_l.constprop.0>:
 8004470:	2b01      	cmp	r3, #1
 8004472:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004476:	d001      	beq.n	800447c <_strtol_l.constprop.0+0xc>
 8004478:	2b24      	cmp	r3, #36	; 0x24
 800447a:	d906      	bls.n	800448a <_strtol_l.constprop.0+0x1a>
 800447c:	f7fe f8c2 	bl	8002604 <__errno>
 8004480:	2316      	movs	r3, #22
 8004482:	6003      	str	r3, [r0, #0]
 8004484:	2000      	movs	r0, #0
 8004486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800448a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004570 <_strtol_l.constprop.0+0x100>
 800448e:	460d      	mov	r5, r1
 8004490:	462e      	mov	r6, r5
 8004492:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004496:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800449a:	f017 0708 	ands.w	r7, r7, #8
 800449e:	d1f7      	bne.n	8004490 <_strtol_l.constprop.0+0x20>
 80044a0:	2c2d      	cmp	r4, #45	; 0x2d
 80044a2:	d132      	bne.n	800450a <_strtol_l.constprop.0+0x9a>
 80044a4:	782c      	ldrb	r4, [r5, #0]
 80044a6:	2701      	movs	r7, #1
 80044a8:	1cb5      	adds	r5, r6, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d05b      	beq.n	8004566 <_strtol_l.constprop.0+0xf6>
 80044ae:	2b10      	cmp	r3, #16
 80044b0:	d109      	bne.n	80044c6 <_strtol_l.constprop.0+0x56>
 80044b2:	2c30      	cmp	r4, #48	; 0x30
 80044b4:	d107      	bne.n	80044c6 <_strtol_l.constprop.0+0x56>
 80044b6:	782c      	ldrb	r4, [r5, #0]
 80044b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80044bc:	2c58      	cmp	r4, #88	; 0x58
 80044be:	d14d      	bne.n	800455c <_strtol_l.constprop.0+0xec>
 80044c0:	786c      	ldrb	r4, [r5, #1]
 80044c2:	2310      	movs	r3, #16
 80044c4:	3502      	adds	r5, #2
 80044c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80044ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80044ce:	f04f 0e00 	mov.w	lr, #0
 80044d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80044d6:	4676      	mov	r6, lr
 80044d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80044dc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80044e0:	f1bc 0f09 	cmp.w	ip, #9
 80044e4:	d816      	bhi.n	8004514 <_strtol_l.constprop.0+0xa4>
 80044e6:	4664      	mov	r4, ip
 80044e8:	42a3      	cmp	r3, r4
 80044ea:	dd24      	ble.n	8004536 <_strtol_l.constprop.0+0xc6>
 80044ec:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80044f0:	d008      	beq.n	8004504 <_strtol_l.constprop.0+0x94>
 80044f2:	45b1      	cmp	r9, r6
 80044f4:	d31c      	bcc.n	8004530 <_strtol_l.constprop.0+0xc0>
 80044f6:	d101      	bne.n	80044fc <_strtol_l.constprop.0+0x8c>
 80044f8:	45a2      	cmp	sl, r4
 80044fa:	db19      	blt.n	8004530 <_strtol_l.constprop.0+0xc0>
 80044fc:	fb06 4603 	mla	r6, r6, r3, r4
 8004500:	f04f 0e01 	mov.w	lr, #1
 8004504:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004508:	e7e8      	b.n	80044dc <_strtol_l.constprop.0+0x6c>
 800450a:	2c2b      	cmp	r4, #43	; 0x2b
 800450c:	bf04      	itt	eq
 800450e:	782c      	ldrbeq	r4, [r5, #0]
 8004510:	1cb5      	addeq	r5, r6, #2
 8004512:	e7ca      	b.n	80044aa <_strtol_l.constprop.0+0x3a>
 8004514:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004518:	f1bc 0f19 	cmp.w	ip, #25
 800451c:	d801      	bhi.n	8004522 <_strtol_l.constprop.0+0xb2>
 800451e:	3c37      	subs	r4, #55	; 0x37
 8004520:	e7e2      	b.n	80044e8 <_strtol_l.constprop.0+0x78>
 8004522:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004526:	f1bc 0f19 	cmp.w	ip, #25
 800452a:	d804      	bhi.n	8004536 <_strtol_l.constprop.0+0xc6>
 800452c:	3c57      	subs	r4, #87	; 0x57
 800452e:	e7db      	b.n	80044e8 <_strtol_l.constprop.0+0x78>
 8004530:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8004534:	e7e6      	b.n	8004504 <_strtol_l.constprop.0+0x94>
 8004536:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800453a:	d105      	bne.n	8004548 <_strtol_l.constprop.0+0xd8>
 800453c:	2322      	movs	r3, #34	; 0x22
 800453e:	6003      	str	r3, [r0, #0]
 8004540:	4646      	mov	r6, r8
 8004542:	b942      	cbnz	r2, 8004556 <_strtol_l.constprop.0+0xe6>
 8004544:	4630      	mov	r0, r6
 8004546:	e79e      	b.n	8004486 <_strtol_l.constprop.0+0x16>
 8004548:	b107      	cbz	r7, 800454c <_strtol_l.constprop.0+0xdc>
 800454a:	4276      	negs	r6, r6
 800454c:	2a00      	cmp	r2, #0
 800454e:	d0f9      	beq.n	8004544 <_strtol_l.constprop.0+0xd4>
 8004550:	f1be 0f00 	cmp.w	lr, #0
 8004554:	d000      	beq.n	8004558 <_strtol_l.constprop.0+0xe8>
 8004556:	1e69      	subs	r1, r5, #1
 8004558:	6011      	str	r1, [r2, #0]
 800455a:	e7f3      	b.n	8004544 <_strtol_l.constprop.0+0xd4>
 800455c:	2430      	movs	r4, #48	; 0x30
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1b1      	bne.n	80044c6 <_strtol_l.constprop.0+0x56>
 8004562:	2308      	movs	r3, #8
 8004564:	e7af      	b.n	80044c6 <_strtol_l.constprop.0+0x56>
 8004566:	2c30      	cmp	r4, #48	; 0x30
 8004568:	d0a5      	beq.n	80044b6 <_strtol_l.constprop.0+0x46>
 800456a:	230a      	movs	r3, #10
 800456c:	e7ab      	b.n	80044c6 <_strtol_l.constprop.0+0x56>
 800456e:	bf00      	nop
 8004570:	0800542a 	.word	0x0800542a

08004574 <_strtol_r>:
 8004574:	f7ff bf7c 	b.w	8004470 <_strtol_l.constprop.0>

08004578 <_strtoul_l.constprop.0>:
 8004578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800457c:	4f36      	ldr	r7, [pc, #216]	; (8004658 <_strtoul_l.constprop.0+0xe0>)
 800457e:	4686      	mov	lr, r0
 8004580:	460d      	mov	r5, r1
 8004582:	4628      	mov	r0, r5
 8004584:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004588:	5d3e      	ldrb	r6, [r7, r4]
 800458a:	f016 0608 	ands.w	r6, r6, #8
 800458e:	d1f8      	bne.n	8004582 <_strtoul_l.constprop.0+0xa>
 8004590:	2c2d      	cmp	r4, #45	; 0x2d
 8004592:	d130      	bne.n	80045f6 <_strtoul_l.constprop.0+0x7e>
 8004594:	782c      	ldrb	r4, [r5, #0]
 8004596:	2601      	movs	r6, #1
 8004598:	1c85      	adds	r5, r0, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d057      	beq.n	800464e <_strtoul_l.constprop.0+0xd6>
 800459e:	2b10      	cmp	r3, #16
 80045a0:	d109      	bne.n	80045b6 <_strtoul_l.constprop.0+0x3e>
 80045a2:	2c30      	cmp	r4, #48	; 0x30
 80045a4:	d107      	bne.n	80045b6 <_strtoul_l.constprop.0+0x3e>
 80045a6:	7828      	ldrb	r0, [r5, #0]
 80045a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80045ac:	2858      	cmp	r0, #88	; 0x58
 80045ae:	d149      	bne.n	8004644 <_strtoul_l.constprop.0+0xcc>
 80045b0:	786c      	ldrb	r4, [r5, #1]
 80045b2:	2310      	movs	r3, #16
 80045b4:	3502      	adds	r5, #2
 80045b6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80045ba:	2700      	movs	r7, #0
 80045bc:	fbb8 f8f3 	udiv	r8, r8, r3
 80045c0:	fb03 f908 	mul.w	r9, r3, r8
 80045c4:	ea6f 0909 	mvn.w	r9, r9
 80045c8:	4638      	mov	r0, r7
 80045ca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80045ce:	f1bc 0f09 	cmp.w	ip, #9
 80045d2:	d815      	bhi.n	8004600 <_strtoul_l.constprop.0+0x88>
 80045d4:	4664      	mov	r4, ip
 80045d6:	42a3      	cmp	r3, r4
 80045d8:	dd23      	ble.n	8004622 <_strtoul_l.constprop.0+0xaa>
 80045da:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80045de:	d007      	beq.n	80045f0 <_strtoul_l.constprop.0+0x78>
 80045e0:	4580      	cmp	r8, r0
 80045e2:	d31b      	bcc.n	800461c <_strtoul_l.constprop.0+0xa4>
 80045e4:	d101      	bne.n	80045ea <_strtoul_l.constprop.0+0x72>
 80045e6:	45a1      	cmp	r9, r4
 80045e8:	db18      	blt.n	800461c <_strtoul_l.constprop.0+0xa4>
 80045ea:	fb00 4003 	mla	r0, r0, r3, r4
 80045ee:	2701      	movs	r7, #1
 80045f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045f4:	e7e9      	b.n	80045ca <_strtoul_l.constprop.0+0x52>
 80045f6:	2c2b      	cmp	r4, #43	; 0x2b
 80045f8:	bf04      	itt	eq
 80045fa:	782c      	ldrbeq	r4, [r5, #0]
 80045fc:	1c85      	addeq	r5, r0, #2
 80045fe:	e7cc      	b.n	800459a <_strtoul_l.constprop.0+0x22>
 8004600:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004604:	f1bc 0f19 	cmp.w	ip, #25
 8004608:	d801      	bhi.n	800460e <_strtoul_l.constprop.0+0x96>
 800460a:	3c37      	subs	r4, #55	; 0x37
 800460c:	e7e3      	b.n	80045d6 <_strtoul_l.constprop.0+0x5e>
 800460e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004612:	f1bc 0f19 	cmp.w	ip, #25
 8004616:	d804      	bhi.n	8004622 <_strtoul_l.constprop.0+0xaa>
 8004618:	3c57      	subs	r4, #87	; 0x57
 800461a:	e7dc      	b.n	80045d6 <_strtoul_l.constprop.0+0x5e>
 800461c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004620:	e7e6      	b.n	80045f0 <_strtoul_l.constprop.0+0x78>
 8004622:	1c7b      	adds	r3, r7, #1
 8004624:	d106      	bne.n	8004634 <_strtoul_l.constprop.0+0xbc>
 8004626:	2322      	movs	r3, #34	; 0x22
 8004628:	f8ce 3000 	str.w	r3, [lr]
 800462c:	4638      	mov	r0, r7
 800462e:	b932      	cbnz	r2, 800463e <_strtoul_l.constprop.0+0xc6>
 8004630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004634:	b106      	cbz	r6, 8004638 <_strtoul_l.constprop.0+0xc0>
 8004636:	4240      	negs	r0, r0
 8004638:	2a00      	cmp	r2, #0
 800463a:	d0f9      	beq.n	8004630 <_strtoul_l.constprop.0+0xb8>
 800463c:	b107      	cbz	r7, 8004640 <_strtoul_l.constprop.0+0xc8>
 800463e:	1e69      	subs	r1, r5, #1
 8004640:	6011      	str	r1, [r2, #0]
 8004642:	e7f5      	b.n	8004630 <_strtoul_l.constprop.0+0xb8>
 8004644:	2430      	movs	r4, #48	; 0x30
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1b5      	bne.n	80045b6 <_strtoul_l.constprop.0+0x3e>
 800464a:	2308      	movs	r3, #8
 800464c:	e7b3      	b.n	80045b6 <_strtoul_l.constprop.0+0x3e>
 800464e:	2c30      	cmp	r4, #48	; 0x30
 8004650:	d0a9      	beq.n	80045a6 <_strtoul_l.constprop.0+0x2e>
 8004652:	230a      	movs	r3, #10
 8004654:	e7af      	b.n	80045b6 <_strtoul_l.constprop.0+0x3e>
 8004656:	bf00      	nop
 8004658:	0800542a 	.word	0x0800542a

0800465c <_strtoul_r>:
 800465c:	f7ff bf8c 	b.w	8004578 <_strtoul_l.constprop.0>

08004660 <__submore>:
 8004660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004664:	460c      	mov	r4, r1
 8004666:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800466c:	4299      	cmp	r1, r3
 800466e:	d11d      	bne.n	80046ac <__submore+0x4c>
 8004670:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004674:	f7fe f838 	bl	80026e8 <_malloc_r>
 8004678:	b918      	cbnz	r0, 8004682 <__submore+0x22>
 800467a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800467e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004686:	63a3      	str	r3, [r4, #56]	; 0x38
 8004688:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800468c:	6360      	str	r0, [r4, #52]	; 0x34
 800468e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004692:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004696:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800469a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800469e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80046a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80046a6:	6020      	str	r0, [r4, #0]
 80046a8:	2000      	movs	r0, #0
 80046aa:	e7e8      	b.n	800467e <__submore+0x1e>
 80046ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80046ae:	0077      	lsls	r7, r6, #1
 80046b0:	463a      	mov	r2, r7
 80046b2:	f7ff f815 	bl	80036e0 <_realloc_r>
 80046b6:	4605      	mov	r5, r0
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d0de      	beq.n	800467a <__submore+0x1a>
 80046bc:	eb00 0806 	add.w	r8, r0, r6
 80046c0:	4601      	mov	r1, r0
 80046c2:	4632      	mov	r2, r6
 80046c4:	4640      	mov	r0, r8
 80046c6:	f7fd ffd9 	bl	800267c <memcpy>
 80046ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80046ce:	f8c4 8000 	str.w	r8, [r4]
 80046d2:	e7e9      	b.n	80046a8 <__submore+0x48>

080046d4 <_fstat_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	4d07      	ldr	r5, [pc, #28]	; (80046f4 <_fstat_r+0x20>)
 80046d8:	2300      	movs	r3, #0
 80046da:	4604      	mov	r4, r0
 80046dc:	4608      	mov	r0, r1
 80046de:	4611      	mov	r1, r2
 80046e0:	602b      	str	r3, [r5, #0]
 80046e2:	f000 f829 	bl	8004738 <_fstat>
 80046e6:	1c43      	adds	r3, r0, #1
 80046e8:	d102      	bne.n	80046f0 <_fstat_r+0x1c>
 80046ea:	682b      	ldr	r3, [r5, #0]
 80046ec:	b103      	cbz	r3, 80046f0 <_fstat_r+0x1c>
 80046ee:	6023      	str	r3, [r4, #0]
 80046f0:	bd38      	pop	{r3, r4, r5, pc}
 80046f2:	bf00      	nop
 80046f4:	20000d10 	.word	0x20000d10

080046f8 <_isatty_r>:
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	4d06      	ldr	r5, [pc, #24]	; (8004714 <_isatty_r+0x1c>)
 80046fc:	2300      	movs	r3, #0
 80046fe:	4604      	mov	r4, r0
 8004700:	4608      	mov	r0, r1
 8004702:	602b      	str	r3, [r5, #0]
 8004704:	f000 f828 	bl	8004758 <_isatty>
 8004708:	1c43      	adds	r3, r0, #1
 800470a:	d102      	bne.n	8004712 <_isatty_r+0x1a>
 800470c:	682b      	ldr	r3, [r5, #0]
 800470e:	b103      	cbz	r3, 8004712 <_isatty_r+0x1a>
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	bd38      	pop	{r3, r4, r5, pc}
 8004714:	20000d10 	.word	0x20000d10

08004718 <_malloc_usable_size_r>:
 8004718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800471c:	1f18      	subs	r0, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	bfbc      	itt	lt
 8004722:	580b      	ldrlt	r3, [r1, r0]
 8004724:	18c0      	addlt	r0, r0, r3
 8004726:	4770      	bx	lr

08004728 <_close>:
 8004728:	4b02      	ldr	r3, [pc, #8]	; (8004734 <_close+0xc>)
 800472a:	2258      	movs	r2, #88	; 0x58
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004732:	4770      	bx	lr
 8004734:	20000d10 	.word	0x20000d10

08004738 <_fstat>:
 8004738:	4b02      	ldr	r3, [pc, #8]	; (8004744 <_fstat+0xc>)
 800473a:	2258      	movs	r2, #88	; 0x58
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004742:	4770      	bx	lr
 8004744:	20000d10 	.word	0x20000d10

08004748 <_getpid>:
 8004748:	4b02      	ldr	r3, [pc, #8]	; (8004754 <_getpid+0xc>)
 800474a:	2258      	movs	r2, #88	; 0x58
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004752:	4770      	bx	lr
 8004754:	20000d10 	.word	0x20000d10

08004758 <_isatty>:
 8004758:	4b02      	ldr	r3, [pc, #8]	; (8004764 <_isatty+0xc>)
 800475a:	2258      	movs	r2, #88	; 0x58
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	2000      	movs	r0, #0
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000d10 	.word	0x20000d10

08004768 <_kill>:
 8004768:	4b02      	ldr	r3, [pc, #8]	; (8004774 <_kill+0xc>)
 800476a:	2258      	movs	r2, #88	; 0x58
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004772:	4770      	bx	lr
 8004774:	20000d10 	.word	0x20000d10

08004778 <_lseek>:
 8004778:	4b02      	ldr	r3, [pc, #8]	; (8004784 <_lseek+0xc>)
 800477a:	2258      	movs	r2, #88	; 0x58
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004782:	4770      	bx	lr
 8004784:	20000d10 	.word	0x20000d10

08004788 <_read>:
 8004788:	4b02      	ldr	r3, [pc, #8]	; (8004794 <_read+0xc>)
 800478a:	2258      	movs	r2, #88	; 0x58
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004792:	4770      	bx	lr
 8004794:	20000d10 	.word	0x20000d10

08004798 <_sbrk>:
 8004798:	4a04      	ldr	r2, [pc, #16]	; (80047ac <_sbrk+0x14>)
 800479a:	4905      	ldr	r1, [pc, #20]	; (80047b0 <_sbrk+0x18>)
 800479c:	6813      	ldr	r3, [r2, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bf08      	it	eq
 80047a2:	460b      	moveq	r3, r1
 80047a4:	4418      	add	r0, r3
 80047a6:	6010      	str	r0, [r2, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	4770      	bx	lr
 80047ac:	20000d14 	.word	0x20000d14
 80047b0:	20000d18 	.word	0x20000d18

080047b4 <_write>:
 80047b4:	4b02      	ldr	r3, [pc, #8]	; (80047c0 <_write+0xc>)
 80047b6:	2258      	movs	r2, #88	; 0x58
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047be:	4770      	bx	lr
 80047c0:	20000d10 	.word	0x20000d10

080047c4 <_exit>:
 80047c4:	e7fe      	b.n	80047c4 <_exit>
 80047c6:	bf00      	nop

080047c8 <_init>:
 80047c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ca:	bf00      	nop
 80047cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ce:	bc08      	pop	{r3}
 80047d0:	469e      	mov	lr, r3
 80047d2:	4770      	bx	lr

080047d4 <_fini>:
 80047d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d6:	bf00      	nop
 80047d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047da:	bc08      	pop	{r3}
 80047dc:	469e      	mov	lr, r3
 80047de:	4770      	bx	lr
